# Query: dinner
# Flags: IgnoreExcludeSettings
# Excluding: combined.log
# ContextLines: 1

358 risultati - 98 file

.next/static/chunks/main.js:
  1154  "use strict";
  1155: ⟪ 69314 characters skipped ⟫ if (node.defaultValue !== toString(value)) {\n      node.defaultValue = toString(value);\n    }\n  }\n}\n\nvar didWarnSelectedSetOnOption = false;\nvar didWarnInvalidChild = false;\nvar didWarnInvalidInnerHTML = false;\n/**\n * Implements an <option> host component that warns when `selected` is set.\n */\n\nfunction validateProps(element, props) {\n  {\n    // If a value is not provided, then the children must be simple.\n    if (props.value == null) {\n      if (typeof props.children === 'object' && props.children !== null) {\n        React.Children.forEach(props.children, function (child) {\n          if (child == null) {\n            return;\n          }\n\n          if (typeof child === 'string' || typeof child === 'number') {\n            return;\n          }\n\n          if (!didWarnInvalidChild) {\n            didWarnInvalidChild = true;\n\n            error('Cannot infer the option value of complex children. ' + 'Pass a `value` prop or use a plain string as children to <option>.');\n          }\n        });\n      } else if (props.dangerouslySetInnerHTML != null) {\n        if (!didWarnInvalidInnerHTML) {\n          didWarnInvalidInnerHTML = true;\n\n          error('Pass a `value` prop if you set dangerouslyInnerHTML so React knows ' + 'which value should be selected.');\n        }\n      }\n    } // TODO: Remove support for `selected` in <option>.\n\n\n    if (props.selected != null && !didWarnSelectedSetOnOption) {\n      error('Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.');\n\n      didWarnSelectedSetOnOption = true;\n    }\n  }\n}\nfunction postMountWrapper$1(element, props) {\n  // value=\"\" should make a value attribute (#6219)\n  if (props.value != null) {\n    element.setAttribute('value', toString(getToStringValue(props.value)));\n  }\n}\n\nvar isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n\nfunction isArray(a) {\n  return isArrayImpl(a);\n}\n\nvar didWarnValueDefaultValue$1;\n\n{\n  didWarnValueDefaultValue$1 = false;\n}\n\nfunction getDeclarationErrorAddendum() {\n  var ownerName = getCurrentFiberOwnerNameInDevOrNull(
  1156  

.next/static/chunks/fallback/amp.js:
  721  "use strict";
  722: ⟪ 69314 characters skipped ⟫ if (node.defaultValue !== toString(value)) {\n      node.defaultValue = toString(value);\n    }\n  }\n}\n\nvar didWarnSelectedSetOnOption = false;\nvar didWarnInvalidChild = false;\nvar didWarnInvalidInnerHTML = false;\n/**\n * Implements an <option> host component that warns when `selected` is set.\n */\n\nfunction validateProps(element, props) {\n  {\n    // If a value is not provided, then the children must be simple.\n    if (props.value == null) {\n      if (typeof props.children === 'object' && props.children !== null) {\n        React.Children.forEach(props.children, function (child) {\n          if (child == null) {\n            return;\n          }\n\n          if (typeof child === 'string' || typeof child === 'number') {\n            return;\n          }\n\n          if (!didWarnInvalidChild) {\n            didWarnInvalidChild = true;\n\n            error('Cannot infer the option value of complex children. ' + 'Pass a `value` prop or use a plain string as children to <option>.');\n          }\n        });\n      } else if (props.dangerouslySetInnerHTML != null) {\n        if (!didWarnInvalidInnerHTML) {\n          didWarnInvalidInnerHTML = true;\n\n          error('Pass a `value` prop if you set dangerouslyInnerHTML so React knows ' + 'which value should be selected.');\n        }\n      }\n    } // TODO: Remove support for `selected` in <option>.\n\n\n    if (props.selected != null && !didWarnSelectedSetOnOption) {\n      error('Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.');\n\n      didWarnSelectedSetOnOption = true;\n    }\n  }\n}\nfunction postMountWrapper$1(element, props) {\n  // value=\"\" should make a value attribute (#6219)\n  if (props.value != null) {\n    element.setAttribute('value', toString(getToStringValue(props.value)));\n  }\n}\n\nvar isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n\nfunction isArray(a) {\n  return isArrayImpl(a);\n}\n\nvar didWarnValueDefaultValue$1;\n\n{\n  didWarnValueDefaultValue$1 = false;\n}\n\nfunction getDeclarationErrorAddendum() {\n  var ownerName = getCurrentFiberOwnerNameInDevOrNull(
  723  

.next/static/chunks/fallback/main.js:
  1154  "use strict";
  1155: ⟪ 69314 characters skipped ⟫ if (node.defaultValue !== toString(value)) {\n      node.defaultValue = toString(value);\n    }\n  }\n}\n\nvar didWarnSelectedSetOnOption = false;\nvar didWarnInvalidChild = false;\nvar didWarnInvalidInnerHTML = false;\n/**\n * Implements an <option> host component that warns when `selected` is set.\n */\n\nfunction validateProps(element, props) {\n  {\n    // If a value is not provided, then the children must be simple.\n    if (props.value == null) {\n      if (typeof props.children === 'object' && props.children !== null) {\n        React.Children.forEach(props.children, function (child) {\n          if (child == null) {\n            return;\n          }\n\n          if (typeof child === 'string' || typeof child === 'number') {\n            return;\n          }\n\n          if (!didWarnInvalidChild) {\n            didWarnInvalidChild = true;\n\n            error('Cannot infer the option value of complex children. ' + 'Pass a `value` prop or use a plain string as children to <option>.');\n          }\n        });\n      } else if (props.dangerouslySetInnerHTML != null) {\n        if (!didWarnInvalidInnerHTML) {\n          didWarnInvalidInnerHTML = true;\n\n          error('Pass a `value` prop if you set dangerouslyInnerHTML so React knows ' + 'which value should be selected.');\n        }\n      }\n    } // TODO: Remove support for `selected` in <option>.\n\n\n    if (props.selected != null && !didWarnSelectedSetOnOption) {\n      error('Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.');\n\n      didWarnSelectedSetOnOption = true;\n    }\n  }\n}\nfunction postMountWrapper$1(element, props) {\n  // value=\"\" should make a value attribute (#6219)\n  if (props.value != null) {\n    element.setAttribute('value', toString(getToStringValue(props.value)));\n  }\n}\n\nvar isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n\nfunction isArray(a) {\n  return isArrayImpl(a);\n}\n\nvar didWarnValueDefaultValue$1;\n\n{\n  didWarnValueDefaultValue$1 = false;\n}\n\nfunction getDeclarationErrorAddendum() {\n  var ownerName = getCurrentFiberOwnerNameInDevOrNull(
  1156  

.next/static/chunks/pages/_app.js:
  941  "use strict";
  942: ⟪ 3397 characters skipped ⟫es = (0,_utils_DOMutils__WEBPACK_IMPORTED_MODULE_5__.getFocusableNodes)([commonParent], visibilityCache).map(function (_a) {\n        var node = _a.node;\n        return node;\n    });\n    var orderedInnerElements = reorderNodes(outerNodes, innerElements);\n    // collect inner focusable and separately tabbables\n    var innerFocusables = orderedInnerElements.map(function (_a) {\n        var node = _a.node;\n        return node;\n    });\n    var innerTabbable = orderedInnerElements.filter(function (_a) {\n        var tabIndex = _a.tabIndex;\n        return tabIndex >= 0;\n    }).map(function (_a) {\n        var node = _a.node;\n        return node;\n    });\n    var newId = (0,_solver__WEBPACK_IMPORTED_MODULE_6__.newFocus)(innerFocusables, innerTabbable, outerNodes, activeElement, lastNode);\n    if (newId === _solver__WEBPACK_IMPORTED_MODULE_6__.NEW_FOCUS) {\n        var focusNode = \n        // first try only tabbable, and the fallback to all focusable, as long as at least one element should be picked for focus\n        (0,_utils_auto_focus__WEBPACK_IMPORTED_MODULE_7__.pickAutofocus)(anyFocusable, innerTabbable, (0,_utils_parenting__WEBPACK_IMPORTED_MODULE_4__.allParentAutofocusables)(entries, visibilityCache)) ||\n            (0,_utils_auto_focus__WEBPACK_IMPORTED_MODULE_7__.pickAutofocus)(anyFocusable, innerFocusables, (0,_utils_parenting__WEBPACK_IMPORTED_MODULE_4__.allParentAutofocusables)(entries, visibilityCache));\n        if (focusNode) {\n            return { node: focusNode };\n        }\n        else {\n            console.warn('focus-lock: cannot find any node to move focus into');\n            return undefined;\n        }\n    }\n    if (newId === undefined) {\n        return newId;\n    }\n    return orderedInnerElements[newId];\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZm9jdXMtbG9jay9kaXN0L2VzMjAxNS9mb2N1c1NvbHZlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBK0M7QUFDTTtBQUNNO0FBQ1Q7QUFDQztBQUNTO0FBQ1I7QUFDNEI7QUFDaEY7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLHdDQUF3QztBQUNqRjtBQUNBLDBDQUEwQyx5QkFBeUIsU0FBUyxnREFBUztBQUNyRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCx3QkFBd0IseUVBQWdCLENBQUMscURBQU8sa0NBQWtDLHNEQUFRO0FBQzFGLGtCQUFrQix3RUFBbUIsaUJBQWlCLGtEQUFXO0FBQ2pFLHVCQUF1QixvRUFBa0I7QUFDekM7QUFDQSx1QkFBdUIsa0VBQWlCO0FBQ3hDO0FBQ0E7QUFDQSxlQUFlLHNEQUFXO0FBQzFCLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsa0VBQWlCO0FBQ3RDO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTCxnQkFBZ0IsaURBQVE7QUFDeEIsa0JBQWtCLDhDQUFTO0FBQzNCO0FBQ0E7QUFDQSxRQUFRLGdFQUFhLDhCQUE4Qix5RUFBdUI7QUFDMUUsWUFBWSxnRUFBYSxn
  943  

BACKEND/models/Meal.js:
  18      enum: {
  19:       values: ['breakfast', 'lunch', 'dinner', 'aperitif'],
  20:       message: 'Il tipo di pasto deve essere uno tra: breakfast, lunch, dinner, aperitif'
  21      }

BACKEND/node_modules/react-icons/md/index.d.ts:
  1549  export declare const MdDiamond: IconType;
  1550: export declare const MdDinnerDining: IconType;
  1551  export declare const MdDirectionsBike: IconType;

  3725  export declare const MdOutlineDiamond: IconType;
  3726: export declare const MdOutlineDinnerDining: IconType;
  3727  export declare const MdOutlineDirectionsBike: IconType;

BACKEND/node_modules/react-icons/md/index.js:
   4643  };
   4644: module.exports.MdDinnerDining = function MdDinnerDining (props) {
   4645    return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 24 24"},"child":[{"tag":"path","attr":{"fill":"none","d":"M0 0h24v24H0z"},"child":[]},{"tag":"path","attr":{"d":"M2 19h20l-2 2H4l-2-2zM5 6h1v1H5V6zm0-2h1v1H5V4zm4 0v1H7V4h2zm0 3H7V6h2v1zm-3 8.23c-.36.11-.69.28-1 .47V8h1v7.23zm-2 1.29c-.38.44-.68.93-.84 1.48h16.82c.01-.16.03-.33.03-.5a5.497 5.497 0 0 0-10.58-2.1c-.59-.25-1.24-.4-1.93-.4-.17 0-.33.02-.5.04V8h2c1.03.06 1.9-.96 2-2h10V5H11c-.1-1.05-.97-1.97-2-2H3v1h1v1H3v1h1v1H3v1h1v8.52z"},"child":[]}]})(props);

  11171  };
  11172: module.exports.MdOutlineDinnerDining = function MdOutlineDinnerDining (props) {
  11173    return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 24 24"},"child":[{"tag":"path","attr":{"fill":"none","d":"M0 0h24v24H0z"},"child":[]},{"tag":"path","attr":{"d":"m2 19 2 2h16l2-2zM3 18h16.97c.29-3.26-2.28-6-5.48-6-2.35 0-4.35 1.48-5.14 3.55-.41-.23-.87-.38-1.35-.47V9h1.75C10.99 9 12 7.99 12 6.75h9v-1.5h-9C12 4.01 10.99 3 9.75 3H3v1.5h1v.75H3v1.5h1v.75H3V9h1v7.39c-.44.46-.78 1-1 1.61zm11.5-4c.99 0 1.91.4 2.58 1.14.24.26.44.55.58.86h-6.32c.58-1.21 1.81-2 3.16-2zM8 4.5h2v.75H8V4.5zm0 2.25h2v.75H8v-.75zM5.5 4.5h1v.75h-1V4.5zm0 2.25h1v.75h-1v-.75zM5.5 9h1v6.06c-.35.06-.68.17-1 .3V9z"},"child":[]}]})(props);

BACKEND/node_modules/react-icons/md/index.mjs:
   4643  };
   4644: export function MdDinnerDining (props) {
   4645    return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 24 24"},"child":[{"tag":"path","attr":{"fill":"none","d":"M0 0h24v24H0z"},"child":[]},{"tag":"path","attr":{"d":"M2 19h20l-2 2H4l-2-2zM5 6h1v1H5V6zm0-2h1v1H5V4zm4 0v1H7V4h2zm0 3H7V6h2v1zm-3 8.23c-.36.11-.69.28-1 .47V8h1v7.23zm-2 1.29c-.38.44-.68.93-.84 1.48h16.82c.01-.16.03-.33.03-.5a5.497 5.497 0 0 0-10.58-2.1c-.59-.25-1.24-.4-1.93-.4-.17 0-.33.02-.5.04V8h2c1.03.06 1.9-.96 2-2h10V5H11c-.1-1.05-.97-1.97-2-2H3v1h1v1H3v1h1v1H3v1h1v8.52z"},"child":[]}]})(props);

  11171  };
  11172: export function MdOutlineDinnerDining (props) {
  11173    return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 24 24"},"child":[{"tag":"path","attr":{"fill":"none","d":"M0 0h24v24H0z"},"child":[]},{"tag":"path","attr":{"d":"m2 19 2 2h16l2-2zM3 18h16.97c.29-3.26-2.28-6-5.48-6-2.35 0-4.35 1.48-5.14 3.55-.41-.23-.87-.38-1.35-.47V9h1.75C10.99 9 12 7.99 12 6.75h9v-1.5h-9C12 4.01 10.99 3 9.75 3H3v1.5h1v.75H3v1.5h1v.75H3V9h1v7.39c-.44.46-.78 1-1 1.61zm11.5-4c.99 0 1.91.4 2.58 1.14.24.26.44.55.58.86h-6.32c.58-1.21 1.81-2 3.16-2zM8 4.5h2v.75H8V4.5zm0 2.25h2v.75H8v-.75zM5.5 4.5h1v.75h-1V4.5zm0 2.25h1v.75h-1v-.75zM5.5 9h1v6.06c-.35.06-.68.17-1 .3V9z"},"child":[]}]})(props);

BACKEND/node_modules/yargs/build/lib/command.js:
  243          return isPromise(maybePromiseArgv)
  244:             ? maybePromiseArgv.then(resolvedInnerArgv => this.handleValidationAndGetResult(isDefaultCommand, commandHandler, resolvedInnerArgv, currentContext, aliases, yargs, middlewares, positionalMap))
  245              : this.handleValidationAndGetResult(isDefaultCommand, commandHandler, maybePromiseArgv, currentContext, aliases, yargs, middlewares, positionalMap);

BACKEND/routes/meal.js:
  40    check('limit', 'Limite non valido').optional().isInt({ min: 1, max: 50 }),
  41:   check('type', 'Tipo pasto non valido').optional().isIn(['breakfast', 'lunch', 'dinner', 'aperitif']),
  42    check('language', 'Lingua non valida').optional().isString(),

  80    check('type', 'Tipo pasto non valido')
  81:     .isIn(['breakfast', 'lunch', 'dinner', 'aperitif'])
  82:     .withMessage('Il tipo di pasto deve essere uno tra: breakfast, lunch, dinner, aperitif'),
  83    check('date', 'La data è obbligatoria e deve essere futura')

FRONTEND/client/node_modules/.cache/babel-loader/0dd21244b813d13106a6d3cd6963924e24a8177b6ff8595c427af82d5de3c8dd.json:
  1: ⟪ 733 characters skipped ⟫User\", \"Mario\"],\n      maxParticipants: 4,\n      description: \"Un pranzo in compagnia!\"\n    }],\n    participatedMeals: [{\n      _id: \"2\",\n      title: \"Cena etnica\",\n      mealType: \"dinner\",\n      dateTime: new Date().toISOString(),\n      participants: [\"DemoUser\", \"Anna\", \"Luca\"],\n      maxParticipants: 6,\n      description: \"Scopriamo nuovi sapori insieme.\"\n    }],\n    profileImage: \"https://ui-avatars.com/api/?name=Demo+User&background=FF6B6B&color=fff\",\n    settings: {\n      emailNotifications: true,\n      newMealNotifications: true,\n      reminderNotifications: false\n    }\n  };\n}\nexport async function updateProfile(data) {\n  // Se c'è un'immagine profilo in formato FormData, simuliamo un nuovo URL\n  if (data.profileImage instanceof FormData) {\n    // Simuliamo un nuovo URL (in realtà dovresti riceverlo dal backend)\n    return {\n      ...data,\n      profileImage: \"https://ui-avatars.com/api/?name=Nuova+Foto&background=4ECDC4&color=fff\"\n    };\n  }\n  // Altrimenti restituiamo i dati aggiornati\n  return {\n    ...data\n  };\n}","map":{"version":3,"names":["getProfile","nickname","gender","age","bio","location","interests","lan⟪ 1138 characters skipped ⟫   maxParticipants: 4,\n        description: \"Un pranzo in compagnia!\"\n      }\n    ],\n    participatedMeals: [\n      {\n        _id: \"2\",\n        title: \"Cena etnica\",\n        mealType: \"dinner\",\n        dateTime: new Date().toISOString(),\n        participants: [\"DemoUser\", \"Anna\", \"Luca\"],\n        maxParticipants: 6,\n        description: \"Scopriamo nuovi sapori insieme.\"\n      }\n    ],\n    profileImage: \"https://ui-avatars.com/api/?name=Demo+User&background=FF6B6B&color=fff\",\n    settings: {\n      emailNotifications: true,\n      newMealNotifications: true,\n      reminderNotifications: false\n    }\n  };\n}\n\nexport async function updateProfile(data) {\n  // Se c'è un'immagine profilo in formato FormData, simuliamo un nuovo URL\n  if (data.profileImage instanceof FormData) {\n    // Simuliamo un nuovo URL (in realtà dovresti riceverlo dal backend)\n    return {\n      ...data,\n      profileImage: \"https://ui-avatars.com/api/?name=Nuova+Foto&background=4ECDC4&color=fff\"\n    };\n  }\n  // Altrimenti restituiamo i dati aggiornati\n  return {\n    ...data\n  };\n}"],"mappings":"AAAA;;AAEA;AACA,OAAO,eAAeA,UAAUA,CAAA,EAAG;EACjC;EACA,OAAO;IACLC,QAAQ

FRONTEND/client/node_modules/.cache/babel-loader/1c44987aeb3eb109baaf71fa6179500934d4b5b4d6389a14c90a3a7db510ba6a.json:
  1: ⟪ 553 characters skipped ⟫ent as _Fragment } from \"react/jsx-dev-runtime\";\nconst CreateMealForm = ({\n  onMealCreated,\n  onCancel\n}) => {\n  _s();\n  const [formData, setFormData] = useState({\n    title: '',\n    type: 'dinner',\n    date: new Date(new Date().setHours(new Date().getHours() + 2)),\n    maxParticipants: 4,\n    description: '',\n    language: 'Italiano',\n    topics: [],\n    duration: 120,\n    // Durata predefinita di 2 ore\n    settings: {\n      allowLateJoin: true,\n      requireApproval: false,\n      recordingEnabled: false\n    }\n  });\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [isFormValid, setIsFormValid] = useState(false);\n\n  // Validazione del form\n  useEffect(() => {\n    const validateForm = () => {\n      const {\n        title,\n        type,\n        date,\n        maxParticipants,\n        description,\n        language,\n        topics\n      } = formData;\n      const validations = {\n        title: title.trim().length >= 3,\n        type: ['breakfast', 'lunch', 'dinner', 'snack'].includes(type),\n        date: date instanceof Date && date > new Date(),\n        maxParticipants: maxParticipants >= 2 && maxParticipants <= 10,\n        description: description.trim().length >= 10,\n        language: language.trim().length >= 2,\n        topics: topics.length >= 1\n      };\n\n      // Debug delle validazioni\n      if (process.env.NODE_ENV === 'development') {\n        console.log('🔍 Form validations:', validations);\n      }\n      setIsFormValid(Object.values(validations).every(v => v === true));\n    };\n    validateForm();\n  }, [formData]);\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  const handleDateChange = date => {\n    setFormData(prev => ({\n      ...prev,\n      date: date\n    }));\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!isFormValid) {\n      const errorMessage = 'Per f⟪ 6374 characters skipped ⟫              fileName: _jsxFileName,\n                  lineNumber: 189,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"dinner\",\n                  children: \"\\uD83C\\uDF77 Cena\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 190,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"snack\",\n                  children: \"\\uD83C\\uDF6A Spuntino\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 191,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 182,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: ⟪ 22211 characters skipped ⟫s/CreateMealForm.css';\nimport { toast } from 'react-hot-toast';\n\nconst CreateMealForm = ({ onMealCreated, onCancel }) => {\n  const [formData, setFormData] = useState({\n    title: '',\n    type: 'dinner',\n    date: new Date(new Date().setHours(new Date().getHours() + 2)),\n    maxParticipants: 4,\n    description: '',\n    language: 'Italiano',\n    topics: [],\n    duration: 120, // Durata predefinita di 2 ore\n    settings: {\n      allowLateJoin: true,\n      requireApproval: false,\n      recordingEnabled: false\n    }\n  });\n  \n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [isFormValid, setIsFormValid] = useState(false);\n  \n  // Validazione del form\n  useEffect(() => {\n    const validateForm = () => {\n      const { title, type, date, maxParticipants, description, language, topics } = formData;\n      \n      const validations = {\n        title: title.trim().length >= 3,\n        type: ['breakfast', 'lunch', 'dinner', 'snack'].includes(type),\n        date: date instanceof Date && date > new Date(),\n        maxParticipants: maxParticipants >= 2 && maxParticipants <= 10,\n        description: description.trim().length >= 10,\n        language: language.trim().length >= 2,\n        topics: topics.length >= 1\n      };\n\n      // Debug delle validazioni\n      if (process.env.NODE_ENV === 'development') {\n        console.log('🔍 Form validations:', validations);\n      }\n      \n      setIsFormValid(Object.values(validations).every(v => v === true));\n    };\n    \n    validateForm();\n  }, [formData]);\n  \n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n  };\n  \n  const handleDateChange = (date) => {\n    setFormData(prev => ({ ...prev, date: date }));\n  };\n  \n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!isFormValid) {\n      const errorMessage = 'Per favore, compila correttame⟪ 3820 characters skipped ⟫     required\n                >\n                  <option value=\"breakfast\">🥐 Colazione</option>\n                  <option value=\"lunch\">🍽️ Pranzo</option>\n                  <option value=\"dinner\">🍷 Cena</option>\n                  <option value=\"snack\">🍪 Spuntino</option>\n                </Form.Select>\n              </Form.Group>\n            </Col>\n            \n            <Col md={6}>\n              <Form.Group>\n                <Form.Label>Lingua principale*</Form.Label>\n                <Form.Select\n                  name=\"language\"\n                  value={formData.language}\n                  onChange={handleChange}\n                  required\n                >\n                  <option value=\"Italiano\">🇮🇹 Italiano</option>\n                  <option value=\"English\">🇬🇧 Inglese</option>\n                  <option value=\"Español\">🇪🇸 Spagnolo</option>\n                  <option value=\"Français\">🇫🇷 Francese</option>\n                  <option value=\"Deutsch\">🇩🇪 Tedesco</option>\n                  <option value=\"中文\">🇨🇳 Cinese</option>\n                  <option value=\"日本語\">🇯🇵 Giapponese</option>\n                  <option valu

FRONTEND/client/node_modules/.cache/babel-loader/1f638e64aaf3267c82ec9a547a045c17ce9d58cf8ca5ea3a24bd8c605ed8c3bd.json:
  1: ⟪ 2732 characters skipped ⟫mealData.description.trim().length < 10) {\n      throw new MealServiceError('La descrizione deve essere di almeno 10 caratteri', 400, 'INVALID_DESCRIPTION');\n    }\n    if (!['breakfast', 'lunch', 'dinner'].includes(mealData.type)) {\n      throw new MealServiceError('Tipo di pasto non valido', 400, 'INVALID_TYPE');\n    }\n    if (!Array.isArray(mealData.topics) || mealData.topics.length === 0) {\n      throw new MealServiceError('Devi selezionare almeno un argomento', 400, 'INVALID_TOPICS');\n    }\n    if (typeof mealData.maxParticipants !== 'number' || mealData.maxParticipants < 2 || mealData.maxParticipants > 10) {\n      throw new MealServiceError('Il numero di partecipanti deve essere tra 2 e 10', 400, 'INVALID_PARTICIPANTS');\n    }\n\n    // Prepara i dati per l'invio\n    const formattedMealData = {\n      ...mealData,\n      title: mealData.title.trim(),\n      description: mealData.description.trim(),\n      date: new Date(mealData.date).toISOString(),\n      maxParticipants: parseInt(mealData.maxParticipants, 10),\n      topics: mealData.topics.map(topic => topic.trim()),\n      settings: {\n        ...mealData.settings,\n        language: mealData.language\n      }\⟪ 8173 characters skipped ⟫alData.description.trim().length < 10) {\n      throw new MealServiceError('La descrizione deve essere di almeno 10 caratteri', 400, 'INVALID_DESCRIPTION');\n    }\n\n    if (!['breakfast', 'lunch', 'dinner'].includes(mealData.type)) {\n      throw new MealServiceError('Tipo di pasto non valido', 400, 'INVALID_TYPE');\n    }\n\n    if (!Array.isArray(mealData.topics) || mealData.topics.length === 0) {\n      throw new MealServiceError('Devi selezionare almeno un argomento', 400, 'INVALID_TOPICS');\n    }\n\n    if (typeof mealData.maxParticipants !== 'number' || mealData.maxParticipants < 2 || mealData.maxParticipants > 10) {\n      throw new MealServiceError('Il numero di partecipanti deve essere tra 2 e 10', 400, 'INVALID_PARTICIPANTS');\n    }\n\n    // Prepara i dati per l'invio\n    const formattedMealData = {\n      ...mealData,\n      title: mealData.title.trim(),\n      description: mealData.description.trim(),\n      date: new Date(mealData.date).toISOString(),\n      maxParticipants: parseInt(mealData.maxParticipants, 10),\n      topics: mealData.topics.map(topic => topic.trim()),\n      settings: {\n        ...mealData.settings,\n        language: mealData.language\n    

FRONTEND/client/node_modules/.cache/babel-loader/2f61dff655576588c796f6ae504cb4f826bd943fbe9495df095f5ad196530a71.json:
  1: ⟪ 1689 characters skipped ⟫participants,\n    language,\n    meetingLink,\n    status,\n    location\n  } = meal;\n\n  // Traduzioni\n  const mealTypeTranslation = {\n    'breakfast': 'Colazione',\n    'lunch': 'Pranzo',\n    'dinner': 'Cena',\n    'snack': 'Spuntino'\n  };\n  const languageTranslation = {\n    'it': 'Italiano',\n    'en': 'Inglese',\n    'es': 'Spagnolo',\n    'fr': 'Francese',\n    'de': 'Tedesco'\n  };\n  const statusTranslation = {\n    'scheduled': 'In arrivo',\n    'ongoing': 'In corso',\n    'completed': 'Completato',\n    'cancelled': 'Cancellato'\n  };\n  const statusVariant = {\n    'scheduled': 'success',\n    'ongoing': 'warning',\n    'completed': 'secondary',\n    'cancelled': 'danger'\n  };\n\n  // Verifica se l'utente corrente è l'host\n  const isHost = host._id === (currentUser === null || currentUser === void 0 ? void 0 : currentUser.id);\n\n  // Verifica se l'utente corrente è un partecipante\n  const isParticipant = participants.some(p => p._id === (currentUser === null || currentUser === void 0 ? void 0 : currentUser.id));\n\n  // Verifica se il pasto è pieno\n  const isFull = participants.length >= maxParticipants;\n\n  // Verifica se il pasto è già passato\n  const isP⟪ 21072 characters skipped ⟫ription,\n    host, participants, language, meetingLink, status, location\n  } = meal;\n\n  // Traduzioni\n  const mealTypeTranslation = {\n    'breakfast': 'Colazione',\n    'lunch': 'Pranzo',\n    'dinner': 'Cena',\n    'snack': 'Spuntino'\n  };\n\n  const languageTranslation = {\n    'it': 'Italiano',\n    'en': 'Inglese',\n    'es': 'Spagnolo',\n    'fr': 'Francese',\n    'de': 'Tedesco'\n  };\n\n  const statusTranslation = {\n    'scheduled': 'In arrivo',\n    'ongoing': 'In corso',\n    'completed': 'Completato',\n    'cancelled': 'Cancellato'\n  };\n\n  const statusVariant = {\n    'scheduled': 'success',\n    'ongoing': 'warning',\n    'completed': 'secondary',\n    'cancelled': 'danger'\n  };\n\n  // Verifica se l'utente corrente è l'host\n  const isHost = host._id === currentUser?.id;\n  \n  // Verifica se l'utente corrente è un partecipante\n  const isParticipant = participants.some(p => p._id === currentUser?.id);\n  \n  // Verifica se il pasto è pieno\n  const isFull = participants.length >= maxParticipants;\n\n  // Verifica se il pasto è già passato\n  const isPast = new Date(dateTime) < new Date();\n\n  // Funzione per gestire gli errori di caricamento delle immagini

FRONTEND/client/node_modules/.cache/babel-loader/03debed577d9ce8a338319b7f831ae19db8c8ed3c821ef6f4803cb2b3cb8198a.json:
  1: ⟪ 475 characters skipped ⟫;\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CreateMealForm = ({\n  onMealCreated\n}) => {\n  _s();\n  const [formData, setFormData] = useState({\n    title: '',\n    type: 'dinner',\n    date: new Date(new Date().setHours(new Date().getHours() + 2)),\n    maxParticipants: 4,\n    description: '',\n    language: 'Italiano',\n    topics: [],\n    duration: 120,\n    // Durata predefinita di 2 ore\n    settings: {\n      allowLateJoin: true,\n      requireApproval: false,\n      recordingEnabled: false\n    }\n  });\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [isFormValid, setIsFormValid] = useState(false);\n\n  // Validazione del form\n  useEffect(() => {\n    const validateForm = () => {\n      const {\n        title,\n        type,\n        date,\n        maxParticipants,\n        description,\n        language,\n        topics\n      } = formData;\n      const isTitleValid = title.trim().length >= 3 && title.trim().length <= 100;\n      const isTypeValid = ['breakfast', 'lunch', 'dinner', 'snack'].includes(type);\n      const isDateValid = date instanceof Date && date > new Date();\n      const isMaxParticipantsValid = maxParticipants >= 2 && maxParticipants <= 10;\n      const isDescriptionValid = description.trim().length >= 10 && description.trim().length <= 1000;\n      const isLanguageValid = language.trim().length >= 2 && language.trim().length <= 50;\n      const isTopicsValid = topics.length >= 1 && topics.length <= 5;\n      setIsFormValid(isTitleValid && isTypeValid && isDateValid && isMaxParticipantsValid && isDescriptionValid && isLanguageValid && isTopicsValid);\n    };\n    validateForm();\n  }, [formData]);\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  const handleDateChange = date => {\n    setFormData(prev => ({\n      ...prev,\n      date: date\n    }));\n  };\n  const handleSubmit = async e => {\n    e.preventDefault(⟪ 4097 characters skipped ⟫              fileName: _jsxFileName,\n                  lineNumber: 136,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"dinner\",\n                  children: \"Cena\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 137,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"snack\",\n                  children: \"Snack\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 138,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 129,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 13\n          }, this), /*#__PURE⟪ 17769 characters skipped ⟫ker/dist/react-datepicker.css';\nimport '../../styles/CreateMealForm.css';\n\nconst CreateMealForm = ({ onMealCreated }) => {\n  const [formData, setFormData] = useState({\n    title: '',\n    type: 'dinner',\n    date: new Date(new Date().setHours(new Date().getHours() + 2)),\n    maxParticipants: 4,\n    description: '',\n    language: 'Italiano',\n    topics: [],\n    duration: 120, // Durata predefinita di 2 ore\n    settings: {\n      allowLateJoin: true,\n      requireApproval: false,\n      recordingEnabled: false\n    }\n  });\n  \n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [isFormValid, setIsFormValid] = useState(false);\n  \n  // Validazione del form\n  useEffect(() => {\n    const validateForm = () => {\n      const { title, type, date, maxParticipants, description, language, topics } = formData;\n      \n      const isTitleValid = title.trim().length >= 3 && title.trim().length <= 100;\n      const isTypeValid = ['breakfast', 'lunch', 'dinner', 'snack'].includes(type);\n      const isDateValid = date instanceof Date && date > new Date();\n      const isMaxParticipantsValid = maxParticipants >= 2 && maxParticipants <= 10;\n      const isDescriptionValid = description.trim().length >= 10 && description.trim().length <= 1000;\n      const isLanguageValid = language.trim().length >= 2 && language.trim().length <= 50;\n      const isTopicsValid = topics.length >= 1 && topics.length <= 5;\n      \n      setIsFormValid(\n        isTitleValid &&\n        isTypeValid &&\n        isDateValid &&\n        isMaxParticipantsValid &&\n        isDescriptionValid &&\n        isLanguageValid &&\n        isTopicsValid\n      );\n    };\n    \n    validateForm();\n  }, [formData]);\n  \n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n  };\n  \n  const handleDateChange = (date) => {\n    setFormData(prev => ({ ...prev, date: date }));\n  };\n  \n  const handl⟪ 2186 characters skipped ⟫            required\n                >\n                  <option value=\"breakfast\">Colazione</option>\n                  <option value=\"lunch\">Pranzo</option>\n                  <option value=\"dinner\">Cena</option>\n                  <option value=\"snack\">Snack</option>\n                </Form.Select>\n              </Form.Group>\n            </Col>\n            \n            <Col md={6}>\n              <Form.Group>\n                <Form.Label>Lingua principale*</Form.Label>\n                <Form.Select\n                  name=\"language\"\n                  value={formData.language}\n                  onChange={handleChange}\n                  required\n                >\n                  <option value=\"Italiano\">Italiano</option>\n                  <option value=\"English\">Inglese</option>\n                  <option value=\"Español\">Spagnolo</option>\n                  <option value=\"Français\">Francese</option>\n                  <option value=\"Deutsch\">Tedesco</option>\n                  <option value=\"中文\">Cinese</option>\n                  <option value=\"日本語\">Giapponese</option>\n                  <option value=\"العربية\">Arabo</option>\n              

FRONTEND/client/node_modules/.cache/babel-loader/4ba90438145d88d97da6b7217556d09b83c7f1a590b9173d2ba4b67038dec797.json:
  1: ⟪ 553 characters skipped ⟫ent as _Fragment } from \"react/jsx-dev-runtime\";\nconst CreateMealForm = ({\n  onMealCreated,\n  onCancel\n}) => {\n  _s();\n  const [formData, setFormData] = useState({\n    title: '',\n    type: 'dinner',\n    date: new Date(new Date().setHours(new Date().getHours() + 2)),\n    maxParticipants: 4,\n    description: '',\n    language: 'Italiano',\n    topics: [],\n    duration: 120,\n    // Durata predefinita di 2 ore\n    settings: {\n      allowLateJoin: true,\n      requireApproval: false,\n      recordingEnabled: false\n    }\n  });\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [isFormValid, setIsFormValid] = useState(false);\n\n  // Validazione del form\n  useEffect(() => {\n    const validateForm = () => {\n      const {\n        title,\n        type,\n        date,\n        maxParticipants,\n        description,\n        language,\n        topics\n      } = formData;\n      const validations = {\n        title: title.trim().length >= 3,\n        type: ['breakfast', 'lunch', 'dinner', 'snack'].includes(type),\n        date: date instanceof Date && date > new Date(),\n        maxParticipants: maxParticipants >= 2 && maxParticipants <= 10,\n        description: description.trim().length >= 10,\n        language: language.trim().length >= 2,\n        topics: topics.length >= 1\n      };\n\n      // Debug delle validazioni\n      if (process.env.NODE_ENV === 'development') {\n        console.log('🔍 Form validations:', validations);\n      }\n      setIsFormValid(Object.values(validations).every(v => v === true));\n    };\n    validateForm();\n  }, [formData]);\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  const handleDateChange = date => {\n    setFormData(prev => ({\n      ...prev,\n      date: date\n    }));\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!isFormValid) {\n      const errorMessage = 'Per f⟪ 6374 characters skipped ⟫              fileName: _jsxFileName,\n                  lineNumber: 189,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"dinner\",\n                  children: \"\\uD83C\\uDF77 Cena\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 190,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"snack\",\n                  children: \"\\uD83C\\uDF6A Spuntino\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 191,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 182,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: ⟪ 21993 characters skipped ⟫s/CreateMealForm.css';\nimport { toast } from 'react-hot-toast';\n\nconst CreateMealForm = ({ onMealCreated, onCancel }) => {\n  const [formData, setFormData] = useState({\n    title: '',\n    type: 'dinner',\n    date: new Date(new Date().setHours(new Date().getHours() + 2)),\n    maxParticipants: 4,\n    description: '',\n    language: 'Italiano',\n    topics: [],\n    duration: 120, // Durata predefinita di 2 ore\n    settings: {\n      allowLateJoin: true,\n      requireApproval: false,\n      recordingEnabled: false\n    }\n  });\n  \n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [isFormValid, setIsFormValid] = useState(false);\n  \n  // Validazione del form\n  useEffect(() => {\n    const validateForm = () => {\n      const { title, type, date, maxParticipants, description, language, topics } = formData;\n      \n      const validations = {\n        title: title.trim().length >= 3,\n        type: ['breakfast', 'lunch', 'dinner', 'snack'].includes(type),\n        date: date instanceof Date && date > new Date(),\n        maxParticipants: maxParticipants >= 2 && maxParticipants <= 10,\n        description: description.trim().length >= 10,\n        language: language.trim().length >= 2,\n        topics: topics.length >= 1\n      };\n\n      // Debug delle validazioni\n      if (process.env.NODE_ENV === 'development') {\n        console.log('🔍 Form validations:', validations);\n      }\n      \n      setIsFormValid(Object.values(validations).every(v => v === true));\n    };\n    \n    validateForm();\n  }, [formData]);\n  \n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n  };\n  \n  const handleDateChange = (date) => {\n    setFormData(prev => ({ ...prev, date: date }));\n  };\n  \n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!isFormValid) {\n      const errorMessage = 'Per favore, compila correttame⟪ 3820 characters skipped ⟫     required\n                >\n                  <option value=\"breakfast\">🥐 Colazione</option>\n                  <option value=\"lunch\">🍽️ Pranzo</option>\n                  <option value=\"dinner\">🍷 Cena</option>\n                  <option value=\"snack\">🍪 Spuntino</option>\n                </Form.Select>\n              </Form.Group>\n            </Col>\n            \n            <Col md={6}>\n              <Form.Group>\n                <Form.Label>Lingua principale*</Form.Label>\n                <Form.Select\n                  name=\"language\"\n                  value={formData.language}\n                  onChange={handleChange}\n                  required\n                >\n                  <option value=\"Italiano\">🇮🇹 Italiano</option>\n                  <option value=\"English\">🇬🇧 Inglese</option>\n                  <option value=\"Español\">🇪🇸 Spagnolo</option>\n                  <option value=\"Français\">🇫🇷 Francese</option>\n                  <option value=\"Deutsch\">🇩🇪 Tedesco</option>\n                  <option value=\"中文\">🇨🇳 Cinese</option>\n                  <option value=\"日本語\">🇯🇵 Giapponese</option>\n                  <option valu

FRONTEND/client/node_modules/.cache/babel-loader/4e5059ba333904fc4839968f2151d022460268c99614a59848d35e17ce2c8415.json:
  1: ⟪ 457 characters skipped ⟫;\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CreateMealForm = ({\n  onMealCreated\n}) => {\n  _s();\n  const [formData, setFormData] = useState({\n    title: '',\n    type: 'dinner',\n    // Default a cena\n    dateTime: new Date(new Date().setHours(new Date().getHours() + 2)),\n    // Default a 2 ore da ora\n    maxParticipants: 4,\n    description: '',\n    language: 'Italiano' // Default a italiano\n  });\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  const handleDateChange = date => {\n    setFormData(prev => ({\n      ...prev,\n      dateTime: date\n    }));\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setLoading(true);\n    setError('');\n    try {\n      await createMeal(formData);\n      if (onMealCreated) onMealCreated();\n    } catch (err) {\n      var _err$response, _err$response$data;\n      setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _⟪ 3315 characters skipped ⟫               fileName: _jsxFileName,\n                  lineNumber: 86,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"dinner\",\n                  children: \"Cena\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 87,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 79,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            md: 6,\n            children: /*#__PURE__*/_jsxDEV(Form.Group, {\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                children: \"Lingua principale*\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n         ⟪ 10931 characters skipped ⟫ker/dist/react-datepicker.css';\nimport '../../styles/CreateMealForm.css';\n\nconst CreateMealForm = ({ onMealCreated }) => {\n  const [formData, setFormData] = useState({\n    title: '',\n    type: 'dinner', // Default a cena\n    dateTime: new Date(new Date().setHours(new Date().getHours() + 2)), // Default a 2 ore da ora\n    maxParticipants: 4,\n    description: '',\n    language: 'Italiano' // Default a italiano\n  });\n  \n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  \n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n  };\n  \n  const handleDateChange = (date) => {\n    setFormData(prev => ({ ...prev, dateTime: date }));\n  };\n  \n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    setError('');\n    \n    try {\n      await createMeal(formData);\n      if (onMealCreated) onMealCreated();\n    } catch (err) {\n      setError(err.response?.data?.message || 'Errore nella creazione del pasto');\n      console.error('Error creating meal:', err);\n      setLoading(false);\n    }\n  };\n  \n  // Calcola la data mini⟪ 1235 characters skipped ⟫            required\n                >\n                  <option value=\"breakfast\">Colazione</option>\n                  <option value=\"lunch\">Pranzo</option>\n                  <option value=\"dinner\">Cena</option>\n                </Form.Select>\n              </Form.Group>\n            </Col>\n            \n            <Col md={6}>\n              <Form.Group>\n                <Form.Label>Lingua principale*</Form.Label>\n                <Form.Select\n                  name=\"language\"\n                  value={formData.language}\n                  onChange={handleChange}\n                  required\n                >\n                  <option value=\"Italiano\">Italiano</option>\n                  <option value=\"English\">Inglese</option>\n                  <option value=\"Español\">Spagnolo</option>\n                  <option value=\"Français\">Francese</option>\n                  <option value=\"Deutsch\">Tedesco</option>\n                  <option value=\"中文\">Cinese</option>\n                  <option value=\"日本語\">Giapponese</option>\n                  <option value=\"العربية\">Arabo</option>\n                  <option value=\"Русский\">Russo</option>\n            

FRONTEND/client/node_modules/.cache/babel-loader/05af79bb4ea95ce3028b3091987231e2bd9fbf5262beb1db541a3a5ab17d79ba.json:
  1: {"ast":null,"code":"import axiosInstance from '../config/axiosConfig';\n\n// Mappatura dei valori in italiano\nconst MEAL_TYPES = {\n  breakfast: 'colazione',\n  lunch: 'pranzo',\n  dinner: 'cena',\n  aperitif: 'aperitivo'\n};\nconst MEAL_STATUS = {\n  upcoming: 'in arrivo',\n  ongoing: 'in corso',\n  completed: 'completato',\n  cancelled: 'cancellato'\n};\nconst LANGUAGES = {\n  it: 'italiano',\n  en: 'inglese',\n  es: 'spagnolo',\n  fr: 'francese',\n  de: 'tedesco'\n};\n\n// Funzione per convertire i valori in italiano\nconst translateToItalian = data => {\n  if (!data) return data;\n  const translated = {\n    ...data\n  };\n  if (translated.type) {\n    translated.type = MEAL_TYPES[translated.type] || translated.type;\n  }\n  if (translated.status) {\n    translated.status = MEAL_STATUS[translated.status] || translated.status;\n  }\n  if (translated.language) {\n    translated.language = LANGUAGES[translated.language] || translated.language;\n  }\n  return translated;\n};\n\n// Funzione per convertire i valori in inglese\nconst translateToEnglish = data => {\n  if (!data) return data;\n  const translated = {\n    ...data\n  };\n  if (translated.type) {\n    va⟪ 16206 characters skipped ⟫/ Esporta sia come default che come named export\nexport { mealService, MealServiceError };\nexport default mealService;","map":{"version":3,"names":["axiosInstance","MEAL_TYPES","breakfast","lunch","dinner","aperitif","MEAL_STATUS","upcoming","ongoing","completed","cancelled","LANGUAGES","it","en","es","fr","de","translateToItalian","data","translated","type","status","language","translateToEnglish","_Object$entries$find","englishType","Object","entries","find","_","value","_Object$entries$find2","englishStatus","_Object$entries$find3","englishLang","MealServiceError","Error","constructor","message","code","name","handleError","error","console","response","_error$response$data","_error$response$data2","headers","request","createMeal","mealData","_mealData$settings$al","_mealData$settings","_mealData$settings$re","_mealData$settings2","_mealData$settings$vi","_mealData$settings3","_mealData$settings$ba","_mealData$settings4","_axiosInstance$defaul","_axiosInstance$defaul2","_axiosInstance$defaul3","log","title","date","maxParticipants","description","topics","settings","token","localStorage","getItem","requiredFields","missingFields","filter","field","Array","isArray","length","tri⟪ 686 characters skipped ⟫s/mealService.js"],"sourcesContent":["import axiosInstance from '../config/axiosConfig';\n\n// Mappatura dei valori in italiano\nconst MEAL_TYPES = {\n  breakfast: 'colazione',\n  lunch: 'pranzo',\n  dinner: 'cena',\n  aperitif: 'aperitivo'\n};\n\nconst MEAL_STATUS = {\n  upcoming: 'in arrivo',\n  ongoing: 'in corso',\n  completed: 'completato',\n  cancelled: 'cancellato'\n};\n\nconst LANGUAGES = {\n  it: 'italiano',\n  en: 'inglese',\n  es: 'spagnolo',\n  fr: 'francese',\n  de: 'tedesco'\n};\n\n// Funzione per convertire i valori in italiano\nconst translateToItalian = (data) => {\n  if (!data) return data;\n  \n  const translated = { ...data };\n  \n  if (translated.type) {\n    translated.type = MEAL_TYPES[translated.type] || translated.type;\n  }\n  \n  if (translated.status) {\n    translated.status = MEAL_STATUS[translated.status] || translated.status;\n  }\n  \n  if (translated.language) {\n    translated.language = LANGUAGES[translated.language] || translated.language;\n  }\n  \n  return translated;\n};\n\n// Funzione per convertire i valori in inglese\nconst translateToEnglish = (data) => {\n  if (!data) return data;\n  \n  const translated = { ...data };\n  \n  if (transl

FRONTEND/client/node_modules/.cache/babel-loader/5f2c93f5ed1d1b78e140a9d3ae4a25f02a0a3c1eb62d102c5b9f173771a061ec.json:
  1: ⟪ 7637 characters skipped ⟫id 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"dinner\",\n              children: \"Cena\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"snack\",\n              children: \"Spuntino\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Lingua\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNum⟪ 12792 characters skipped ⟫     <option value=\"\">Tutti i tipi</option>\n                <option value=\"breakfast\">Colazione</option>\n                <option value=\"lunch\">Pranzo</option>\n                <option value=\"dinner\">Cena</option>\n                <option value=\"snack\">Spuntino</option>\n              </Form.Select>\n            </Form.Group>\n\n            {/* Lingua */}\n            <Form.Group className=\"mb-3\">\n              <Form.Label>Lingua</Form.Label>\n              <Form.Select\n                value={tempFilters.language}\n                onChange={handleLanguageChange}\n              >\n                <option value=\"\">Tutte le lingue</option>\n                <option value=\"it\">Italiano</option>\n                <option value=\"en\">Inglese</option>\n                <option value=\"es\">Spagnolo</option>\n                <option value=\"fr\">Francese</option>\n                <option value=\"de\">Tedesco</option>\n              </Form.Select>\n            </Form.Group>\n\n            {/* Stato */}\n            <Form.Group className=\"mb-3\">\n              <Form.Label>Stato</Form.Label>\n              <Form.Select\n                value={tempFilters.status}\n          

FRONTEND/client/node_modules/.cache/babel-loader/6e96e4cdf86f589505475c344b6ecd3a8e01d42044ab2f33a3b4140b8cde5eb7.json:
  1: ⟪ 2102 characters skipped ⟫type => {\n    const types = {\n      breakfast: {\n        text: 'Colazione',\n        variant: 'info'\n      },\n      lunch: {\n        text: 'Pranzo',\n        variant: 'success'\n      },\n      dinner: {\n        text: 'Cena',\n        variant: 'primary'\n      },\n      snack: {\n        text: 'Spuntino',\n        variant: 'warning'\n      }\n    };\n    const {\n      text,\n      variant\n    } = types[type] || {\n      text: type,\n      variant: 'secondary'\n    };\n    return /*#__PURE__*/_jsxDEV(Badge, {\n      bg: variant,\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 12\n    }, this);\n  };\n  const getLanguageBadge = language => {\n    const languages = {\n      it: 'Italiano',\n      en: 'Inglese',\n      es: 'Spagnolo',\n      fr: 'Francese',\n      de: 'Tedesco'\n    };\n    return /*#__PURE__*/_jsxDEV(Badge, {\n      bg: \"light\",\n      text: \"dark\",\n      children: languages[language] || language\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 12\n    }, this);\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n ⟪ 8055 characters skipped ⟫hour","minute","toLocaleString","day","month","year","getMealStatus","meal","mealDate","endDate","setHours","getHours","status","text","variant","getMealTypeBadge","type","types","breakfast","lunch","dinner","snack","bg","children","fileName","_jsxFileName","lineNumber","columnNumber","getLanguageBadge","language","languages","it","en","es","fr","de","className","animation","role","length","map","_meal$participants","_userMeals$hosted","_userMeals$joined","to","_id","style","textDecoration","color","Body","Title","title","Text","participants","maxParticipants","hosted","includes","joined","_c","$RefreshReg$"],"sources":["/Users/ele/TableTalk Claude/FRONTEND/client/src/pages/Meals/MealsList.js"],"sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Card, Badge, Spinner } from 'react-bootstrap';\nimport './MealsList.css';\n\nconst MealsList = ({ meals, userMeals, onMealSelect, selectedMealId, loading, error }) => {\n  // Funzione per formattare la data\n  const formatDate = (dateString) => {\n    const date = new Date(dateString);\n    const now = new Date();\n    const tomorrow = new Date(now);\n    tomorrow.setDate(tomorrow.getDate() + 1)⟪ 1254 characters skipped ⟫success' };\n  };\n\n  const getMealTypeBadge = (type) => {\n    const types = {\n      breakfast: { text: 'Colazione', variant: 'info' },\n      lunch: { text: 'Pranzo', variant: 'success' },\n      dinner: { text: 'Cena', variant: 'primary' },\n      snack: { text: 'Spuntino', variant: 'warning' }\n    };\n    const { text, variant } = types[type] || { text: type, variant: 'secondary' };\n    return <Badge bg={variant}>{text}</Badge>;\n  };\n\n  const getLanguageBadge = (language) => {\n    const languages = {\n      it: 'Italiano',\n      en: 'Inglese',\n      es: 'Spagnolo',\n      fr: 'Francese',\n      de: 'Tedesco'\n    };\n    return <Badge bg=\"light\" text=\"dark\">{languages[language] || language}</Badge>;\n  };\n\n  if (loading) {\n    return (\n      <div className=\"text-center p-4\">\n        <Spinner animation=\"border\" role=\"status\">\n          <span className=\"visually-hidden\">Caricamento...</span>\n        </Spinner>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"text-center p-4\">\n        <p className=\"text-danger\">{error}</p>\n      </div>\n    );\n  }\n\n  if (!meals || meals.length === 0) {\n    return (\n      <div

FRONTEND/client/node_modules/.cache/babel-loader/7c00887f589c4810010c4bfcac747eb3a8805baa7c624c18968ab4e97bc33112.json:
  1: ⟪ 458 characters skipped ⟫../styles/CreateMealPage.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MEAL_TYPE_TRANSLATIONS = {\n  breakfast: 'Colazione',\n  lunch: 'Pranzo',\n  dinner: 'Cena',\n  aperitif: 'Aperitivo'\n};\nconst CreateMealPage = () => {\n  _s();\n  const navigate = useNavigate();\n  const VALID_MEAL_TYPES = ['breakfast', 'lunch', 'dinner', 'aperitif'];\n  const VALID_LANGUAGES = ['Italiano', 'English', 'Español', 'Français', 'Deutsch', '中文', 'العربية'];\n  const [formData, setFormData] = useState({\n    title: '',\n    type: 'dinner',\n    date: new Date(new Date().setHours(new Date().getHours() + 2)),\n    maxParticipants: 4,\n    description: '',\n    language: 'Italiano',\n    topics: [],\n    duration: 120,\n    settings: {\n      allowLateJoin: true,\n      requireApproval: false,\n      videoQuality: 'HD',\n      backgroundBlur: true\n    }\n  });\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [isFormValid, setIsFormValid] = useState(false);\n\n  // Validazione del form\n  useEffect(() => {\n    const validateForm = () => {\n      const {\n        title,\n        type,\n        date,\n        maxParticipants,\n        description,\n        language,\n        topics,\n        duration\n      } = formData;\n      const minDate = new Date();\n      const maxDate = new Date();\n      maxDate.setDate(maxDate.getDate() + 14);\n      const validations = {\n        title: title.trim().length >= 10,\n        type: VALID_MEAL_TYPES.includes(type),\n        ⟪ 12213 characters skipped ⟫on\", {\n                  value: type,\n                  children: type === 'breakfast' ? '🥐 ' + MEAL_TYPE_TRANSLATIONS[type] : type === 'lunch' ? '🍽️ ' + MEAL_TYPE_TRANSLATIONS[type] : type === 'dinner' ? '🍷 ' + MEAL_TYPE_TRANSLATIONS[type] : '🍹 ' + MEAL_TYPE_TRANSLATIONS[type]\n                }, type, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 319,\n                  columnNumber: 21\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 311,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 309,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"language\",\n                children: \"Lingua Principale*\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 330,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsx⟪ 18572 characters skipped ⟫");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","DatePicker","toast","createMeal","jsxDEV","_jsxDEV","Fragment","_Fragment","MEAL_TYPE_TRANSLATIONS","breakfast","lunch","dinner","aperitif","CreateMealPage","_s","navigate","VALID_MEAL_TYPES","VALID_LANGUAGES","formData","setFormData","title","type","date","Date","setHours","getHours","maxParticipants","description","language","topics","duration","settings","allowLateJoin","requireApproval","videoQuality","backgroundBlur","error","setError","loading","setLoading","isFormValid","setIsFormValid","validateForm","minDate","maxDate","setDate","getDate","validations","trim","length","includes","isNaN","getTime","Number","isInteger","every","topic","console","log","isValid","Object","values","v","handleChange","e","name","value","checked","target","prev","processedValue","startsWith","settingName","split","handleDateChange","handleTopicAdd","key","preventDefault","handleTopicRemove","indexToRemove","filter","_","index","handleSettingChange","setting","handleSubmit","errorMessage","mealData","toISOString","parseInt","status","Boolean","response","_id","Error","success","err","_err$response","_err$response$data",⟪ 682 characters skipped ⟫-hot-toast';\nimport { createMeal } from '../../services/mealService';\nimport '../../styles/CreateMealPage.css';\n\nconst MEAL_TYPE_TRANSLATIONS = {\n  breakfast: 'Colazione',\n  lunch: 'Pranzo',\n  dinner: 'Cena',\n  aperitif: 'Aperitivo'\n};\n\nconst CreateMealPage = () => {\n  const navigate = useNavigate();\n  const VALID_MEAL_TYPES = ['breakfast', 'lunch', 'dinner', 'aperitif'];\n  const VALID_LANGUAGES = ['Italiano', 'English', 'Español', 'Français', 'Deutsch', '中文', 'العربية'];\n  \n  const [formData, setFormData] = useState({\n    title: '',\n    type: 'dinner',\n    date: new Date(new Date().setHours(new Date().getHours() + 2)),\n    maxParticipants: 4,\n    description: '',\n    language: 'Italiano',\n    topics: [],\n    duration: 120,\n    settings: {\n      allowLateJoin: true,\n      requireApproval: false,\n      videoQuality: 'HD',\n      backgroundBlur: true\n    }\n  });\n\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [isFormValid, setIsFormValid] = useState(false);\n\n  // Validazione del form\n  useEffect(() => {\n    const validateForm = () => {\n      const { title, type, date, maxParticipants, description, language, topics, duration } = formData;\n      \n      const minDate = new Date();\n      const maxDate = new Date();\n      maxDate.setDate(maxDate.getDate() + 14);\n\n      const validations = {\n        title: title.trim().length >= 10,\n        type: VALID_MEAL_TYPES.includes(type),\n        date: date instanceof Date && !isNaN(date.getTime()) && date > minD⟪ 8861 characters skipped ⟫                    {type === 'breakfast' ? '🥐 ' + MEAL_TYPE_TRANSLATIONS[type] :\n                       type === 'lunch' ? '🍽️ ' + MEAL_TYPE_TRANSLATIONS[type] :\n                       type === 'dinner' ? '🍷 ' + MEAL_TYPE_TRANSLATIONS[type] :\n                       '🍹 ' + MEAL_TYPE_TRANSLATIONS[type]}\n                    </option>\n                  ))}\n                </select>\n              </div>\n\n              <div className=\"form-group\">\n                <label htmlFor=\"language\">Lingua Principale*</label>\n                <select\n                  id=\"language\"\n                  name=\"language\"\n                  value={formData.language}\n                  onChange={handleChange}\n                  required\n                >\n                  {VALID_LANGUAGES.map(lang => (\n                    <option key={lang} value={lang}>\n                      {lang === 'Italiano' ? '🇮🇹 Italiano' :\n                       lang === 'English' ? '🇬🇧 English' :\n                       lang === 'Español' ? '🇪🇸 Español' :\n                       lang === 'Français' ? '🇫🇷 Français' :\n                       lang === 'Deutsch' ? '🇩🇪 Deutsch' :\n               

FRONTEND/client/node_modules/.cache/babel-loader/7d36642c0eb326381fbc80f4c3d5251b36ccf82195c7c799c81a562031219f02.json:
  1: ⟪ 1189 characters skipped ⟫    host,\n    participants,\n    language,\n    meetingLink,\n    status\n  } = meal;\n\n  // Traduzioni\n  const mealTypeTranslation = {\n    'breakfast': 'Colazione',\n    'lunch': 'Pranzo',\n    'dinner': 'Cena',\n    'snack': 'Spuntino'\n  };\n  const languageTranslation = {\n    'Italiano': 'Italiano',\n    'English': 'Inglese',\n    'Español': 'Spagnolo',\n    'Français': 'Francese',\n    'Deutsch': 'Tedesco',\n    '中文': 'Cinese',\n    '日本語': 'Giapponese',\n    'العربية': 'Arabo',\n    'Русский': 'Russo',\n    'Português': 'Portoghese'\n  };\n  const statusTranslation = {\n    'scheduled': 'In arrivo',\n    'ongoing': 'In corso',\n    'completed': 'Completato',\n    'cancelled': 'Cancellato'\n  };\n  const statusVariant = {\n    'scheduled': 'success',\n    'ongoing': 'warning',\n    'completed': 'secondary',\n    'cancelled': 'danger'\n  };\n\n  // Verifica se l'utente corrente è l'host\n  const isHost = (host === null || host === void 0 ? void 0 : host._id) === (currentUser === null || currentUser === void 0 ? void 0 : currentUser.id);\n\n  // Verifica se l'utente corrente è un partecipante\n  const isParticipant = participants === null || participants === void 0 ? void 0 ⟪ 12502 characters skipped ⟫ants, description,\n    host, participants, language, meetingLink, status\n  } = meal;\n\n  // Traduzioni\n  const mealTypeTranslation = {\n    'breakfast': 'Colazione',\n    'lunch': 'Pranzo',\n    'dinner': 'Cena',\n    'snack': 'Spuntino'\n  };\n\n  const languageTranslation = {\n    'Italiano': 'Italiano',\n    'English': 'Inglese',\n    'Español': 'Spagnolo',\n    'Français': 'Francese',\n    'Deutsch': 'Tedesco',\n    '中文': 'Cinese',\n    '日本語': 'Giapponese',\n    'العربية': 'Arabo',\n    'Русский': 'Russo',\n    'Português': 'Portoghese'\n  };\n\n  const statusTranslation = {\n    'scheduled': 'In arrivo',\n    'ongoing': 'In corso',\n    'completed': 'Completato',\n    'cancelled': 'Cancellato'\n  };\n\n  const statusVariant = {\n    'scheduled': 'success',\n    'ongoing': 'warning',\n    'completed': 'secondary',\n    'cancelled': 'danger'\n  };\n\n  // Verifica se l'utente corrente è l'host\n  const isHost = host?._id === currentUser?.id;\n  \n  // Verifica se l'utente corrente è un partecipante\n  const isParticipant = participants?.some(p => p._id === currentUser?.id);\n  \n  // Verifica se il pasto è pieno\n  const isFull = participants?.length >= maxParticipants;\n\n 

FRONTEND/client/node_modules/.cache/babel-loader/8eaf20cbd388e731cc48cd66e64ec2f6ba81ba4aa4238f9ba2181d748ca933b7.json:
  1: ⟪ 564 characters skipped ⟫ent as _Fragment } from \"react/jsx-dev-runtime\";\nconst CreateMealForm = ({\n  onMealCreated,\n  onCancel\n}) => {\n  _s();\n  const [formData, setFormData] = useState({\n    title: '',\n    type: 'dinner',\n    date: new Date(new Date().setHours(new Date().getHours() + 2)),\n    maxParticipants: 4,\n    description: '',\n    language: 'Italiano',\n    topics: [],\n    duration: 120,\n    // Durata predefinita di 2 ore\n    settings: {\n      allowLateJoin: true,\n      requireApproval: false,\n      recordingEnabled: false,\n      videoQuality: 'HD',\n      // Nuovo campo per la qualità video\n      backgroundBlur: true // Nuovo campo per sfocare lo sfondo\n    }\n  });\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [isFormValid, setIsFormValid] = useState(false);\n\n  // Validazione del form\n  useEffect(() => {\n    const validateForm = () => {\n      const {\n        title,\n        type,\n        date,\n        maxParticipants,\n        description,\n        language,\n        topics\n      } = formData;\n      const validations = {\n        title: title.trim().length >= 3,\n        type: ['breakfast', 'lunch', 'dinner', 'snack'].includes(type),\n        date: date instanceof Date && date > new Date(),\n        maxParticipants: maxParticipants >= 2 && maxParticipants <= 10,\n        description: description.trim().length >= 10,\n        language: language.trim().length >= 2,\n        topics: topics.length >= 1\n      };\n\n      // Debug delle validazioni\n      if (process.env.NODE_ENV === 'development') {\n        console.log('🔍 Form validations:', validations);\n      }\n      setIsFormValid(Object.values(validations).every(v => v === true));\n    };\n    validateForm();\n  }, [formData]);\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  const handleDateChange = date => {\n    setFormData(prev => ({\n      ...prev,\n      date: date\n    }));\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!isFormValid) {\n      const errorMessage = 'Per f⟪ 8454 characters skipped ⟫_jsxFileName,\n                        lineNumber: 206,\n                        columnNumber: 25\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"dinner\",\n                        children: \"\\uD83C\\uDF77 Cena\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 207,\n                        columnNumber: 25\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"snack\",\n                        children: \"\\uD83C\\uDF6A Spuntino\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 208,\n                        columnNumber: 25\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 199,\n                      columnNumber: 23\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 197,\n                    columnNumber: 21\n              ⟪ 26515 characters skipped ⟫s/CreateMealForm.css';\nimport { toast } from 'react-hot-toast';\n\nconst CreateMealForm = ({ onMealCreated, onCancel }) => {\n  const [formData, setFormData] = useState({\n    title: '',\n    type: 'dinner',\n    date: new Date(new Date().setHours(new Date().getHours() + 2)),\n    maxParticipants: 4,\n    description: '',\n    language: 'Italiano',\n    topics: [],\n    duration: 120, // Durata predefinita di 2 ore\n    settings: {\n      allowLateJoin: true,\n      requireApproval: false,\n      recordingEnabled: false,\n      videoQuality: 'HD', // Nuovo campo per la qualità video\n      backgroundBlur: true // Nuovo campo per sfocare lo sfondo\n    }\n  });\n  \n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [isFormValid, setIsFormValid] = useState(false);\n  \n  // Validazione del form\n  useEffect(() => {\n    const validateForm = () => {\n      const { title, type, date, maxParticipants, description, language, topics } = formData;\n      \n      const validations = {\n        title: title.trim().length >= 3,\n        type: ['breakfast', 'lunch', 'dinner', 'snack'].includes(type),\n        date: date instanceof Date && date > new Date(),\n        maxParticipants: maxParticipants >= 2 && maxParticipants <= 10,\n        description: description.trim().length >= 10,\n        language: language.trim().length >= 2,\n        topics: topics.length >= 1\n      };\n\n      // Debug delle validazioni\n      if (process.env.NODE_ENV === 'development') {\n        console.log('🔍 Form validations:', validations);\n      }\n      \n      setIsFormValid(Object.values(validations).every(v => v === true));\n    };\n    \n    validateForm();\n  }, [formData]);\n  \n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n  };\n  \n  const handleDateChange = (date) => {\n    setFormData(prev => ({ ...prev, date: date }));\n  };\n  \n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!isFormValid) {\n      const errorMessage = 'Per favore, compila correttame⟪ 4912 characters skipped ⟫             >\n                        <option value=\"breakfast\">🥐 Colazione</option>\n                        <option value=\"lunch\">🍽️ Pranzo</option>\n                        <option value=\"dinner\">🍷 Cena</option>\n                        <option value=\"snack\">🍪 Spuntino</option>\n                      </Form.Select>\n                    </Form.Group>\n                  </Col>\n                  \n                  <Col md={6}>\n                    <Form.Group>\n                      <Form.Label>Lingua principale*</Form.Label>\n                      <Form.Select\n                        name=\"language\"\n                        value={formData.language}\n                        onChange={handleChange}\n                        required\n                      >\n                        <option value=\"Italiano\">🇮🇹 Italiano</option>\n                        <option value=\"English\">🇬🇧 Inglese</option>\n                        <option value=\"Español\">🇪🇸 Spagnolo</option>\n                        <option value=\"Français\">🇫🇷 Francese</option>\n                        <option value=\"Deutsch\">🇩🇪 Tedesco</option>\n                      </Form.Select>\n     

FRONTEND/client/node_modules/.cache/babel-loader/9c0117ee621e8ec76f46737e9a15b8b7dd07aca429df194bacb8bbb2371a7270.json:
  1: ⟪ 458 characters skipped ⟫../styles/CreateMealPage.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MEAL_TYPE_TRANSLATIONS = {\n  breakfast: 'Colazione',\n  lunch: 'Pranzo',\n  dinner: 'Cena',\n  aperitif: 'Aperitivo'\n};\nconst CreateMealPage = () => {\n  _s();\n  const navigate = useNavigate();\n  const VALID_MEAL_TYPES = ['breakfast', 'lunch', 'dinner', 'aperitif'];\n  const VALID_LANGUAGES = ['Italiano', 'English', 'Español', 'Français', 'Deutsch', '中文', 'العربية'];\n  const [formData, setFormData] = useState({\n    title: '',\n    type: 'cena',\n    date: new Date(new Date().setHours(new Date().getHours() + 2)),\n    maxParticipants: 4,\n    description: '',\n    language: 'Italiano',\n    topics: [],\n    duration: 120,\n    settings: {\n      allowLateJoin: true,\n      requireApproval: false,\n      videoQuality: 'HD',\n      backgroundBlur: true\n    }\n  });\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [isFormValid, setIsFormValid] = useState(false);\n\n  // Validazione del form\n  useEffect(() => {\n    const validateForm = () => {\n      const {\n        title,\n        type,\n        date,\n        maxParticipants,\n        description,\n        language,\n        topics,\n        duration\n      } = formData;\n      const minDate = new Date();\n      const ma⟪ 12410 characters skipped ⟫on\", {\n                  value: type,\n                  children: type === 'breakfast' ? '🥐 ' + MEAL_TYPE_TRANSLATIONS[type] : type === 'lunch' ? '🍽️ ' + MEAL_TYPE_TRANSLATIONS[type] : type === 'dinner' ? '🍷 ' + MEAL_TYPE_TRANSLATIONS[type] : '🍹 ' + MEAL_TYPE_TRANSLATIONS[type]\n                }, type, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 319,\n                  columnNumber: 21\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 311,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 309,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"language\",\n                children: \"Lingua Principale*\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 330,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsx⟪ 18572 characters skipped ⟫");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","DatePicker","toast","createMeal","jsxDEV","_jsxDEV","Fragment","_Fragment","MEAL_TYPE_TRANSLATIONS","breakfast","lunch","dinner","aperitif","CreateMealPage","_s","navigate","VALID_MEAL_TYPES","VALID_LANGUAGES","formData","setFormData","title","type","date","Date","setHours","getHours","maxParticipants","description","language","topics","duration","settings","allowLateJoin","requireApproval","videoQuality","backgroundBlur","error","setError","loading","setLoading","isFormValid","setIsFormValid","validateForm","minDate","maxDate","setDate","getDate","validations","trim","length","includes","isNaN","getTime","Number","isInteger","every","topic","console","log","isValid","Object","values","v","handleChange","e","name","value","checked","target","prev","processedValue","startsWith","settingName","split","handleDateChange","handleTopicAdd","key","preventDefault","handleTopicRemove","indexToRemove","filter","_","index","handleSettingChange","setting","handleSubmit","errorMessage","mealData","toISOString","parseInt","status","Boolean","response","_id","Error","success","err","_err$response","_err$response$data",⟪ 682 characters skipped ⟫-hot-toast';\nimport { createMeal } from '../../services/mealService';\nimport '../../styles/CreateMealPage.css';\n\nconst MEAL_TYPE_TRANSLATIONS = {\n  breakfast: 'Colazione',\n  lunch: 'Pranzo',\n  dinner: 'Cena',\n  aperitif: 'Aperitivo'\n};\n\nconst CreateMealPage = () => {\n  const navigate = useNavigate();\n  const VALID_MEAL_TYPES = ['breakfast', 'lunch', 'dinner', 'aperitif'];\n  const VALID_LANGUAGES = ['Italiano', 'English', 'Español', 'Français', 'Deutsch', '中文', 'العربية'];\n  \n  const [formData, setFormData] = useState({\n    title: '',\n    type: 'cena',\n    date: new Date(new Date().setHours(new Date().getHours() + 2)),\n    maxParticipants: 4,\n    description: '',\n    language: 'Italiano',\n    topics: [],\n    duration: 120,\n    settings: {\n      allowLateJoin: true,\n      requireApproval: false,\n      videoQuality: 'HD',\n      backgroundBlur: true\n    }\n  });\n\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [isFormValid, setIsFormValid] = useState(false);\n\n  // Validazione del form\n  useEffect(() => {\n    const validateForm = () => {\n      const { title, type, date, maxParticipants, description, language, topics, duration } = formData;\n      \n      const minDate = new Date();\n      const maxDate = new Date();\n      maxDate.setDate(maxDate.getDate() + 14⟪ 9062 characters skipped ⟫                    {type === 'breakfast' ? '🥐 ' + MEAL_TYPE_TRANSLATIONS[type] :\n                       type === 'lunch' ? '🍽️ ' + MEAL_TYPE_TRANSLATIONS[type] :\n                       type === 'dinner' ? '🍷 ' + MEAL_TYPE_TRANSLATIONS[type] :\n                       '🍹 ' + MEAL_TYPE_TRANSLATIONS[type]}\n                    </option>\n                  ))}\n                </select>\n              </div>\n\n              <div className=\"form-group\">\n                <label htmlFor=\"language\">Lingua Principale*</label>\n                <select\n                  id=\"language\"\n                  name=\"language\"\n                  value={formData.language}\n                  onChange={handleChange}\n                  required\n                >\n                  {VALID_LANGUAGES.map(lang => (\n                    <option key={lang} value={lang}>\n                      {lang === 'Italiano' ? '🇮🇹 Italiano' :\n                       lang === 'English' ? '🇬🇧 English' :\n                       lang === 'Español' ? '🇪🇸 Español' :\n                       lang === 'Français' ? '🇫🇷 Français' :\n                       lang === 'Deutsch' ? '🇩🇪 Deutsch' :\n               

FRONTEND/client/node_modules/.cache/babel-loader/22a55e43d2fc65f81daca162fd48bd5be5b9173b5e4876abf41736cd2a12b187.json:
  1: ⟪ 524 characters skipped ⟫nt as _Fragment } from \"react/jsx-dev-runtime\";\nconst CreateMealPage = () => {\n  _s();\n  const navigate = useNavigate();\n  const [formData, setFormData] = useState({\n    title: '',\n    type: 'dinner',\n    date: new Date(new Date().setHours(new Date().getHours() + 2)),\n    maxParticipants: 4,\n    description: '',\n    language: 'Italiano',\n    topics: [],\n    duration: 120,\n    settings: {\n      allowLateJoin: true,\n      requireApproval: false,\n      videoQuality: 'HD',\n      backgroundBlur: true\n    }\n  });\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [isFormValid, setIsFormValid] = useState(false);\n\n  // Validazione del form\n  useEffect(() => {\n    const validateForm = () => {\n      const {\n        title,\n        type,\n        date,\n        maxParticipants,\n        description,\n        language,\n        topics\n      } = formData;\n      const validations = {\n        title: title.trim().length >= 3,\n        type: ['breakfast', 'lunch', 'dinner', 'snack'].includes(type),\n        date: date instanceof Date && date > new Date(),\n        maxParticipants: maxParticipants >= 2 && maxParticipants <= 10,\n        description: description.trim().length >= 10,\n        language: language.trim().length >= 2,\n        topics: topics.length >= 1\n      };\n      setIsFormValid(Object.values(validations).every(v => v === true));\n    };\n    validateForm();\n  }, [formData]);\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  const handleDateChange = date => {\n    setFormData(prev => ({\n      ...prev,\n      date: date\n    }));\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!isFormValid) {\n      const errorMessage = 'Per favore, compila correttamente tutti i campi obbligatori';\n      setError(errorMessage);\n      toast.error(errorMessage);\n      return;\n    }\n    setLoadi⟪ 8118 characters skipped ⟫              fileName: _jsxFileName,\n                  lineNumber: 188,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"dinner\",\n                  children: \"\\uD83C\\uDF77 Cena\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 189,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"snack\",\n                  children: \"\\uD83C\\uDF6A Spuntino\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 190,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 180,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"l⟪ 20573 characters skipped ⟫mealService';\nimport '../../styles/CreateMealPage.css';\n\nconst CreateMealPage = () => {\n  const navigate = useNavigate();\n  const [formData, setFormData] = useState({\n    title: '',\n    type: 'dinner',\n    date: new Date(new Date().setHours(new Date().getHours() + 2)),\n    maxParticipants: 4,\n    description: '',\n    language: 'Italiano',\n    topics: [],\n    duration: 120,\n    settings: {\n      allowLateJoin: true,\n      requireApproval: false,\n      videoQuality: 'HD',\n      backgroundBlur: true\n    }\n  });\n\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [isFormValid, setIsFormValid] = useState(false);\n\n  // Validazione del form\n  useEffect(() => {\n    const validateForm = () => {\n      const { title, type, date, maxParticipants, description, language, topics } = formData;\n      \n      const validations = {\n        title: title.trim().length >= 3,\n        type: ['breakfast', 'lunch', 'dinner', 'snack'].includes(type),\n        date: date instanceof Date && date > new Date(),\n        maxParticipants: maxParticipants >= 2 && maxParticipants <= 10,\n        description: description.trim().length >= 10,\n        language: language.trim().length >= 2,\n        topics: topics.length >= 1\n      };\n      \n      setIsFormValid(Object.values(validations).every(v => v === true));\n    };\n    \n    validateForm();\n  }, [formData]);\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n  };\n\n  const handleDateChange = (date) => {\n    setFormData(prev => ({ ...prev, date: date }));\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!isFormValid) {\n      const errorMessage = 'Per favore, compila correttamente tutti i campi obbligatori';\n      setError(errorMessage);\n      toast.error(errorMessage);\n      return;\n    }\n    setLoading(true);\n    setError('');\n\⟪ 4313 characters skipped ⟫     required\n                >\n                  <option value=\"breakfast\">🥐 Colazione</option>\n                  <option value=\"lunch\">🍽️ Pranzo</option>\n                  <option value=\"dinner\">🍷 Cena</option>\n                  <option value=\"snack\">🍪 Spuntino</option>\n                </select>\n              </div>\n\n              <div className=\"form-group\">\n                <label htmlFor=\"language\">Lingua Principale*</label>\n                <select\n                  id=\"language\"\n                  name=\"language\"\n                  value={formData.language}\n                  onChange={handleChange}\n                  required\n                >\n                  <option value=\"Italiano\">🇮🇹 Italiano</option>\n                  <option value=\"English\">🇬🇧 Inglese</option>\n                  <option value=\"Español\">🇪🇸 Spagnolo</option>\n                  <option value=\"Français\">🇫🇷 Francese</option>\n                  <option value=\"Deutsch\">🇩🇪 Tedesco</option>\n                </select>\n              </div>\n            </div>\n\n            <div className=\"form-row\">\n              <div className=\"form-group\">\n         

FRONTEND/client/node_modules/.cache/babel-loader/30c1dbb14a32ebf75752594ff4ce9e5811f8f1bb460abd11a884b9d29fcc3a38.json:
  1: ⟪ 8163 characters skipped ⟫     }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"dinner\",\n            children: \"Cena\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"aperitif\",\n            children: \"Aperitivo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        className: \"mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Lingua\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this)⟪ 11886 characters skipped ⟫>\n            <option value=\"\">Seleziona tipo</option>\n            <option value=\"breakfast\">Colazione</option>\n            <option value=\"lunch\">Pranzo</option>\n            <option value=\"dinner\">Cena</option>\n            <option value=\"aperitif\">Aperitivo</option>\n          </Form.Select>\n        </Form.Group>\n\n        {/* Lingua */}\n        <Form.Group className=\"mb-3\">\n          <Form.Label>Lingua</Form.Label>\n          <Form.Select\n            name=\"language\"\n            value={formData.language}\n            onChange={handleChange}\n            required\n          >\n            <option value=\"\">Seleziona lingua</option>\n            <option value=\"Italiano\">Italiano</option>\n            <option value=\"English\">Inglese</option>\n            <option value=\"Español\">Spagnolo</option>\n            <option value=\"Français\">Francese</option>\n            <option value=\"Deutsch\">Tedesco</option>\n          </Form.Select>\n        </Form.Group>\n\n        {/* Argomenti */}\n        <Form.Group className=\"mb-3\">\n          <Form.Label>Argomenti (max 5)</Form.Label>\n          <Form.Control\n            type=\"text\"\n            name=\"topic

FRONTEND/client/node_modules/.cache/babel-loader/54ca7746d43dca771a854c2c428e4c9c1e9b2b42964647719871542c8bce540a.json:
  1: ⟪ 553 characters skipped ⟫ent as _Fragment } from \"react/jsx-dev-runtime\";\nconst CreateMealForm = ({\n  onMealCreated,\n  onCancel\n}) => {\n  _s();\n  const [formData, setFormData] = useState({\n    title: '',\n    type: 'dinner',\n    date: new Date(new Date().setHours(new Date().getHours() + 2)),\n    maxParticipants: 4,\n    description: '',\n    language: 'Italiano',\n    topics: [],\n    duration: 120,\n    // Durata predefinita di 2 ore\n    settings: {\n      allowLateJoin: true,\n      requireApproval: false,\n      recordingEnabled: false\n    }\n  });\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [isFormValid, setIsFormValid] = useState(false);\n\n  // Validazione del form\n  useEffect(() => {\n    const validateForm = () => {\n      const {\n        title,\n        type,\n        date,\n        maxParticipants,\n        description,\n        language,\n        topics\n      } = formData;\n      const validations = {\n        title: title.trim().length >= 3,\n        type: ['breakfast', 'lunch', 'dinner', 'snack'].includes(type),\n        date: date instanceof Date && date > new Date(),\n        maxParticipants: maxParticipants >= 2 && maxParticipants <= 10,\n        description: description.trim().length >= 10,\n        language: language.trim().length >= 2,\n        topics: topics.length >= 1\n      };\n\n      // Debug delle validazioni\n      if (process.env.NODE_ENV === 'development') {\n        console.log('🔍 Form validations:', validations);\n      }\n      setIsFormValid(Object.values(validations).every(v => v === true));\n    };\n    validateForm();\n  }, [formData]);\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  const handleDateChange = date => {\n    setFormData(prev => ({\n      ...prev,\n      date: date\n    }));\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!isFormValid) {\n      const errorMessage = 'Per f⟪ 6302 characters skipped ⟫              fileName: _jsxFileName,\n                  lineNumber: 187,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"dinner\",\n                  children: \"\\uD83C\\uDF77 Cena\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 188,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"snack\",\n                  children: \"\\uD83C\\uDF6A Spuntino\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 189,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 180,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: ⟪ 21993 characters skipped ⟫s/CreateMealForm.css';\nimport { toast } from 'react-hot-toast';\n\nconst CreateMealForm = ({ onMealCreated, onCancel }) => {\n  const [formData, setFormData] = useState({\n    title: '',\n    type: 'dinner',\n    date: new Date(new Date().setHours(new Date().getHours() + 2)),\n    maxParticipants: 4,\n    description: '',\n    language: 'Italiano',\n    topics: [],\n    duration: 120, // Durata predefinita di 2 ore\n    settings: {\n      allowLateJoin: true,\n      requireApproval: false,\n      recordingEnabled: false\n    }\n  });\n  \n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [isFormValid, setIsFormValid] = useState(false);\n  \n  // Validazione del form\n  useEffect(() => {\n    const validateForm = () => {\n      const { title, type, date, maxParticipants, description, language, topics } = formData;\n      \n      const validations = {\n        title: title.trim().length >= 3,\n        type: ['breakfast', 'lunch', 'dinner', 'snack'].includes(type),\n        date: date instanceof Date && date > new Date(),\n        maxParticipants: maxParticipants >= 2 && maxParticipants <= 10,\n        description: description.trim().length >= 10,\n        language: language.trim().length >= 2,\n        topics: topics.length >= 1\n      };\n\n      // Debug delle validazioni\n      if (process.env.NODE_ENV === 'development') {\n        console.log('🔍 Form validations:', validations);\n      }\n      \n      setIsFormValid(Object.values(validations).every(v => v === true));\n    };\n    \n    validateForm();\n  }, [formData]);\n  \n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n  };\n  \n  const handleDateChange = (date) => {\n    setFormData(prev => ({ ...prev, date: date }));\n  };\n  \n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!isFormValid) {\n      const errorMessage = 'Per favore, compila correttame⟪ 3710 characters skipped ⟫     required\n                >\n                  <option value=\"breakfast\">🥐 Colazione</option>\n                  <option value=\"lunch\">🍽️ Pranzo</option>\n                  <option value=\"dinner\">🍷 Cena</option>\n                  <option value=\"snack\">🍪 Spuntino</option>\n                </Form.Select>\n              </Form.Group>\n            </Col>\n            \n            <Col md={6}>\n              <Form.Group>\n                <Form.Label>Lingua principale*</Form.Label>\n                <Form.Select\n                  name=\"language\"\n                  value={formData.language}\n                  onChange={handleChange}\n                  required\n                >\n                  <option value=\"Italiano\">🇮🇹 Italiano</option>\n                  <option value=\"English\">🇬🇧 Inglese</option>\n                  <option value=\"Español\">🇪🇸 Spagnolo</option>\n                  <option value=\"Français\">🇫🇷 Francese</option>\n                  <option value=\"Deutsch\">🇩🇪 Tedesco</option>\n                  <option value=\"中文\">🇨🇳 Cinese</option>\n                  <option value=\"日本語\">🇯🇵 Giapponese</option>\n                  <option valu

FRONTEND/client/node_modules/.cache/babel-loader/66a1d63b7ab8a509c44b1feb85f5037e548b87782194c4206238a57d3ffaf88e.json:
  1: ⟪ 1048 characters skipped ⟫    host,\n    participants,\n    language,\n    meetingLink,\n    status\n  } = meal;\n\n  // Traduzioni\n  const mealTypeTranslation = {\n    'breakfast': 'Colazione',\n    'lunch': 'Pranzo',\n    'dinner': 'Cena',\n    'snack': 'Spuntino'\n  };\n  const languageTranslation = {\n    'Italiano': 'Italiano',\n    'English': 'Inglese',\n    'Español': 'Spagnolo',\n    'Français': 'Francese',\n    'Deutsch': 'Tedesco',\n    '中文': 'Cinese',\n    '日本語': 'Giapponese',\n    'العربية': 'Arabo',\n    'Русский': 'Russo',\n    'Português': 'Portoghese'\n  };\n  const statusTranslation = {\n    'scheduled': 'In arrivo',\n    'ongoing': 'In corso',\n    'completed': 'Completato',\n    'cancelled': 'Cancellato'\n  };\n  const statusVariant = {\n    'scheduled': 'success',\n    'ongoing': 'warning',\n    'completed': 'secondary',\n    'cancelled': 'danger'\n  };\n\n  // Verifica se l'utente corrente è l'host\n  const isHost = (host === null || host === void 0 ? void 0 : host._id) === (currentUser === null || currentUser === void 0 ? void 0 : currentUser.id);\n\n  // Verifica se l'utente corrente è un partecipante\n  const isParticipant = participants === null || participants === void 0 ? void 0 ⟪ 12308 characters skipped ⟫ants, description,\n    host, participants, language, meetingLink, status\n  } = meal;\n\n  // Traduzioni\n  const mealTypeTranslation = {\n    'breakfast': 'Colazione',\n    'lunch': 'Pranzo',\n    'dinner': 'Cena',\n    'snack': 'Spuntino'\n  };\n\n  const languageTranslation = {\n    'Italiano': 'Italiano',\n    'English': 'Inglese',\n    'Español': 'Spagnolo',\n    'Français': 'Francese',\n    'Deutsch': 'Tedesco',\n    '中文': 'Cinese',\n    '日本語': 'Giapponese',\n    'العربية': 'Arabo',\n    'Русский': 'Russo',\n    'Português': 'Portoghese'\n  };\n\n  const statusTranslation = {\n    'scheduled': 'In arrivo',\n    'ongoing': 'In corso',\n    'completed': 'Completato',\n    'cancelled': 'Cancellato'\n  };\n\n  const statusVariant = {\n    'scheduled': 'success',\n    'ongoing': 'warning',\n    'completed': 'secondary',\n    'cancelled': 'danger'\n  };\n\n  // Verifica se l'utente corrente è l'host\n  const isHost = host?._id === currentUser?.id;\n  \n  // Verifica se l'utente corrente è un partecipante\n  const isParticipant = participants?.some(p => p._id === currentUser?.id);\n  \n  // Verifica se il pasto è pieno\n  const isFull = participants?.length >= maxParticipants;\n\n 

FRONTEND/client/node_modules/.cache/babel-loader/73ea2a5570ebdeb295a6f3bfcc9d71c3abee5a3e3bc3e5003e64132bea4a1956.json:
  1: ⟪ 3884 characters skipped ⟫oid 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"dinner\",\n              children: \"Cena\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"aperitif\",\n              children: \"Aperitivo\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Data\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumbe⟪ 8309 characters skipped ⟫           <option value=\"\">Tutti i tipi</option>\n              <option value=\"breakfast\">Colazione</option>\n              <option value=\"lunch\">Pranzo</option>\n              <option value=\"dinner\">Cena</option>\n              <option value=\"aperitif\">Aperitivo</option>\n            </Form.Select>\n          </Form.Group>\n\n          {/* Data */}\n          <Form.Group className=\"mb-3\">\n            <Form.Label>Data</Form.Label>\n            <Form.Control\n              type=\"date\"\n              onChange={handleDateChange}\n              value={filters.date || ''}\n            />\n          </Form.Group>\n\n          {/* Lingua */}\n          <Form.Group className=\"mb-3\">\n            <Form.Label>Lingua</Form.Label>\n            <Form.Select onChange={handleLanguageChange} value={filters.language || ''}>\n              <option value=\"\">Tutte le lingue</option>\n              <option value=\"Italiano\">Italiano</option>\n              <option value=\"English\">Inglese</option>\n              <option value=\"Español\">Spagnolo</option>\n              <option value=\"Français\">Francese</option>\n              <option value=\"Deutsch\">Tedesco</option>\n        

FRONTEND/client/node_modules/.cache/babel-loader/80f9e80fa5420c95172fca92f43fbc4ea10c74732f176564011292ac1718b3a5.json:
  1: ⟪ 75609 characters skipped ⟫ toString(value)) {\n          node.defaultValue = toString(value);\n        }\n      }\n    }\n    var didWarnSelectedSetOnOption = false;\n    var didWarnInvalidChild = false;\n    var didWarnInvalidInnerHTML = false;\n    /**\n     * Implements an <option> host component that warns when `selected` is set.\n     */\n\n    function validateProps(element, props) {\n      {\n        // If a value is not provided, then the children must be simple.\n        if (props.value == null) {\n          if (typeof props.children === 'object' && props.children !== null) {\n            React.Children.forEach(props.children, function (child) {\n              if (child == null) {\n                return;\n              }\n              if (typeof child === 'string' || typeof child === 'number') {\n                return;\n              }\n              if (!didWarnInvalidChild) {\n                didWarnInvalidChild = true;\n                error('Cannot infer the option value of complex children. ' + 'Pass a `value` prop or use a plain string as children to <option>.');\n              }\n            });\n          } else if (props.dangerouslySetInnerHTML != null) {\n            if (!didWarnInvalidInnerHTML) {\n              didWarnInvalidInnerHTML = true;\n              error('Pass a `value` prop if you set dangerouslyInnerHTML so React knows ' + 'which value should be selected.');\n            }\n          }\n        } // TODO: Remove support for `selected` in <option>.\n\n        if (props.selected != null && !didWarnSelectedSetOnOption) {\n          error('Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.');\n          didWarnSelectedSetOnOption = true;\n        }\n      }\n    }\n    function postMountWrapper$1(element, props) {\n      // value=\"\" should make a value attribute (#6219)\n      if (props.value != null) {\n        element.setAttribute('value', toString(getToStringValue(props.value)));\n      }\n    }\n    var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n\n    function isArray(a) {\n      return isArrayImpl(a);\n    }\n    var didWarnValueDefaultValue$1;\n    {\n      didWarnValueDefaultValue$1 = false;\n    }\n    function g⟪ 1079564 characters skipped ⟫,"rootNode","queryRoot","parentNode","querySelectorAll","otherNode","form","otherProps","getFiberCurrentPropsFromNode","ownerDocument","didWarnSelectedSetOnOption","didWarnInvalidChild","didWarnInvalidInnerHTML","validateProps","children","Children","child","dangerouslySetInnerHTML","selected","postMountWrapper$1","isArrayImpl","isArray","a","didWarnValueDefaultValue$1","getDeclarationErrorAddendum","ownerName","valuePropNames","checkSelectPropTypes","propNameIsArray","multiple","updateOptions","propValue","setDefaultSelected","options","selectedValues","selectedValue","_i","defaultSelected","_selectedValue","_i2","getHostProps$1","initWrapperState$1","wasMultiple","postMountWrapper$2","postUpdateWrapper","restoreControlledState$1","didWarnValDefaultVal","getHostProps$2","initWrapperState$2","updateWrapper$1","newValue","postMountWrapper$3","textContent","restoreControlledState$2","HTML_NAMESPACE","MATH_NAMESPACE","SVG_NAMESPACE","getIntrinsicNamespace","getChildNamespace","parentNamespace","createMicrosoftUnsafeLocalFunction","func","MSApp","execUnsafeLocalFunction","arg0","arg1","arg2","arg3","reusableSVGContainer","setInnerHTML","html","namespaceURI","innerHTML","valueOf","svgNo⟪ 129515 characters skipped ⟫ if (node.defaultValue !== toString(value)) {\n      node.defaultValue = toString(value);\n    }\n  }\n}\n\nvar didWarnSelectedSetOnOption = false;\nvar didWarnInvalidChild = false;\nvar didWarnInvalidInnerHTML = false;\n/**\n * Implements an <option> host component that warns when `selected` is set.\n */\n\nfunction validateProps(element, props) {\n  {\n    // If a value is not provided, then the children must be simple.\n    if (props.value == null) {\n      if (typeof props.children === 'object' && props.children !== null) {\n        React.Children.forEach(props.children, function (child) {\n          if (child == null) {\n            return;\n          }\n\n          if (typeof child === 'string' || typeof child === 'number') {\n            return;\n          }\n\n          if (!didWarnInvalidChild) {\n            didWarnInvalidChild = true;\n\n            error('Cannot infer the option value of complex children. ' + 'Pass a `value` prop or use a plain string as children to <option>.');\n          }\n        });\n      } else if (props.dangerouslySetInnerHTML != null) {\n        if (!didWarnInvalidInnerHTML) {\n          didWarnInvalidInnerHTML = true;\n\n          error('Pass a `value` prop if you set dangerouslyInnerHTML so React knows ' + 'which value should be selected.');\n        }\n      }\n    } // TODO: Remove support for `selected` in <option>.\n\n\n    if (props.selected != null && !didWarnSelectedSetOnOption) {\n      error('Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.');\n\n      didWarnSelectedSetOnOption = true;\n    }\n  }\n}\nfunction postMountWrapper$1(element, props) {\n  // value=\"\" should make a value attribute (#6219)\n  if (props.value != null) {\n    element.setAttribute('value', toString(getToStringValue(props.value)));\n  }\n}\n\nvar isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n\nfunction isArray(a) {\n  return isArrayImpl(a);\n}\n\nvar didWarnValueDefaultValue$1;\n\n{\n  didWarnValueDefaultValue$1 = false;\n}\n\nfunction getDeclarationErrorAddendum() {\n  var ownerName = getCurrentFiberOwnerNameInDevOrNull(

FRONTEND/client/node_modules/.cache/babel-loader/83ff4daa11d88274bd5d4dfcee35db9d9c95fd7bb9ed287b86f818323795b482.json:
  1: ⟪ 553 characters skipped ⟫ent as _Fragment } from \"react/jsx-dev-runtime\";\nconst CreateMealForm = ({\n  onMealCreated,\n  onCancel\n}) => {\n  _s();\n  const [formData, setFormData] = useState({\n    title: '',\n    type: 'dinner',\n    date: new Date(new Date().setHours(new Date().getHours() + 2)),\n    maxParticipants: 4,\n    description: '',\n    language: 'Italiano',\n    topics: [],\n    duration: 120,\n    // Durata predefinita di 2 ore\n    settings: {\n      allowLateJoin: true,\n      requireApproval: false,\n      recordingEnabled: false\n    }\n  });\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [isFormValid, setIsFormValid] = useState(false);\n\n  // Validazione del form\n  useEffect(() => {\n    const validateForm = () => {\n      const {\n        title,\n        type,\n        date,\n        maxParticipants,\n        description,\n        language,\n        topics\n      } = formData;\n      const validations = {\n        title: title.trim().length >= 3,\n        type: ['breakfast', 'lunch', 'dinner', 'snack'].includes(type),\n        date: date instanceof Date && date > new Date(),\n        maxParticipants: maxParticipants >= 2 && maxParticipants <= 10,\n        description: description.trim().length >= 10,\n        language: language.trim().length >= 2,\n        topics: topics.length >= 1\n      };\n\n      // Debug delle validazioni\n      if (process.env.NODE_ENV === 'development') {\n        console.log('🔍 Form validations:', validations);\n      }\n      setIsFormValid(Object.values(validations).every(v => v === true));\n    };\n    validateForm();\n  }, [formData]);\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  const handleDateChange = date => {\n    setFormData(prev => ({\n      ...prev,\n      date: date\n    }));\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!isFormValid) {\n      const errorMessage = 'Per f⟪ 6374 characters skipped ⟫              fileName: _jsxFileName,\n                  lineNumber: 189,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"dinner\",\n                  children: \"\\uD83C\\uDF77 Cena\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 190,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"snack\",\n                  children: \"\\uD83C\\uDF6A Spuntino\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 191,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 182,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: ⟪ 22126 characters skipped ⟫s/CreateMealForm.css';\nimport { toast } from 'react-hot-toast';\n\nconst CreateMealForm = ({ onMealCreated, onCancel }) => {\n  const [formData, setFormData] = useState({\n    title: '',\n    type: 'dinner',\n    date: new Date(new Date().setHours(new Date().getHours() + 2)),\n    maxParticipants: 4,\n    description: '',\n    language: 'Italiano',\n    topics: [],\n    duration: 120, // Durata predefinita di 2 ore\n    settings: {\n      allowLateJoin: true,\n      requireApproval: false,\n      recordingEnabled: false\n    }\n  });\n  \n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [isFormValid, setIsFormValid] = useState(false);\n  \n  // Validazione del form\n  useEffect(() => {\n    const validateForm = () => {\n      const { title, type, date, maxParticipants, description, language, topics } = formData;\n      \n      const validations = {\n        title: title.trim().length >= 3,\n        type: ['breakfast', 'lunch', 'dinner', 'snack'].includes(type),\n        date: date instanceof Date && date > new Date(),\n        maxParticipants: maxParticipants >= 2 && maxParticipants <= 10,\n        description: description.trim().length >= 10,\n        language: language.trim().length >= 2,\n        topics: topics.length >= 1\n      };\n\n      // Debug delle validazioni\n      if (process.env.NODE_ENV === 'development') {\n        console.log('🔍 Form validations:', validations);\n      }\n      \n      setIsFormValid(Object.values(validations).every(v => v === true));\n    };\n    \n    validateForm();\n  }, [formData]);\n  \n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n  };\n  \n  const handleDateChange = (date) => {\n    setFormData(prev => ({ ...prev, date: date }));\n  };\n  \n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!isFormValid) {\n      const errorMessage = 'Per favore, compila correttame⟪ 3820 characters skipped ⟫     required\n                >\n                  <option value=\"breakfast\">🥐 Colazione</option>\n                  <option value=\"lunch\">🍽️ Pranzo</option>\n                  <option value=\"dinner\">🍷 Cena</option>\n                  <option value=\"snack\">🍪 Spuntino</option>\n                </Form.Select>\n              </Form.Group>\n            </Col>\n            \n            <Col md={6}>\n              <Form.Group>\n                <Form.Label>Lingua principale*</Form.Label>\n                <Form.Select\n                  name=\"language\"\n                  value={formData.language}\n                  onChange={handleChange}\n                  required\n                >\n                  <option value=\"Italiano\">🇮🇹 Italiano</option>\n                  <option value=\"English\">🇬🇧 Inglese</option>\n                  <option value=\"Español\">🇪🇸 Spagnolo</option>\n                  <option value=\"Français\">🇫🇷 Francese</option>\n                  <option value=\"Deutsch\">🇩🇪 Tedesco</option>\n                  <option value=\"中文\">🇨🇳 Cinese</option>\n                  <option value=\"日本語\">🇯🇵 Giapponese</option>\n                  <option valu

FRONTEND/client/node_modules/.cache/babel-loader/88c2cb5445689379760439ca2abf7d6b8bf5716ca42cefe3024e6a233dfac269.json:
  1: ⟪ 1244 characters skipped ⟫    host,\n    participants,\n    language,\n    meetingLink,\n    status\n  } = meal;\n\n  // Traduzioni\n  const mealTypeTranslation = {\n    'breakfast': 'Colazione',\n    'lunch': 'Pranzo',\n    'dinner': 'Cena',\n    'snack': 'Spuntino'\n  };\n  const languageTranslation = {\n    'Italiano': 'Italiano',\n    'English': 'Inglese',\n    'Español': 'Spagnolo',\n    'Français': 'Francese',\n    'Deutsch': 'Tedesco',\n    '中文': 'Cinese',\n    '日本語': 'Giapponese',\n    'العربية': 'Arabo',\n    'Русский': 'Russo',\n    'Português': 'Portoghese'\n  };\n  const statusTranslation = {\n    'scheduled': 'In arrivo',\n    'ongoing': 'In corso',\n    'completed': 'Completato',\n    'cancelled': 'Cancellato'\n  };\n  const statusVariant = {\n    'scheduled': 'success',\n    'ongoing': 'warning',\n    'completed': 'secondary',\n    'cancelled': 'danger'\n  };\n\n  // Verifica se l'utente corrente è l'host\n  const isHost = (host === null || host === void 0 ? void 0 : host._id) === (currentUser === null || currentUser === void 0 ? void 0 : currentUser.id);\n\n  // Verifica se l'utente corrente è un partecipante\n  const isParticipant = participants === null || participants === void 0 ? void 0 ⟪ 12568 characters skipped ⟫ants, description,\n    host, participants, language, meetingLink, status\n  } = meal;\n\n  // Traduzioni\n  const mealTypeTranslation = {\n    'breakfast': 'Colazione',\n    'lunch': 'Pranzo',\n    'dinner': 'Cena',\n    'snack': 'Spuntino'\n  };\n\n  const languageTranslation = {\n    'Italiano': 'Italiano',\n    'English': 'Inglese',\n    'Español': 'Spagnolo',\n    'Français': 'Francese',\n    'Deutsch': 'Tedesco',\n    '中文': 'Cinese',\n    '日本語': 'Giapponese',\n    'العربية': 'Arabo',\n    'Русский': 'Russo',\n    'Português': 'Portoghese'\n  };\n\n  const statusTranslation = {\n    'scheduled': 'In arrivo',\n    'ongoing': 'In corso',\n    'completed': 'Completato',\n    'cancelled': 'Cancellato'\n  };\n\n  const statusVariant = {\n    'scheduled': 'success',\n    'ongoing': 'warning',\n    'completed': 'secondary',\n    'cancelled': 'danger'\n  };\n\n  // Verifica se l'utente corrente è l'host\n  const isHost = host?._id === currentUser?.id;\n  \n  // Verifica se l'utente corrente è un partecipante\n  const isParticipant = participants?.some(p => p._id === currentUser?.id);\n  \n  // Verifica se il pasto è pieno\n  const isFull = participants?.length >= maxParticipants;\n\n 

FRONTEND/client/node_modules/.cache/babel-loader/99a1a70fb3b0131a29ea3ef33c9446389ea925b241e54e1119021bfb0adf3b8a.json:
  1: ⟪ 3538 characters skipped ⟫      }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"dinner\",\n            children: \"Cena\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), expandedFilters && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Lingua\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Select, {\n            name: \"language\",\n            value: tempFilters.language,\n            onChange: handleLanguageChange,\n           ⟪ 8146 characters skipped ⟫  >\n            <option value=\"\">Tutti i tipi</option>\n            <option value=\"breakfast\">Colazione</option>\n            <option value=\"lunch\">Pranzo</option>\n            <option value=\"dinner\">Cena</option>\n          </Form.Select>\n        </Form.Group>\n        \n        {expandedFilters && (\n          <>\n            <Form.Group className=\"mb-3\">\n              <Form.Label>Lingua</Form.Label>\n              <Form.Select \n                name=\"language\" \n                value={tempFilters.language} \n                onChange={handleLanguageChange}\n              >\n                <option value=\"\">Tutte le lingue</option>\n                <option value=\"Italiano\">Italiano</option>\n                <option value=\"English\">Inglese</option>\n                <option value=\"Español\">Spagnolo</option>\n                <option value=\"Français\">Francese</option>\n                <option value=\"Deutsch\">Tedesco</option>\n                <option value=\"中文\">Cinese</option>\n                <option value=\"日本語\">Giapponese</option>\n                <option value=\"العربية\">Arabo</option>\n                <option value=\"Русский\">Russo</option>\n       

FRONTEND/client/node_modules/.cache/babel-loader/568b1e9341870e3df8a02ac364b998002999302d01e4cddc8face3981c3d8ed0.json:
  1: ⟪ 468 characters skipped ⟫;\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CreateMealForm = ({\n  onMealCreated\n}) => {\n  _s();\n  const [formData, setFormData] = useState({\n    title: '',\n    type: 'dinner',\n    // Default a cena\n    dateTime: new Date(new Date().setHours(new Date().getHours() + 2)),\n    // Default a 2 ore da ora\n    maxParticipants: 4,\n    description: '',\n    language: 'Italiano' // Default a italiano\n  });\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [isFormValid, setIsFormValid] = useState(false);\n\n  // Validazione del form\n  useEffect(() => {\n    const validateForm = () => {\n      const {\n        title,\n        type,\n        dateTime,\n        maxParticipants,\n        description,\n        language\n      } = formData;\n      const isTitleValid = title.trim().length > 0 && title.trim().length <= 100;\n      const isTypeValid = ['breakfast', 'lunch', 'dinner'].includes(type);\n      const isDateTimeValid = dateTime instanceof Date && dateTime > new Date();\n      const isMaxParticipantsValid = maxParticipants >= 2 && maxParticipants <= 10;\n      const isDescriptionValid = description.trim().length > 0 && description.trim().length <= 500;\n      const isLanguageValid = language.trim().length > 0;\n      setIsFormValid(isTitleValid && isTypeValid && isDateTimeValid && isMaxParticipantsValid && isDescriptionValid && isLanguageValid);\n    };\n    validateForm();\n  }, [formData]);\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  const handleDateChange = date => {\n    setFormData(prev => ({\n      ...prev,\n      dateTime: date\n    }));\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!isFormValid) return;\n    setLoading(true);\n    setError('');\n    try {\n      await createMeal(fo⟪ 3899 characters skipped ⟫              fileName: _jsxFileName,\n                  lineNumber: 118,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"dinner\",\n                  children: \"Cena\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 119,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 111,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            md: 6,\n            children: /*#__PURE__*/_jsxDEV(Form.Group, {\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                children: \"Lingua principale*\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n     ⟪ 11953 characters skipped ⟫ker/dist/react-datepicker.css';\nimport '../../styles/CreateMealForm.css';\n\nconst CreateMealForm = ({ onMealCreated }) => {\n  const [formData, setFormData] = useState({\n    title: '',\n    type: 'dinner', // Default a cena\n    dateTime: new Date(new Date().setHours(new Date().getHours() + 2)), // Default a 2 ore da ora\n    maxParticipants: 4,\n    description: '',\n    language: 'Italiano' // Default a italiano\n  });\n  \n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [isFormValid, setIsFormValid] = useState(false);\n  \n  // Validazione del form\n  useEffect(() => {\n    const validateForm = () => {\n      const { title, type, dateTime, maxParticipants, description, language } = formData;\n      \n      const isTitleValid = title.trim().length > 0 && title.trim().length <= 100;\n      const isTypeValid = ['breakfast', 'lunch', 'dinner'].includes(type);\n      const isDateTimeValid = dateTime instanceof Date && dateTime > new Date();\n      const isMaxParticipantsValid = maxParticipants >= 2 && maxParticipants <= 10;\n      const isDescriptionValid = description.trim().length > 0 && description.trim().length <= 500;\n      const isLanguageValid = language.trim().length > 0;\n      \n      setIsFormValid(\n        isTitleValid &&\n        isTypeValid &&\n        isDateTimeValid &&\n        isMaxParticipantsValid &&\n        isDescriptionValid &&\n        isLanguageValid\n      );\n    };\n    \n    validateForm();\n  }, [formData]);\n  \n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n  };\n  \n  const handleDateChange = (date) => {\n    setFormData(prev => ({ ...prev, dateTime: date }));\n  };\n  \n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!isFormValid) return;\n    \n    setLoading(true);\n    setErro⟪ 1756 characters skipped ⟫            required\n                >\n                  <option value=\"breakfast\">Colazione</option>\n                  <option value=\"lunch\">Pranzo</option>\n                  <option value=\"dinner\">Cena</option>\n                </Form.Select>\n              </Form.Group>\n            </Col>\n            \n            <Col md={6}>\n              <Form.Group>\n                <Form.Label>Lingua principale*</Form.Label>\n                <Form.Select\n                  name=\"language\"\n                  value={formData.language}\n                  onChange={handleChange}\n                  required\n                >\n                  <option value=\"Italiano\">Italiano</option>\n                  <option value=\"English\">Inglese</option>\n                  <option value=\"Español\">Spagnolo</option>\n                  <option value=\"Français\">Francese</option>\n                  <option value=\"Deutsch\">Tedesco</option>\n                  <option value=\"中文\">Cinese</option>\n                  <option value=\"日本語\">Giapponese</option>\n                  <option value=\"العربية\">Arabo</option>\n                  <option value=\"Русский\">Russo</option>\n            

FRONTEND/client/node_modules/.cache/babel-loader/799ffdbf93bd2d966aa861cd92d39bd29c9f0b387371c15d2d917da5147c89b3.json:
  1: ⟪ 502 characters skipped ⟫DEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CreateMealPage = () => {\n  _s();\n  const navigate = useNavigate();\n  const VALID_MEAL_TYPES = ['breakfast', 'lunch', 'dinner', 'aperitif'];\n  const VALID_LANGUAGES = ['Italiano', 'English', 'Español', 'Français', 'Deutsch', '中文', 'العربية'];\n  const [formData, setFormData] = useState({\n    title: '',\n    type: 'dinner',\n    date: new Date(new Date().setHours(new Date().getHours() + 2)),\n    maxParticipants: 4,\n    description: '',\n    language: 'Italiano',\n    topics: [],\n    duration: 120,\n    settings: {\n      allowLateJoin: true,\n      requireApproval: false,\n      videoQuality: 'HD',\n      backgroundBlur: true\n    }\n  });\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [isFormValid, setIsFormValid] = useState(false);\n\n  // Validazione del form\n  useEffect(() => {\n    const validateForm = () => {\n      const {\n        title,\n        type,\n        date,\n        maxParticipants,\n        description,\n        language,\n        topics,\n        duration\n      } = formData;\n      const minDate = new Date();\n      const maxDate = new Date();\n      maxDate.setDate(maxDate.getDate() + 14);\n      const validations = {\n        title: title.trim().length >= 10,\n        type: VALID_MEAL_TYPES.includes(type),\n        ⟪ 12165 characters skipped ⟫AL_TYPES.map(type => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: type,\n                  children: type === 'breakfast' ? '🥐 Breakfast' : type === 'lunch' ? '🍽️ Lunch' : type === 'dinner' ? '🍷 Dinner' : '🍹 Aperitif'\n                }, type, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 312,\n                  columnNumber: 21\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 304,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 302,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"language\",\n                children: \"Lingua Principale*\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 323,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                id: \"language\",\n        ⟪ 20362 characters skipped ⟫ from '../../services/mealService';\nimport '../../styles/CreateMealPage.css';\n\nconst CreateMealPage = () => {\n  const navigate = useNavigate();\n  const VALID_MEAL_TYPES = ['breakfast', 'lunch', 'dinner', 'aperitif'];\n  const VALID_LANGUAGES = ['Italiano', 'English', 'Español', 'Français', 'Deutsch', '中文', 'العربية'];\n  \n  const [formData, setFormData] = useState({\n    title: '',\n    type: 'dinner',\n    date: new Date(new Date().setHours(new Date().getHours() + 2)),\n    maxParticipants: 4,\n    description: '',\n    language: 'Italiano',\n    topics: [],\n    duration: 120,\n    settings: {\n      allowLateJoin: true,\n      requireApproval: false,\n      videoQuality: 'HD',\n      backgroundBlur: true\n    }\n  });\n\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [isFormValid, setIsFormValid] = useState(false);\n\n  // Validazione del form\n  useEffect(() => {\n    const validateForm = () => {\n      const { title, type, date, maxParticipants, description, language, topics, duration } = formData;\n      \n      const minDate = new Date();\n      const maxDate = new Date();\n      maxDate.setDate(maxDate.getDate() + 14);\n\n      const validations = {\n        title: title.trim().length >= 10,\n        type: VALID_MEAL_TYPES.includes(type),\n        date: date instanceof Date && !isNaN(date.getTime()) && date > minD⟪ 8813 characters skipped ⟫            <option key={type} value={type}>\n                      {type === 'breakfast' ? '🥐 Breakfast' :\n                       type === 'lunch' ? '🍽️ Lunch' :\n                       type === 'dinner' ? '🍷 Dinner' :\n                       '🍹 Aperitif'}\n                    </option>\n                  ))}\n                </select>\n              </div>\n\n              <div className=\"form-group\">\n                <label htmlFor=\"language\">Lingua Principale*</label>\n                <select\n                  id=\"language\"\n                  name=\"language\"\n                  value={formData.language}\n                  onChange={handleChange}\n                  required\n                >\n                  {VALID_LANGUAGES.map(lang => (\n                    <option key={lang} value={lang}>\n                      {lang === 'Italiano' ? '🇮🇹 Italiano' :\n                       lang === 'English' ? '🇬🇧 English' :\n                       lang === 'Español' ? '🇪🇸 Español' :\n                       lang === 'Français' ? '🇫🇷 Français' :\n                       lang === 'Deutsch' ? '🇩🇪 Deutsch' :\n                       lang === '中文' ? '🇨🇳 中文' :\n                       '�

FRONTEND/client/node_modules/.cache/babel-loader/845d86f18577c7c542e13f80a62cc1f64ca354b82487eca861c3606af0665478.json:
  1: {"ast":null,"code":"import axiosInstance from '../config/axiosConfig';\n\n// Mappatura dei valori in italiano\nconst MEAL_TYPES = {\n  breakfast: 'colazione',\n  lunch: 'pranzo',\n  dinner: 'cena',\n  aperitif: 'aperitivo'\n};\nconst MEAL_STATUS = {\n  upcoming: 'in arrivo',\n  ongoing: 'in corso',\n  completed: 'completato',\n  cancelled: 'cancellato'\n};\nconst LANGUAGES = {\n  it: 'italiano',\n  en: 'inglese',\n  es: 'spagnolo',\n  fr: 'francese',\n  de: 'tedesco'\n};\n\n// Funzione per convertire i valori in italiano\nconst translateToItalian = data => {\n  if (!data) return data;\n  const translated = {\n    ...data\n  };\n  if (translated.type) {\n    translated.type = MEAL_TYPES[translated.type] || translated.type;\n  }\n  if (translated.status) {\n    translated.status = MEAL_STATUS[translated.status] || translated.status;\n  }\n  if (translated.language) {\n    translated.language = LANGUAGES[translated.language] || translated.language;\n  }\n  return translated;\n};\n\n// Funzione per convertire i valori in inglese\nconst translateToEnglish = data => {\n  if (!data) return data;\n  const translated = {\n    ...data\n  };\n  if (translated.type) {\n    va⟪ 16068 characters skipped ⟫/ Esporta sia come default che come named export\nexport { mealService, MealServiceError };\nexport default mealService;","map":{"version":3,"names":["axiosInstance","MEAL_TYPES","breakfast","lunch","dinner","aperitif","MEAL_STATUS","upcoming","ongoing","completed","cancelled","LANGUAGES","it","en","es","fr","de","translateToItalian","data","translated","type","status","language","translateToEnglish","_Object$entries$find","englishType","Object","entries","find","_","value","_Object$entries$find2","englishStatus","_Object$entries$find3","englishLang","MealServiceError","Error","constructor","message","code","name","handleError","error","console","response","_error$response$data","_error$response$data2","headers","request","createMeal","mealData","_mealData$settings$al","_mealData$settings","_mealData$settings$re","_mealData$settings2","_mealData$settings$vi","_mealData$settings3","_mealData$settings$ba","_mealData$settings4","_axiosInstance$defaul","_axiosInstance$defaul2","_axiosInstance$defaul3","log","title","date","maxParticipants","description","topics","settings","token","localStorage","getItem","requiredFields","missingFields","filter","field","Array","isArray","length","tri⟪ 667 characters skipped ⟫s/mealService.js"],"sourcesContent":["import axiosInstance from '../config/axiosConfig';\n\n// Mappatura dei valori in italiano\nconst MEAL_TYPES = {\n  breakfast: 'colazione',\n  lunch: 'pranzo',\n  dinner: 'cena',\n  aperitif: 'aperitivo'\n};\n\nconst MEAL_STATUS = {\n  upcoming: 'in arrivo',\n  ongoing: 'in corso',\n  completed: 'completato',\n  cancelled: 'cancellato'\n};\n\nconst LANGUAGES = {\n  it: 'italiano',\n  en: 'inglese',\n  es: 'spagnolo',\n  fr: 'francese',\n  de: 'tedesco'\n};\n\n// Funzione per convertire i valori in italiano\nconst translateToItalian = (data) => {\n  if (!data) return data;\n  \n  const translated = { ...data };\n  \n  if (translated.type) {\n    translated.type = MEAL_TYPES[translated.type] || translated.type;\n  }\n  \n  if (translated.status) {\n    translated.status = MEAL_STATUS[translated.status] || translated.status;\n  }\n  \n  if (translated.language) {\n    translated.language = LANGUAGES[translated.language] || translated.language;\n  }\n  \n  return translated;\n};\n\n// Funzione per convertire i valori in inglese\nconst translateToEnglish = (data) => {\n  if (!data) return data;\n  \n  const translated = { ...data };\n  \n  if (transl

FRONTEND/client/node_modules/.cache/babel-loader/852ebddead4c9c478c932fb9a49a9a700f25ad543d2a3851bc3a4cc3018378cf.json:
  1: {"ast":null,"code":"import axiosInstance from '../config/axiosConfig';\n\n// Mappatura dei valori in italiano\nconst MEAL_TYPES = {\n  breakfast: 'colazione',\n  lunch: 'pranzo',\n  dinner: 'cena',\n  aperitif: 'aperitivo'\n};\nconst MEAL_STATUS = {\n  upcoming: 'in arrivo',\n  ongoing: 'in corso',\n  completed: 'completato',\n  cancelled: 'cancellato'\n};\nconst LANGUAGES = {\n  it: 'italiano',\n  en: 'inglese',\n  es: 'spagnolo',\n  fr: 'francese',\n  de: 'tedesco'\n};\n\n// Funzione per convertire i valori in italiano\nconst translateToItalian = data => {\n  if (!data) return data;\n  const translated = {\n    ...data\n  };\n  if (translated.type) {\n    translated.type = MEAL_TYPES[translated.type] || translated.type;\n  }\n  if (translated.status) {\n    translated.status = MEAL_STATUS[translated.status] || translated.status;\n  }\n  if (translated.language) {\n    translated.language = LANGUAGES[translated.language] || translated.language;\n  }\n  return translated;\n};\n\n// Funzione per convertire i valori in inglese\nconst translateToEnglish = data => {\n  if (!data) return data;\n  const translated = {\n    ...data\n  };\n  if (translated.type) {\n    va⟪ 16047 characters skipped ⟫/ Esporta sia come default che come named export\nexport { mealService, MealServiceError };\nexport default mealService;","map":{"version":3,"names":["axiosInstance","MEAL_TYPES","breakfast","lunch","dinner","aperitif","MEAL_STATUS","upcoming","ongoing","completed","cancelled","LANGUAGES","it","en","es","fr","de","translateToItalian","data","translated","type","status","language","translateToEnglish","_Object$entries$find","englishType","Object","entries","find","_","value","_Object$entries$find2","englishStatus","_Object$entries$find3","englishLang","MealServiceError","Error","constructor","message","code","name","handleError","error","console","response","_error$response$data","_error$response$data2","headers","request","createMeal","mealData","_mealData$settings$al","_mealData$settings","_mealData$settings$re","_mealData$settings2","_mealData$settings$vi","_mealData$settings3","_mealData$settings$ba","_mealData$settings4","_axiosInstance$defaul","_axiosInstance$defaul2","_axiosInstance$defaul3","log","title","date","maxParticipants","description","topics","settings","token","localStorage","getItem","requiredFields","missingFields","filter","field","Array","isArray","length","tri⟪ 667 characters skipped ⟫s/mealService.js"],"sourcesContent":["import axiosInstance from '../config/axiosConfig';\n\n// Mappatura dei valori in italiano\nconst MEAL_TYPES = {\n  breakfast: 'colazione',\n  lunch: 'pranzo',\n  dinner: 'cena',\n  aperitif: 'aperitivo'\n};\n\nconst MEAL_STATUS = {\n  upcoming: 'in arrivo',\n  ongoing: 'in corso',\n  completed: 'completato',\n  cancelled: 'cancellato'\n};\n\nconst LANGUAGES = {\n  it: 'italiano',\n  en: 'inglese',\n  es: 'spagnolo',\n  fr: 'francese',\n  de: 'tedesco'\n};\n\n// Funzione per convertire i valori in italiano\nconst translateToItalian = (data) => {\n  if (!data) return data;\n  \n  const translated = { ...data };\n  \n  if (translated.type) {\n    translated.type = MEAL_TYPES[translated.type] || translated.type;\n  }\n  \n  if (translated.status) {\n    translated.status = MEAL_STATUS[translated.status] || translated.status;\n  }\n  \n  if (translated.language) {\n    translated.language = LANGUAGES[translated.language] || translated.language;\n  }\n  \n  return translated;\n};\n\n// Funzione per convertire i valori in inglese\nconst translateToEnglish = (data) => {\n  if (!data) return data;\n  \n  const translated = { ...data };\n  \n  if (transl

FRONTEND/client/node_modules/.cache/babel-loader/965cfd6de1dd5ccd09f56edd6cab0a41d967c442f1a646f76cbda9ebd827fbfd.json:
  1: ⟪ 1728 characters skipped ⟫participants,\n    language,\n    meetingLink,\n    status,\n    location\n  } = meal;\n\n  // Traduzioni\n  const mealTypeTranslation = {\n    'breakfast': 'Colazione',\n    'lunch': 'Pranzo',\n    'dinner': 'Cena',\n    'snack': 'Spuntino'\n  };\n  const languageTranslation = {\n    'Italiano': 'Italiano',\n    'English': 'Inglese',\n    'Español': 'Spagnolo',\n    'Français': 'Francese',\n    'Deutsch': 'Tedesco',\n    '中文': 'Cinese',\n    '日本語': 'Giapponese',\n    'العربية': 'Arabo',\n    'Русский': 'Russo',\n    'Português': 'Portoghese'\n  };\n  const statusTranslation = {\n    'scheduled': 'In arrivo',\n    'ongoing': 'In corso',\n    'completed': 'Completato',\n    'cancelled': 'Cancellato'\n  };\n  const statusVariant = {\n    'scheduled': 'success',\n    'ongoing': 'warning',\n    'completed': 'secondary',\n    'cancelled': 'danger'\n  };\n\n  // Verifica se l'utente corrente è l'host\n  const isHost = (host === null || host === void 0 ? void 0 : host._id) === (currentUser === null || currentUser === void 0 ? void 0 : currentUser.id);\n\n  // Verifica se l'utente corrente è un partecipante\n  const isParticipant = participants === null || participants === void 0 ? void 0 ⟪ 17718 characters skipped ⟫ription,\n    host, participants, language, meetingLink, status, location\n  } = meal;\n\n  // Traduzioni\n  const mealTypeTranslation = {\n    'breakfast': 'Colazione',\n    'lunch': 'Pranzo',\n    'dinner': 'Cena',\n    'snack': 'Spuntino'\n  };\n\n  const languageTranslation = {\n    'Italiano': 'Italiano',\n    'English': 'Inglese',\n    'Español': 'Spagnolo',\n    'Français': 'Francese',\n    'Deutsch': 'Tedesco',\n    '中文': 'Cinese',\n    '日本語': 'Giapponese',\n    'العربية': 'Arabo',\n    'Русский': 'Russo',\n    'Português': 'Portoghese'\n  };\n\n  const statusTranslation = {\n    'scheduled': 'In arrivo',\n    'ongoing': 'In corso',\n    'completed': 'Completato',\n    'cancelled': 'Cancellato'\n  };\n\n  const statusVariant = {\n    'scheduled': 'success',\n    'ongoing': 'warning',\n    'completed': 'secondary',\n    'cancelled': 'danger'\n  };\n\n  // Verifica se l'utente corrente è l'host\n  const isHost = host?._id === currentUser?.id;\n  \n  // Verifica se l'utente corrente è un partecipante\n  const isParticipant = participants?.some(p => p._id === currentUser?.id);\n  \n  // Verifica se il pasto è pieno\n  const isFull = participants?.length >= maxParticipants;\n\n 

FRONTEND/client/node_modules/.cache/babel-loader/1038ab4c98db45b8be802f23769f48d93935dda44ba8230c7623391cb02dd553.json:
  1: ⟪ 1152 characters skipped ⟫participants,\n    language,\n    meetingLink,\n    status,\n    location\n  } = meal;\n\n  // Traduzioni\n  const mealTypeTranslation = {\n    'breakfast': 'Colazione',\n    'lunch': 'Pranzo',\n    'dinner': 'Cena',\n    'snack': 'Spuntino'\n  };\n  const languageTranslation = {\n    'it': 'Italiano',\n    'en': 'Inglese',\n    'es': 'Spagnolo',\n    'fr': 'Francese',\n    'de': 'Tedesco'\n  };\n  const statusTranslation = {\n    'scheduled': 'In arrivo',\n    'ongoing': 'In corso',\n    'completed': 'Completato',\n    'cancelled': 'Cancellato'\n  };\n  const statusVariant = {\n    'scheduled': 'success',\n    'ongoing': 'warning',\n    'completed': 'secondary',\n    'cancelled': 'danger'\n  };\n\n  // Verifica se l'utente corrente è l'host\n  const isHost = host._id === (currentUser === null || currentUser === void 0 ? void 0 : currentUser.id);\n\n  // Verifica se l'utente corrente è un partecipante\n  const isParticipant = participants.some(p => p._id === (currentUser === null || currentUser === void 0 ? void 0 : currentUser.id));\n\n  // Verifica se il pasto è pieno\n  const isFull = participants.length >= maxParticipants;\n\n  // Verifica se il pasto è già passato\n  const isP⟪ 17999 characters skipped ⟫ription,\n    host, participants, language, meetingLink, status, location\n  } = meal;\n\n  // Traduzioni\n  const mealTypeTranslation = {\n    'breakfast': 'Colazione',\n    'lunch': 'Pranzo',\n    'dinner': 'Cena',\n    'snack': 'Spuntino'\n  };\n\n  const languageTranslation = {\n    'it': 'Italiano',\n    'en': 'Inglese',\n    'es': 'Spagnolo',\n    'fr': 'Francese',\n    'de': 'Tedesco'\n  };\n\n  const statusTranslation = {\n    'scheduled': 'In arrivo',\n    'ongoing': 'In corso',\n    'completed': 'Completato',\n    'cancelled': 'Cancellato'\n  };\n\n  const statusVariant = {\n    'scheduled': 'success',\n    'ongoing': 'warning',\n    'completed': 'secondary',\n    'cancelled': 'danger'\n  };\n\n  // Verifica se l'utente corrente è l'host\n  const isHost = host._id === currentUser?.id;\n  \n  // Verifica se l'utente corrente è un partecipante\n  const isParticipant = participants.some(p => p._id === currentUser?.id);\n  \n  // Verifica se il pasto è pieno\n  const isFull = participants.length >= maxParticipants;\n\n  // Verifica se il pasto è già passato\n  const isPast = new Date(dateTime) < new Date();\n\n  // Funzione per gestire gli errori di caricamento delle immagini

FRONTEND/client/node_modules/.cache/babel-loader/5948b0527067c72ffa9c8f4ddb724b7d1d947d681c9fe0bdde02597fbcc5fb13.json:
  1: {"ast":null,"code":"import axiosInstance from '../config/axiosConfig';\n\n// Mappatura dei valori in italiano\nconst MEAL_TYPES = {\n  breakfast: 'colazione',\n  lunch: 'pranzo',\n  dinner: 'cena',\n  aperitif: 'aperitivo'\n};\nconst MEAL_STATUS = {\n  upcoming: 'in arrivo',\n  ongoing: 'in corso',\n  completed: 'completato',\n  cancelled: 'cancellato'\n};\nconst LANGUAGES = {\n  it: 'italiano',\n  en: 'inglese',\n  es: 'spagnolo',\n  fr: 'francese',\n  de: 'tedesco'\n};\n\n// Funzione per convertire i valori in italiano\nconst translateToItalian = data => {\n  if (!data) return data;\n  const translated = {\n    ...data\n  };\n  if (translated.type) {\n    translated.type = MEAL_TYPES[translated.type] || translated.type;\n  }\n  if (translated.status) {\n    translated.status = MEAL_STATUS[translated.status] || translated.status;\n  }\n  if (translated.language) {\n    translated.language = LANGUAGES[translated.language] || translated.language;\n  }\n  return translated;\n};\n\n// Funzione per convertire i valori in inglese\nconst translateToEnglish = data => {\n  if (!data) return data;\n  const translated = {\n    ...data\n  };\n  if (translated.type) {\n    va⟪ 16112 characters skipped ⟫/ Esporta sia come default che come named export\nexport { mealService, MealServiceError };\nexport default mealService;","map":{"version":3,"names":["axiosInstance","MEAL_TYPES","breakfast","lunch","dinner","aperitif","MEAL_STATUS","upcoming","ongoing","completed","cancelled","LANGUAGES","it","en","es","fr","de","translateToItalian","data","translated","type","status","language","translateToEnglish","_Object$entries$find","englishType","Object","entries","find","_","value","_Object$entries$find2","englishStatus","_Object$entries$find3","englishLang","MealServiceError","Error","constructor","message","code","name","handleError","error","console","response","_error$response$data","_error$response$data2","headers","request","createMeal","mealData","_mealData$settings$al","_mealData$settings","_mealData$settings$re","_mealData$settings2","_mealData$settings$vi","_mealData$settings3","_mealData$settings$ba","_mealData$settings4","_axiosInstance$defaul","_axiosInstance$defaul2","_axiosInstance$defaul3","log","title","date","maxParticipants","description","topics","settings","token","localStorage","getItem","requiredFields","missingFields","filter","field","Array","isArray","length","tri⟪ 667 characters skipped ⟫s/mealService.js"],"sourcesContent":["import axiosInstance from '../config/axiosConfig';\n\n// Mappatura dei valori in italiano\nconst MEAL_TYPES = {\n  breakfast: 'colazione',\n  lunch: 'pranzo',\n  dinner: 'cena',\n  aperitif: 'aperitivo'\n};\n\nconst MEAL_STATUS = {\n  upcoming: 'in arrivo',\n  ongoing: 'in corso',\n  completed: 'completato',\n  cancelled: 'cancellato'\n};\n\nconst LANGUAGES = {\n  it: 'italiano',\n  en: 'inglese',\n  es: 'spagnolo',\n  fr: 'francese',\n  de: 'tedesco'\n};\n\n// Funzione per convertire i valori in italiano\nconst translateToItalian = (data) => {\n  if (!data) return data;\n  \n  const translated = { ...data };\n  \n  if (translated.type) {\n    translated.type = MEAL_TYPES[translated.type] || translated.type;\n  }\n  \n  if (translated.status) {\n    translated.status = MEAL_STATUS[translated.status] || translated.status;\n  }\n  \n  if (translated.language) {\n    translated.language = LANGUAGES[translated.language] || translated.language;\n  }\n  \n  return translated;\n};\n\n// Funzione per convertire i valori in inglese\nconst translateToEnglish = (data) => {\n  if (!data) return data;\n  \n  const translated = { ...data };\n  \n  if (transl

FRONTEND/client/node_modules/.cache/babel-loader/38129a5f54ccaff9c92c16ccbcfdd2b8c006aa0d39a5952a0fc5801b23ed26a5.json:
  1: ⟪ 468 characters skipped ⟫;\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CreateMealForm = ({\n  onMealCreated\n}) => {\n  _s();\n  const [formData, setFormData] = useState({\n    title: '',\n    type: 'dinner',\n    date: new Date(new Date().setHours(new Date().getHours() + 2)),\n    maxParticipants: 4,\n    description: '',\n    language: 'Italiano',\n    topics: [],\n    duration: 120,\n    // Durata predefinita di 2 ore\n    settings: {\n      allowLateJoin: true,\n      requireApproval: false,\n      recordingEnabled: false\n    }\n  });\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [isFormValid, setIsFormValid] = useState(false);\n\n  // Validazione del form\n  useEffect(() => {\n    const validateForm = () => {\n      const {\n        title,\n        type,\n        date,\n        maxParticipants,\n        description,\n        language,\n        topics\n      } = formData;\n      const isTitleValid = title.trim().length >= 3 && title.trim().length <= 100;\n      const isTypeValid = ['breakfast', 'lunch', 'dinner', 'snack'].includes(type);\n      const isDateValid = date instanceof Date && date > new Date();\n      const isMaxParticipantsValid = maxParticipants >= 2 && maxParticipants <= 10;\n      const isDescriptionValid = description.trim().length >= 10 && description.trim().length <= 1000;\n      const isLanguageValid = language.trim().length >= 2 && language.trim().length <= 50;\n      const isTopicsValid = topics.length >= 1 && topics.length <= 5;\n      setIsFormValid(isTitleValid && isTypeValid && isDateValid && isMaxParticipantsValid && isDescriptionValid && isLanguageValid && isTopicsValid);\n    };\n    validateForm();\n  }, [formData]);\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  const handleDateChange = date => {\n    setFormData(prev => ({\n      ...prev,\n      date: date\n    }));\n  };\n  const handleSubmit = async e => {\n    e.preventDefault(⟪ 4097 characters skipped ⟫              fileName: _jsxFileName,\n                  lineNumber: 136,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"dinner\",\n                  children: \"Cena\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 137,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"snack\",\n                  children: \"Snack\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 138,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 129,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 13\n          }, this), /*#__PURE⟪ 12323 characters skipped ⟫ker/dist/react-datepicker.css';\nimport '../../styles/CreateMealForm.css';\n\nconst CreateMealForm = ({ onMealCreated }) => {\n  const [formData, setFormData] = useState({\n    title: '',\n    type: 'dinner',\n    date: new Date(new Date().setHours(new Date().getHours() + 2)),\n    maxParticipants: 4,\n    description: '',\n    language: 'Italiano',\n    topics: [],\n    duration: 120, // Durata predefinita di 2 ore\n    settings: {\n      allowLateJoin: true,\n      requireApproval: false,\n      recordingEnabled: false\n    }\n  });\n  \n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [isFormValid, setIsFormValid] = useState(false);\n  \n  // Validazione del form\n  useEffect(() => {\n    const validateForm = () => {\n      const { title, type, date, maxParticipants, description, language, topics } = formData;\n      \n      const isTitleValid = title.trim().length >= 3 && title.trim().length <= 100;\n      const isTypeValid = ['breakfast', 'lunch', 'dinner', 'snack'].includes(type);\n      const isDateValid = date instanceof Date && date > new Date();\n      const isMaxParticipantsValid = maxParticipants >= 2 && maxParticipants <= 10;\n      const isDescriptionValid = description.trim().length >= 10 && description.trim().length <= 1000;\n      const isLanguageValid = language.trim().length >= 2 && language.trim().length <= 50;\n      const isTopicsValid = topics.length >= 1 && topics.length <= 5;\n      \n      setIsFormValid(\n        isTitleValid &&\n        isTypeValid &&\n        isDateValid &&\n        isMaxParticipantsValid &&\n        isDescriptionValid &&\n        isLanguageValid &&\n        isTopicsValid\n      );\n    };\n    \n    validateForm();\n  }, [formData]);\n  \n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n  };\n  \n  const handleDateChange = (date) => {\n    setFormData(prev => ({ ...prev, date: date }));\n  };\n  \n  const handl⟪ 2186 characters skipped ⟫            required\n                >\n                  <option value=\"breakfast\">Colazione</option>\n                  <option value=\"lunch\">Pranzo</option>\n                  <option value=\"dinner\">Cena</option>\n                  <option value=\"snack\">Snack</option>\n                </Form.Select>\n              </Form.Group>\n            </Col>\n            \n            <Col md={6}>\n              <Form.Group>\n                <Form.Label>Lingua principale*</Form.Label>\n                <Form.Select\n                  name=\"language\"\n                  value={formData.language}\n                  onChange={handleChange}\n                  required\n                >\n                  <option value=\"Italiano\">Italiano</option>\n                  <option value=\"English\">Inglese</option>\n                  <option value=\"Español\">Spagnolo</option>\n                  <option value=\"Français\">Francese</option>\n                  <option value=\"Deutsch\">Tedesco</option>\n                  <option value=\"中文\">Cinese</option>\n                  <option value=\"日本語\">Giapponese</option>\n                  <option value=\"العربية\">Arabo</option>\n              

FRONTEND/client/node_modules/.cache/babel-loader/38379d689627a5d697a28327954728585ed21602a0adf41218b3a9f5bee4f680.json:
  1: {"ast":null,"code":"import axiosInstance from '../config/axiosConfig';\n\n// Mappatura dei valori in italiano\nconst MEAL_TYPES = {\n  breakfast: 'colazione',\n  lunch: 'pranzo',\n  dinner: 'cena',\n  aperitif: 'aperitivo'\n};\nconst MEAL_STATUS = {\n  upcoming: 'in arrivo',\n  ongoing: 'in corso',\n  completed: 'completato',\n  cancelled: 'cancellato'\n};\nconst LANGUAGES = {\n  it: 'italiano',\n  en: 'inglese',\n  es: 'spagnolo',\n  fr: 'francese',\n  de: 'tedesco'\n};\n\n// Funzione per convertire i valori in italiano\nconst translateToItalian = data => {\n  if (!data) return data;\n  const translated = {\n    ...data\n  };\n  if (translated.type) {\n    translated.type = MEAL_TYPES[translated.type] || translated.type;\n  }\n  if (translated.status) {\n    translated.status = MEAL_STATUS[translated.status] || translated.status;\n  }\n  if (translated.language) {\n    translated.language = LANGUAGES[translated.language] || translated.language;\n  }\n  return translated;\n};\n\n// Funzione per convertire i valori in inglese\nconst translateToEnglish = data => {\n  if (!data) return data;\n  const translated = {\n    ...data\n  };\n  if (translated.type) {\n    va⟪ 16632 characters skipped ⟫/ Esporta sia come default che come named export\nexport { mealService, MealServiceError };\nexport default mealService;","map":{"version":3,"names":["axiosInstance","MEAL_TYPES","breakfast","lunch","dinner","aperitif","MEAL_STATUS","upcoming","ongoing","completed","cancelled","LANGUAGES","it","en","es","fr","de","translateToItalian","data","translated","type","status","language","translateToEnglish","_Object$entries$find","englishType","Object","entries","find","_","value","_Object$entries$find2","englishStatus","_Object$entries$find3","englishLang","MealServiceError","Error","constructor","message","code","name","handleError","error","console","response","_error$response$data","_error$response$data2","headers","request","createMeal","mealData","_mealData$settings$al","_mealData$settings","_mealData$settings$re","_mealData$settings2","_mealData$settings$vi","_mealData$settings3","_mealData$settings$ba","_mealData$settings4","_axiosInstance$defaul","_axiosInstance$defaul2","_axiosInstance$defaul3","log","title","date","maxParticipants","description","topics","settings","token","localStorage","getItem","requiredFields","missingFields","filter","field","Array","isArray","length","tri⟪ 716 characters skipped ⟫s/mealService.js"],"sourcesContent":["import axiosInstance from '../config/axiosConfig';\n\n// Mappatura dei valori in italiano\nconst MEAL_TYPES = {\n  breakfast: 'colazione',\n  lunch: 'pranzo',\n  dinner: 'cena',\n  aperitif: 'aperitivo'\n};\n\nconst MEAL_STATUS = {\n  upcoming: 'in arrivo',\n  ongoing: 'in corso',\n  completed: 'completato',\n  cancelled: 'cancellato'\n};\n\nconst LANGUAGES = {\n  it: 'italiano',\n  en: 'inglese',\n  es: 'spagnolo',\n  fr: 'francese',\n  de: 'tedesco'\n};\n\n// Funzione per convertire i valori in italiano\nconst translateToItalian = (data) => {\n  if (!data) return data;\n  \n  const translated = { ...data };\n  \n  if (translated.type) {\n    translated.type = MEAL_TYPES[translated.type] || translated.type;\n  }\n  \n  if (translated.status) {\n    translated.status = MEAL_STATUS[translated.status] || translated.status;\n  }\n  \n  if (translated.language) {\n    translated.language = LANGUAGES[translated.language] || translated.language;\n  }\n  \n  return translated;\n};\n\n// Funzione per convertire i valori in inglese\nconst translateToEnglish = (data) => {\n  if (!data) return data;\n  \n  const translated = { ...data };\n  \n  if (transl

FRONTEND/client/node_modules/.cache/babel-loader/94904b45b2e6029334e109565e394f8c830cb081edd80da7724aa0e35bdaba34.json:
  1: ⟪ 840 characters skipped ⟫ _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this);\n  }\n  const getMealTypeBadge = type => {\n    const variants = {\n      breakfast: 'info',\n      lunch: 'success',\n      dinner: 'primary',\n      snack: 'warning'\n    };\n    return /*#__PURE__*/_jsxDEV(Badge, {\n      bg: variants[type] || 'secondary',\n      children: type\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 12\n    }, this);\n  };\n  const getLanguageBadge = language => {\n    return /*#__PURE__*/_jsxDEV(Badge, {\n      bg: \"light\",\n      text: \"dark\",\n      children: language\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 12\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"meals-list\",\n    children: meals.map(meal => {\n      var _meal$participants, _userMeals$hosted, _userMeals$joined;\n      return /*#__PURE__*/_jsxDEV(Link, {\n        to: `/meals/${meal._id}`,\n        className: `meal-list-item-link${selectedMealId === meal._id ? ' selected' : ''}`,\n        style: {\n          textDecoration: 'none',\n          color: 'inherit'\n        },⟪ 4427 characters skipped ⟫st","meals","userMeals","onMealSelect","selectedMealId","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","getMealTypeBadge","type","variants","breakfast","lunch","dinner","snack","bg","getLanguageBadge","language","text","map","meal","_meal$participants","_userMeals$hosted","_userMeals$joined","to","_id","style","textDecoration","color","Body","Title","title","Text","Date","date","toLocaleString","participants","maxParticipants","hosted","includes","joined","_c","$RefreshReg$"],"sources":["/Users/ele/TableTalk Claude/FRONTEND/client/src/pages/Meals/MealsList.js"],"sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Card, Badge } from 'react-bootstrap';\nimport './MealsList.css';\n\nconst MealsList = ({ meals, userMeals, onMealSelect, selectedMealId }) => {\n  if (!meals || meals.length === 0) {\n    return (\n      <div className=\"no-meals text-center p-4\">\n        <p className=\"text-muted\">Nessun pasto trovato.</p>\n      </div>\n    );\n  }\n\n  const getMealTypeBadge = (type) => {\n    const variants = {\n      breakfast: 'info',\n      lunch: 'success',\n      dinner: 'primary',\n      snack: 'warning'\n    };\n    return <Badge bg={variants[type] || 'secondary'}>{type}</Badge>;\n  };\n\n  const getLanguageBadge = (language) => {\n    return <Badge bg=\"light\" text=\"dark\">{language}</Badge>;\n  };\n\n  return (\n    <div className=\"meals-list\">\n      {meals.map(meal => (\n        <Link\n          to={`/meals/${meal._id}`}\n          key={meal._id}\n          className={`meal-list-item-link${selectedMealId === meal._id ? ' selected' : ''}`}\n          style={{ textDecoration: 'none', color: 'inherit' }}\n        >\n          <Card className=\"meal-card mb-3\">\n            <Card.Body>\n              <Card.Title className=\"d-flex justify-content-between align-items-center\">\n                <span>{meal.title}</span>\n                <div>\n                  {getMealTypeBadge(meal.type)}\n                  {' '}\n                  {getLanguageBadge(meal.language)}\n                </div>\n              </Card.Title>\n              <Card

FRONTEND/client/node_modules/.cache/babel-loader/98543b74a74df54dfc30217a1c4d6fa2ee9935fe054bb4088fb117a064b41014.json:
  1: {"ast":null,"code":"import axiosInstance from '../config/axiosConfig';\n\n// Mappatura dei valori in italiano\nconst MEAL_TYPES = {\n  breakfast: 'colazione',\n  lunch: 'pranzo',\n  dinner: 'cena',\n  aperitif: 'aperitivo'\n};\nconst MEAL_STATUS = {\n  upcoming: 'in arrivo',\n  ongoing: 'in corso',\n  completed: 'completato',\n  cancelled: 'cancellato'\n};\nconst LANGUAGES = {\n  it: 'italiano',\n  en: 'inglese',\n  es: 'spagnolo',\n  fr: 'francese',\n  de: 'tedesco',\n  zh: 'cinese',\n  ar: 'arabo'\n};\nconst VALID_LANGUAGES = ['Italiano', 'English', 'Español', 'Français', 'Deutsch', '中文', 'العربية'];\n\n// Funzione per convertire i valori in italiano\nconst translateToItalian = data => {\n  if (!data) return data;\n  const translated = {\n    ...data\n  };\n  if (translated.type) {\n    translated.type = MEAL_TYPES[translated.type] || translated.type;\n  }\n  if (translated.status) {\n    translated.status = MEAL_STATUS[translated.status] || translated.status;\n  }\n  if (translated.language) {\n    translated.language = LANGUAGES[translated.language] || translated.language;\n  }\n  return translated;\n};\n\n// Funzione per convertire i valori in inglese\nconst ⟪ 15988 characters skipped ⟫/ Esporta sia come default che come named export\nexport { mealService, MealServiceError };\nexport default mealService;","map":{"version":3,"names":["axiosInstance","MEAL_TYPES","breakfast","lunch","dinner","aperitif","MEAL_STATUS","upcoming","ongoing","completed","cancelled","LANGUAGES","it","en","es","fr","de","zh","ar","VALID_LANGUAGES","translateToItalian","data","translated","type","status","language","translateToEnglish","_Object$entries$find","englishType","Object","entries","find","_","value","_Object$entries$find2","englishStatus","_Object$entries$find3","englishLang","MealServiceError","Error","constructor","message","code","name","handleError","error","console","response","_error$response$data","_error$response$data2","headers","request","createMeal","mealData","_mealData$settings$al","_mealData$settings","_mealData$settings$re","_mealData$settings2","_mealData$settings$vi","_mealData$settings3","_mealData$settings$ba","_mealData$settings4","_axiosInstance$defaul","_axiosInstance$defaul2","_axiosInstance$defaul3","log","title","date","maxParticipants","description","topics","settings","token","localStorage","getItem","requiredFields","missingFields","filter","field","Ar⟪ 706 characters skipped ⟫s/mealService.js"],"sourcesContent":["import axiosInstance from '../config/axiosConfig';\n\n// Mappatura dei valori in italiano\nconst MEAL_TYPES = {\n  breakfast: 'colazione',\n  lunch: 'pranzo',\n  dinner: 'cena',\n  aperitif: 'aperitivo'\n};\n\nconst MEAL_STATUS = {\n  upcoming: 'in arrivo',\n  ongoing: 'in corso',\n  completed: 'completato',\n  cancelled: 'cancellato'\n};\n\nconst LANGUAGES = {\n  it: 'italiano',\n  en: 'inglese',\n  es: 'spagnolo',\n  fr: 'francese',\n  de: 'tedesco',\n  zh: 'cinese',\n  ar: 'arabo'\n};\n\nconst VALID_LANGUAGES = ['Italiano', 'English', 'Español', 'Français', 'Deutsch', '中文', 'العربية'];\n\n// Funzione per convertire i valori in italiano\nconst translateToItalian = (data) => {\n  if (!data) return data;\n  \n  const translated = { ...data };\n  \n  if (translated.type) {\n    translated.type = MEAL_TYPES[translated.type] || translated.type;\n  }\n  \n  if (translated.status) {\n    translated.status = MEAL_STATUS[translated.status] || translated.status;\n  }\n  \n  if (translated.language) {\n    translated.language = LANGUAGES[translated.language] || translated.language;\n  }\n  \n  return translated;\n};\n\n// Funzione per convertire i valor

FRONTEND/client/node_modules/.cache/babel-loader/138492f6e9c201324651f10584a470951991740343aab69feb7bcf00d0759706.json:
  1: {"ast":null,"code":"import axiosInstance from '../config/axiosConfig';\n\n// Mappatura dei valori in italiano\nconst MEAL_TYPES = {\n  breakfast: 'colazione',\n  lunch: 'pranzo',\n  dinner: 'cena',\n  aperitif: 'aperitivo'\n};\nconst MEAL_STATUS = {\n  upcoming: 'in arrivo',\n  ongoing: 'in corso',\n  completed: 'completato',\n  cancelled: 'cancellato'\n};\nconst LANGUAGES = {\n  it: 'italiano',\n  en: 'inglese',\n  es: 'spagnolo',\n  fr: 'francese',\n  de: 'tedesco'\n};\n\n// Funzione per convertire i valori in italiano\nconst translateToItalian = data => {\n  if (!data) return data;\n  const translated = {\n    ...data\n  };\n  if (translated.type) {\n    translated.type = MEAL_TYPES[translated.type] || translated.type;\n  }\n  if (translated.status) {\n    translated.status = MEAL_STATUS[translated.status] || translated.status;\n  }\n  if (translated.language) {\n    translated.language = LANGUAGES[translated.language] || translated.language;\n  }\n  return translated;\n};\n\n// Funzione per convertire i valori in inglese\nconst translateToEnglish = data => {\n  if (!data) return data;\n  const translated = {\n    ...data\n  };\n  if (translated.type) {\n    va⟪ 16113 characters skipped ⟫/ Esporta sia come default che come named export\nexport { mealService, MealServiceError };\nexport default mealService;","map":{"version":3,"names":["axiosInstance","MEAL_TYPES","breakfast","lunch","dinner","aperitif","MEAL_STATUS","upcoming","ongoing","completed","cancelled","LANGUAGES","it","en","es","fr","de","translateToItalian","data","translated","type","status","language","translateToEnglish","_Object$entries$find","englishType","Object","entries","find","_","value","_Object$entries$find2","englishStatus","_Object$entries$find3","englishLang","MealServiceError","Error","constructor","message","code","name","handleError","error","console","response","_error$response$data","_error$response$data2","headers","request","createMeal","mealData","_mealData$settings$al","_mealData$settings","_mealData$settings$re","_mealData$settings2","_mealData$settings$vi","_mealData$settings3","_mealData$settings$ba","_mealData$settings4","_axiosInstance$defaul","_axiosInstance$defaul2","_axiosInstance$defaul3","log","title","date","maxParticipants","description","topics","settings","token","localStorage","getItem","requiredFields","missingFields","filter","field","Array","isArray","length","tri⟪ 667 characters skipped ⟫s/mealService.js"],"sourcesContent":["import axiosInstance from '../config/axiosConfig';\n\n// Mappatura dei valori in italiano\nconst MEAL_TYPES = {\n  breakfast: 'colazione',\n  lunch: 'pranzo',\n  dinner: 'cena',\n  aperitif: 'aperitivo'\n};\n\nconst MEAL_STATUS = {\n  upcoming: 'in arrivo',\n  ongoing: 'in corso',\n  completed: 'completato',\n  cancelled: 'cancellato'\n};\n\nconst LANGUAGES = {\n  it: 'italiano',\n  en: 'inglese',\n  es: 'spagnolo',\n  fr: 'francese',\n  de: 'tedesco'\n};\n\n// Funzione per convertire i valori in italiano\nconst translateToItalian = (data) => {\n  if (!data) return data;\n  \n  const translated = { ...data };\n  \n  if (translated.type) {\n    translated.type = MEAL_TYPES[translated.type] || translated.type;\n  }\n  \n  if (translated.status) {\n    translated.status = MEAL_STATUS[translated.status] || translated.status;\n  }\n  \n  if (translated.language) {\n    translated.language = LANGUAGES[translated.language] || translated.language;\n  }\n  \n  return translated;\n};\n\n// Funzione per convertire i valori in inglese\nconst translateToEnglish = (data) => {\n  if (!data) return data;\n  \n  const translated = { ...data };\n  \n  if (transl

FRONTEND/client/node_modules/.cache/babel-loader/0884432f0a5ef014a48bbec6e216acd62bf91ee015b200118ebdf7b16adc3604.json:
  1: {"ast":null,"code":"import axiosInstance from '../config/axiosConfig';\n\n// Mappatura dei valori in italiano\nconst MEAL_TYPES = {\n  breakfast: 'colazione',\n  lunch: 'pranzo',\n  dinner: 'cena',\n  aperitif: 'aperitivo'\n};\nconst MEAL_STATUS = {\n  upcoming: 'in arrivo',\n  ongoing: 'in corso',\n  completed: 'completato',\n  cancelled: 'cancellato'\n};\nconst LANGUAGES = {\n  it: 'italiano',\n  en: 'inglese',\n  es: 'spagnolo',\n  fr: 'francese',\n  de: 'tedesco'\n};\n\n// Funzione per convertire i valori in italiano\nconst translateToItalian = data => {\n  if (!data) return data;\n  const translated = {\n    ...data\n  };\n  if (translated.type) {\n    translated.type = MEAL_TYPES[translated.type] || translated.type;\n  }\n  if (translated.status) {\n    translated.status = MEAL_STATUS[translated.status] || translated.status;\n  }\n  if (translated.language) {\n    translated.language = LANGUAGES[translated.language] || translated.language;\n  }\n  return translated;\n};\n\n// Funzione per convertire i valori in inglese\nconst translateToEnglish = data => {\n  if (!data) return data;\n  const translated = {\n    ...data\n  };\n  if (translated.type) {\n    va⟪ 16114 characters skipped ⟫/ Esporta sia come default che come named export\nexport { mealService, MealServiceError };\nexport default mealService;","map":{"version":3,"names":["axiosInstance","MEAL_TYPES","breakfast","lunch","dinner","aperitif","MEAL_STATUS","upcoming","ongoing","completed","cancelled","LANGUAGES","it","en","es","fr","de","translateToItalian","data","translated","type","status","language","translateToEnglish","_Object$entries$find","englishType","Object","entries","find","_","value","_Object$entries$find2","englishStatus","_Object$entries$find3","englishLang","MealServiceError","Error","constructor","message","code","name","handleError","error","console","response","_error$response$data","_error$response$data2","headers","request","createMeal","mealData","_mealData$settings$al","_mealData$settings","_mealData$settings$re","_mealData$settings2","_mealData$settings$vi","_mealData$settings3","_mealData$settings$ba","_mealData$settings4","_axiosInstance$defaul","_axiosInstance$defaul2","_axiosInstance$defaul3","log","title","date","maxParticipants","description","topics","settings","token","localStorage","getItem","requiredFields","missingFields","filter","field","Array","isArray","length","tri⟪ 667 characters skipped ⟫s/mealService.js"],"sourcesContent":["import axiosInstance from '../config/axiosConfig';\n\n// Mappatura dei valori in italiano\nconst MEAL_TYPES = {\n  breakfast: 'colazione',\n  lunch: 'pranzo',\n  dinner: 'cena',\n  aperitif: 'aperitivo'\n};\n\nconst MEAL_STATUS = {\n  upcoming: 'in arrivo',\n  ongoing: 'in corso',\n  completed: 'completato',\n  cancelled: 'cancellato'\n};\n\nconst LANGUAGES = {\n  it: 'italiano',\n  en: 'inglese',\n  es: 'spagnolo',\n  fr: 'francese',\n  de: 'tedesco'\n};\n\n// Funzione per convertire i valori in italiano\nconst translateToItalian = (data) => {\n  if (!data) return data;\n  \n  const translated = { ...data };\n  \n  if (translated.type) {\n    translated.type = MEAL_TYPES[translated.type] || translated.type;\n  }\n  \n  if (translated.status) {\n    translated.status = MEAL_STATUS[translated.status] || translated.status;\n  }\n  \n  if (translated.language) {\n    translated.language = LANGUAGES[translated.language] || translated.language;\n  }\n  \n  return translated;\n};\n\n// Funzione per convertire i valori in inglese\nconst translateToEnglish = (data) => {\n  if (!data) return data;\n  \n  const translated = { ...data };\n  \n  if (transl

FRONTEND/client/node_modules/.cache/babel-loader/8945083d3d619cf32f3682b10bb5c97d9805abf959d7365d0e409fa61092e081.json:
  1: {"ast":null,"code":"import axiosInstance from '../config/axiosConfig';\n\n// Mappatura dei valori in italiano\nconst MEAL_TYPES = {\n  breakfast: 'colazione',\n  lunch: 'pranzo',\n  dinner: 'cena',\n  aperitif: 'aperitivo'\n};\nconst MEAL_STATUS = {\n  upcoming: 'in arrivo',\n  ongoing: 'in corso',\n  completed: 'completato',\n  cancelled: 'cancellato'\n};\nconst LANGUAGES = {\n  it: 'italiano',\n  en: 'inglese',\n  es: 'spagnolo',\n  fr: 'francese',\n  de: 'tedesco'\n};\n\n// Funzione per convertire i valori in italiano\nconst translateToItalian = data => {\n  if (!data) return data;\n  const translated = {\n    ...data\n  };\n  if (translated.type) {\n    translated.type = MEAL_TYPES[translated.type] || translated.type;\n  }\n  if (translated.status) {\n    translated.status = MEAL_STATUS[translated.status] || translated.status;\n  }\n  if (translated.language) {\n    translated.language = LANGUAGES[translated.language] || translated.language;\n  }\n  return translated;\n};\n\n// Funzione per convertire i valori in inglese\nconst translateToEnglish = data => {\n  if (!data) return data;\n  const translated = {\n    ...data\n  };\n  if (translated.type) {\n    va⟪ 14870 characters skipped ⟫/ Esporta sia come default che come named export\nexport { mealService, MealServiceError };\nexport default mealService;","map":{"version":3,"names":["axiosInstance","MEAL_TYPES","breakfast","lunch","dinner","aperitif","MEAL_STATUS","upcoming","ongoing","completed","cancelled","LANGUAGES","it","en","es","fr","de","translateToItalian","data","translated","type","status","language","translateToEnglish","_Object$entries$find","englishType","Object","entries","find","_","value","_Object$entries$find2","englishStatus","_Object$entries$find3","englishLang","MealServiceError","Error","constructor","message","code","name","handleError","error","console","response","_error$response$data","_error$response$data2","headers","request","createMeal","mealData","_mealData$settings$al","_mealData$settings","_mealData$settings$re","_mealData$settings2","_mealData$settings$vi","_mealData$settings3","_mealData$settings$ba","_mealData$settings4","_axiosInstance$defaul","_axiosInstance$defaul2","_axiosInstance$defaul3","token","localStorage","getItem","log","title","date","maxParticipants","description","topics","settings","requiredFields","missingFields","filter","field","Array","isArray","length","tri⟪ 667 characters skipped ⟫s/mealService.js"],"sourcesContent":["import axiosInstance from '../config/axiosConfig';\n\n// Mappatura dei valori in italiano\nconst MEAL_TYPES = {\n  breakfast: 'colazione',\n  lunch: 'pranzo',\n  dinner: 'cena',\n  aperitif: 'aperitivo'\n};\n\nconst MEAL_STATUS = {\n  upcoming: 'in arrivo',\n  ongoing: 'in corso',\n  completed: 'completato',\n  cancelled: 'cancellato'\n};\n\nconst LANGUAGES = {\n  it: 'italiano',\n  en: 'inglese',\n  es: 'spagnolo',\n  fr: 'francese',\n  de: 'tedesco'\n};\n\n// Funzione per convertire i valori in italiano\nconst translateToItalian = (data) => {\n  if (!data) return data;\n  \n  const translated = { ...data };\n  \n  if (translated.type) {\n    translated.type = MEAL_TYPES[translated.type] || translated.type;\n  }\n  \n  if (translated.status) {\n    translated.status = MEAL_STATUS[translated.status] || translated.status;\n  }\n  \n  if (translated.language) {\n    translated.language = LANGUAGES[translated.language] || translated.language;\n  }\n  \n  return translated;\n};\n\n// Funzione per convertire i valori in inglese\nconst translateToEnglish = (data) => {\n  if (!data) return data;\n  \n  const translated = { ...data };\n  \n  if (transl

FRONTEND/client/node_modules/.cache/babel-loader/063298764697ba7e869b0b14c9403fe253b811f3b6c6a09b9cde9aad9ef040b7.json:
  1: ⟪ 553 characters skipped ⟫ent as _Fragment } from \"react/jsx-dev-runtime\";\nconst CreateMealForm = ({\n  onMealCreated,\n  onCancel\n}) => {\n  _s();\n  const [formData, setFormData] = useState({\n    title: '',\n    type: 'dinner',\n    date: new Date(new Date().setHours(new Date().getHours() + 2)),\n    maxParticipants: 4,\n    description: '',\n    language: 'Italiano',\n    topics: [],\n    duration: 120,\n    // Durata predefinita di 2 ore\n    settings: {\n      allowLateJoin: true,\n      requireApproval: false,\n      recordingEnabled: false\n    }\n  });\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [isFormValid, setIsFormValid] = useState(false);\n\n  // Validazione del form\n  useEffect(() => {\n    const validateForm = () => {\n      const {\n        title,\n        type,\n        date,\n        maxParticipants,\n        description,\n        language,\n        topics\n      } = formData;\n      const validations = {\n        title: title.trim().length >= 3,\n        type: ['breakfast', 'lunch', 'dinner', 'snack'].includes(type),\n        date: date instanceof Date && date > new Date(),\n        maxParticipants: maxParticipants >= 2 && maxParticipants <= 10,\n        description: description.trim().length >= 10,\n        language: language.trim().length >= 2,\n        topics: topics.length >= 1\n      };\n\n      // Debug delle validazioni\n      if (process.env.NODE_ENV === 'development') {\n        console.log('🔍 Form validations:', validations);\n      }\n      setIsFormValid(Object.values(validations).every(v => v === true));\n    };\n    validateForm();\n  }, [formData]);\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  const handleDateChange = date => {\n    setFormData(prev => ({\n      ...prev,\n      date: date\n    }));\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!isFormValid) {\n      const errorMessage = 'Per f⟪ 6720 characters skipped ⟫              fileName: _jsxFileName,\n                  lineNumber: 194,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"dinner\",\n                  children: \"\\uD83C\\uDF77 Cena\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 195,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"snack\",\n                  children: \"\\uD83C\\uDF6A Spuntino\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 196,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 187,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: ⟪ 22590 characters skipped ⟫s/CreateMealForm.css';\nimport { toast } from 'react-hot-toast';\n\nconst CreateMealForm = ({ onMealCreated, onCancel }) => {\n  const [formData, setFormData] = useState({\n    title: '',\n    type: 'dinner',\n    date: new Date(new Date().setHours(new Date().getHours() + 2)),\n    maxParticipants: 4,\n    description: '',\n    language: 'Italiano',\n    topics: [],\n    duration: 120, // Durata predefinita di 2 ore\n    settings: {\n      allowLateJoin: true,\n      requireApproval: false,\n      recordingEnabled: false\n    }\n  });\n  \n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [isFormValid, setIsFormValid] = useState(false);\n  \n  // Validazione del form\n  useEffect(() => {\n    const validateForm = () => {\n      const { title, type, date, maxParticipants, description, language, topics } = formData;\n      \n      const validations = {\n        title: title.trim().length >= 3,\n        type: ['breakfast', 'lunch', 'dinner', 'snack'].includes(type),\n        date: date instanceof Date && date > new Date(),\n        maxParticipants: maxParticipants >= 2 && maxParticipants <= 10,\n        description: description.trim().length >= 10,\n        language: language.trim().length >= 2,\n        topics: topics.length >= 1\n      };\n\n      // Debug delle validazioni\n      if (process.env.NODE_ENV === 'development') {\n        console.log('🔍 Form validations:', validations);\n      }\n      \n      setIsFormValid(Object.values(validations).every(v => v === true));\n    };\n    \n    validateForm();\n  }, [formData]);\n  \n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n  };\n  \n  const handleDateChange = (date) => {\n    setFormData(prev => ({ ...prev, date: date }));\n  };\n  \n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!isFormValid) {\n      const errorMessage = 'Per favore, compila correttame⟪ 4152 characters skipped ⟫     required\n                >\n                  <option value=\"breakfast\">🥐 Colazione</option>\n                  <option value=\"lunch\">🍽️ Pranzo</option>\n                  <option value=\"dinner\">🍷 Cena</option>\n                  <option value=\"snack\">🍪 Spuntino</option>\n                </Form.Select>\n              </Form.Group>\n            </Col>\n            \n            <Col md={6}>\n              <Form.Group>\n                <Form.Label>Lingua principale*</Form.Label>\n                <Form.Select\n                  name=\"language\"\n                  value={formData.language}\n                  onChange={handleChange}\n                  required\n                >\n                  <option value=\"Italiano\">🇮🇹 Italiano</option>\n                  <option value=\"English\">🇬🇧 Inglese</option>\n                  <option value=\"Español\">🇪🇸 Spagnolo</option>\n                  <option value=\"Français\">🇫🇷 Francese</option>\n                  <option value=\"Deutsch\">🇩🇪 Tedesco</option>\n                  <option value=\"中文\">🇨🇳 Cinese</option>\n                  <option value=\"日本語\">🇯🇵 Giapponese</option>\n                  <option valu

FRONTEND/client/node_modules/.cache/babel-loader/a9a071259bd155e2d07bec04b00bf418cc1408ab80e4d0e9375eb1274798692a.json:
  1: {"ast":null,"code":"import axiosInstance from '../config/axiosConfig';\n\n// Mappatura dei valori in italiano\nconst MEAL_TYPES = {\n  breakfast: 'colazione',\n  lunch: 'pranzo',\n  dinner: 'cena',\n  aperitif: 'aperitivo'\n};\nconst MEAL_STATUS = {\n  upcoming: 'in arrivo',\n  ongoing: 'in corso',\n  completed: 'completato',\n  cancelled: 'cancellato'\n};\nconst LANGUAGES = {\n  it: 'italiano',\n  en: 'inglese',\n  es: 'spagnolo',\n  fr: 'francese',\n  de: 'tedesco'\n};\n\n// Funzione per convertire i valori in italiano\nconst translateToItalian = data => {\n  if (!data) return data;\n  const translated = {\n    ...data\n  };\n  if (translated.type) {\n    translated.type = MEAL_TYPES[translated.type] || translated.type;\n  }\n  if (translated.status) {\n    translated.status = MEAL_STATUS[translated.status] || translated.status;\n  }\n  if (translated.language) {\n    translated.language = LANGUAGES[translated.language] || translated.language;\n  }\n  return translated;\n};\n\n// Funzione per convertire i valori in inglese\nconst translateToEnglish = data => {\n  if (!data) return data;\n  const translated = {\n    ...data\n  };\n  if (translated.type) {\n    va⟪ 17305 characters skipped ⟫/ Esporta sia come default che come named export\nexport { mealService, MealServiceError };\nexport default mealService;","map":{"version":3,"names":["axiosInstance","MEAL_TYPES","breakfast","lunch","dinner","aperitif","MEAL_STATUS","upcoming","ongoing","completed","cancelled","LANGUAGES","it","en","es","fr","de","translateToItalian","data","translated","type","status","language","translateToEnglish","_Object$entries$find","englishType","Object","entries","find","_","value","_Object$entries$find2","englishStatus","_Object$entries$find3","englishLang","MealServiceError","Error","constructor","message","code","name","handleError","error","console","response","_error$response$data","_error$response$data2","headers","request","createMeal","mealData","_mealData$settings$al","_mealData$settings","_mealData$settings$re","_mealData$settings2","_mealData$settings$vi","_mealData$settings3","_mealData$settings$ba","_mealData$settings4","_axiosInstance$defaul","_axiosInstance$defaul2","_axiosInstance$defaul3","log","title","date","maxParticipants","description","topics","settings","token","localStorage","getItem","requiredFields","missingFields","filter","field","Array","isArray","length","tri⟪ 764 characters skipped ⟫s/mealService.js"],"sourcesContent":["import axiosInstance from '../config/axiosConfig';\n\n// Mappatura dei valori in italiano\nconst MEAL_TYPES = {\n  breakfast: 'colazione',\n  lunch: 'pranzo',\n  dinner: 'cena',\n  aperitif: 'aperitivo'\n};\n\nconst MEAL_STATUS = {\n  upcoming: 'in arrivo',\n  ongoing: 'in corso',\n  completed: 'completato',\n  cancelled: 'cancellato'\n};\n\nconst LANGUAGES = {\n  it: 'italiano',\n  en: 'inglese',\n  es: 'spagnolo',\n  fr: 'francese',\n  de: 'tedesco'\n};\n\n// Funzione per convertire i valori in italiano\nconst translateToItalian = (data) => {\n  if (!data) return data;\n  \n  const translated = { ...data };\n  \n  if (translated.type) {\n    translated.type = MEAL_TYPES[translated.type] || translated.type;\n  }\n  \n  if (translated.status) {\n    translated.status = MEAL_STATUS[translated.status] || translated.status;\n  }\n  \n  if (translated.language) {\n    translated.language = LANGUAGES[translated.language] || translated.language;\n  }\n  \n  return translated;\n};\n\n// Funzione per convertire i valori in inglese\nconst translateToEnglish = (data) => {\n  if (!data) return data;\n  \n  const translated = { ...data };\n  \n  if (transl

FRONTEND/client/node_modules/.cache/babel-loader/a0363e3c92c414730718d73f97b3268b98fa8835593befc334393aa1005018fd.json:
  1: ⟪ 8292 characters skipped ⟫     }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"dinner\",\n            children: \"Cena\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"aperitif\",\n            children: \"Aperitivo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        className: \"mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Lingua\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 11\n        }, this)⟪ 13941 characters skipped ⟫>\n            <option value=\"\">Seleziona tipo</option>\n            <option value=\"breakfast\">Colazione</option>\n            <option value=\"lunch\">Pranzo</option>\n            <option value=\"dinner\">Cena</option>\n            <option value=\"aperitif\">Aperitivo</option>\n          </Form.Select>\n        </Form.Group>\n\n        {/* Lingua */}\n        <Form.Group className=\"mb-3\">\n          <Form.Label>Lingua</Form.Label>\n          <Form.Select\n            name=\"language\"\n            value={formData.language}\n            onChange={handleChange}\n            required\n          >\n            <option value=\"\">Seleziona lingua</option>\n            <option value=\"Italiano\">Italiano</option>\n            <option value=\"English\">Inglese</option>\n            <option value=\"Español\">Spagnolo</option>\n            <option value=\"Français\">Francese</option>\n            <option value=\"Deutsch\">Tedesco</option>\n          </Form.Select>\n        </Form.Group>\n\n        {/* Argomenti */}\n        <Form.Group className=\"mb-3\">\n          <Form.Label>Argomenti (max 5)</Form.Label>\n          <Form.Control\n            type=\"text\"\n            name=\"topic

FRONTEND/client/node_modules/.cache/babel-loader/a8128bf6654b693c8a0b1db0e9157d25ad56d82eb88ba33a47834b081c679987.json:
  1: ⟪ 2328 characters skipped ⟫  text: 'Colazione',\n        variant: 'info',\n        icon: 'fa-coffee'\n      },\n      lunch: {\n        text: 'Pranzo',\n        variant: 'success',\n        icon: 'fa-utensils'\n      },\n      dinner: {\n        text: 'Cena',\n        variant: 'primary',\n        icon: 'fa-moon'\n      },\n      snack: {\n        text: 'Spuntino',\n        variant: 'warning',\n        icon: 'fa-cookie'\n      }\n    };\n    const {\n      text,\n      variant,\n      icon\n    } = types[type] || {\n      text: type,\n      variant: 'secondary',\n      icon: 'fa-utensils'\n    };\n    return /*#__PURE__*/_jsxDEV(Badge, {\n      bg: variant,\n      className: \"d-flex align-items-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n        className: `fas ${icon} me-1`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), text]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this);\n  };\n  const getLanguageBadge = language => {\n    const languages = {\n      it: {\n        text: 'Italiano',\n        icon: 'fa-flag'\n      },\n      en: {\n        text: '⟪ 11578 characters skipped ⟫minute","toLocaleString","day","month","year","getMealStatus","meal","mealDate","endDate","setHours","getHours","status","text","variant","icon","getMealTypeBadge","type","types","breakfast","lunch","dinner","snack","bg","className","children","fileName","_jsxFileName","lineNumber","columnNumber","getLanguageBadge","language","languages","it","en","es","fr","de","animation","role","length","div","initial","opacity","y","animate","transition","duration","map","index","_meal$participants","_userMeals$hosted","_userMeals$joined","delay","to","_id","style","textDecoration","color","onClick","title","Body","Title","Text","participants","maxParticipants","hosted","includes","joined","_c","$RefreshReg$"],"sources":["/Users/ele/TableTalk Claude/FRONTEND/client/src/pages/Meals/MealsList.js"],"sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Card, Badge, Spinner, Alert } from 'react-bootstrap';\nimport { motion } from 'framer-motion';\nimport './MealsList.css';\n\nconst MealsList = ({ meals, userMeals, onMealSelect, selectedMealId, loading, error }) => {\n  // Funzione per formattare la data\n  const formatDate = (dateString) => {\n    const da⟪ 1518 characters skipped ⟫Badge = (type) => {\n    const types = {\n      breakfast: { text: 'Colazione', variant: 'info', icon: 'fa-coffee' },\n      lunch: { text: 'Pranzo', variant: 'success', icon: 'fa-utensils' },\n      dinner: { text: 'Cena', variant: 'primary', icon: 'fa-moon' },\n      snack: { text: 'Spuntino', variant: 'warning', icon: 'fa-cookie' }\n    };\n    const { text, variant, icon } = types[type] || { text: type, variant: 'secondary', icon: 'fa-utensils' };\n    return (\n      <Badge bg={variant} className=\"d-flex align-items-center\">\n        <i className={`fas ${icon} me-1`}></i>\n        {text}\n      </Badge>\n    );\n  };\n\n  const getLanguageBadge = (language) => {\n    const languages = {\n      it: { text: 'Italiano', icon: 'fa-flag' },\n      en: { text: 'Inglese', icon: 'fa-flag-usa' },\n      es: { text: 'Spagnolo', icon: 'fa-flag' },\n      fr: { text: 'Francese', icon: 'fa-flag' },\n      de: { text: 'Tedesco', icon: 'fa-flag' }\n    };\n    const { text, icon } = languages[language] || { text: language, icon: 'fa-language' };\n    return (\n      <Badge bg=\"light\" text=\"dark\" className=\"d-flex align-items-center\">\n        <i className={`fas ${icon} me-1`}></i>\n 

FRONTEND/client/node_modules/.cache/babel-loader/aac785f14940bd8c95d24e700218414eeeacc2a3b5f4e44f0694b4b7a26b17b9.json:
  1: ⟪ 709 characters skipped ⟫ateString('it-IT', options);\n  };\n\n  // Ottieni il tipo di pasto in italiano\n  const getMealTypeText = type => {\n    const types = {\n      breakfast: 'Colazione',\n      lunch: 'Pranzo',\n      dinner: 'Cena',\n      snack: 'Spuntino'\n    };\n    return types[type] || type;\n  };\n\n  // Restituisce un colore basato sul tipo di pasto\n  const getMealTypeColor = type => {\n    const colors = {\n      breakfast: '#ffc107',\n      // Giallo per colazione\n      lunch: '#28a745',\n      // Verde per pranzo\n      dinner: '#6f42c1',\n      // Viola per cena\n      snack: '#17a2b8' // Azzurro per spuntino\n    };\n    return colors[type] || '#007bff'; // Blu predefinito\n  };\n\n  // Funzione per renderizzare la card di un pasto\n  const renderMealCard = meal => {\n    var _meal$participants;\n    return /*#__PURE__*/_jsxDEV(Link, {\n      to: `/meals/${meal._id}`,\n      className: \"meal-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"meal-type-indicator\",\n        style: {\n          backgroundColor: getMealTypeColor(meal.type)\n        },\n        children: getMealTypeText(meal.type)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"meal-title\",\n        children: meal.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\⟪ 4278 characters skipped ⟫lHistory","createdMeals","participatedMeals","formatDate","dateString","options","day","month","year","hour","minute","Date","toLocaleDateString","getMealTypeText","type","types","breakfast","lunch","dinner","snack","getMealTypeColor","colors","renderMealCard","meal","_meal$participants","to","_id","className","children","style","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","title","date","participants","length","maxParticipants","description","map","_c","$RefreshReg$"],"sources":["/Users/ele/TableTalk Claude/FRONTEND/client/src/pages/Profile/MealHistory.js"],"sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { FaCalendarAlt, FaUsers, FaUtensils } from 'react-icons/fa';\nimport './MealHistory.css';\n\nconst MealHistory = ({ createdMeals = [], participatedMeals = [] }) => {\n  // Formatta la data in un formato leggibile\n  const formatDate = (dateString) => {\n    const options = { \n      day: 'numeric', \n      month: 'long', \n      year: 'numeric', \n      hour: '2-digit', \n      minute: '2-digit' \n    };\n    return new Date(dateString).toLocaleDateString('it-IT', options);\n  };\n\n  // Ottieni il tipo di pasto in italiano\n  const getMealTypeText = (type) => {\n    const types = {\n      breakfast: 'Colazione',\n      lunch: 'Pranzo',\n      dinner: 'Cena',\n      snack: 'Spuntino'\n    };\n    return types[type] || type;\n  };\n\n  // Restituisce un colore basato sul tipo di pasto\n  const getMealTypeColor = (type) => {\n    const colors = {\n      breakfast: '#ffc107', // Giallo per colazione\n      lunch: '#28a745',    // Verde per pranzo\n      dinner: '#6f42c1',   // Viola per cena\n      snack: '#17a2b8'     // Azzurro per spuntino\n    };\n    return colors[type] || '#007bff'; // Blu predefinito\n  };\n\n  // Funzione per renderizzare la card di un pasto\n  const renderMealCard = (meal) => {\n    return (\n      <Link to={`/meals/${meal._id}`} key={meal._id} className=\"meal-card\">\n        <div \n          className=\"meal-type-indicator\"\n          style={{ backgroundColor: getMealTypeColor(meal.type) }}\n        >\n          {getMealTypeText(meal.type)}\n        </div>\n        \n        <h3 className=\"meal-title\">{meal.title}</h3>\n        \n        <div className=\"meal-info\">\n          <span className=\"meal-date\">\n            <FaCalendarAlt /> {formatDate(meal.date)}\n          </span>\n          <span className=\"meal-participants\">\n            <FaUsers /> {meal.participants?.length || 0}/{meal.maxParticipants}\n          </span>\n        </div>\n        \n        <p className=\"meal-description\">{meal.d

FRONTEND/client/node_modules/.cache/babel-loader/b4f1442e44cf16257c75e792981420b8df675df9a240dca254e743935b1e9784.json:
  1: ⟪ 468 characters skipped ⟫;\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CreateMealForm = ({\n  onMealCreated\n}) => {\n  _s();\n  const [formData, setFormData] = useState({\n    title: '',\n    type: 'dinner',\n    // Default a cena\n    dateTime: new Date(new Date().setHours(new Date().getHours() + 2)),\n    // Default a 2 ore da ora\n    maxParticipants: 4,\n    description: '',\n    language: 'Italiano' // Default a italiano\n  });\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [isFormValid, setIsFormValid] = useState(false);\n\n  // Validazione del form\n  useEffect(() => {\n    const validateForm = () => {\n      const {\n        title,\n        type,\n        dateTime,\n        maxParticipants,\n        description,\n        language\n      } = formData;\n      const isTitleValid = title.trim().length > 0 && title.trim().length <= 100;\n      const isTypeValid = ['breakfast', 'lunch', 'dinner'].includes(type);\n      const isDateTimeValid = dateTime instanceof Date && dateTime > new Date();\n      const isMaxParticipantsValid = maxParticipants >= 2 && maxParticipants <= 10;\n      const isDescriptionValid = description.trim().length > 0 && description.trim().length <= 500;\n      const isLanguageValid = language.trim().length > 0;\n      setIsFormValid(isTitleValid && isTypeValid && isDateTimeValid && isMaxParticipantsValid && isDescriptionValid && isLanguageValid);\n    };\n    validateForm();\n  }, [formData]);\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  const handleDateChange = date => {\n    setFormData(prev => ({\n      ...prev,\n      dateTime: date\n    }));\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!isFormValid) return;\n    setLoading(true);\n    setError('');\n    try {\n      // Formatta i dati ⟪ 3953 characters skipped ⟫              fileName: _jsxFileName,\n                  lineNumber: 127,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"dinner\",\n                  children: \"Cena\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 128,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 120,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            md: 6,\n            children: /*#__PURE__*/_jsxDEV(Form.Group, {\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                children: \"Lingua principale*\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n     ⟪ 11948 characters skipped ⟫ker/dist/react-datepicker.css';\nimport '../../styles/CreateMealForm.css';\n\nconst CreateMealForm = ({ onMealCreated }) => {\n  const [formData, setFormData] = useState({\n    title: '',\n    type: 'dinner', // Default a cena\n    dateTime: new Date(new Date().setHours(new Date().getHours() + 2)), // Default a 2 ore da ora\n    maxParticipants: 4,\n    description: '',\n    language: 'Italiano' // Default a italiano\n  });\n  \n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [isFormValid, setIsFormValid] = useState(false);\n  \n  // Validazione del form\n  useEffect(() => {\n    const validateForm = () => {\n      const { title, type, dateTime, maxParticipants, description, language } = formData;\n      \n      const isTitleValid = title.trim().length > 0 && title.trim().length <= 100;\n      const isTypeValid = ['breakfast', 'lunch', 'dinner'].includes(type);\n      const isDateTimeValid = dateTime instanceof Date && dateTime > new Date();\n      const isMaxParticipantsValid = maxParticipants >= 2 && maxParticipants <= 10;\n      const isDescriptionValid = description.trim().length > 0 && description.trim().length <= 500;\n      const isLanguageValid = language.trim().length > 0;\n      \n      setIsFormValid(\n        isTitleValid &&\n        isTypeValid &&\n        isDateTimeValid &&\n        isMaxParticipantsValid &&\n        isDescriptionValid &&\n        isLanguageValid\n      );\n    };\n    \n    validateForm();\n  }, [formData]);\n  \n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n  };\n  \n  const handleDateChange = (date) => {\n    setFormData(prev => ({ ...prev, dateTime: date }));\n  };\n  \n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!isFormValid) return;\n    \n    setLoading(true);\n    setErro⟪ 2037 characters skipped ⟫            required\n                >\n                  <option value=\"breakfast\">Colazione</option>\n                  <option value=\"lunch\">Pranzo</option>\n                  <option value=\"dinner\">Cena</option>\n                </Form.Select>\n              </Form.Group>\n            </Col>\n            \n            <Col md={6}>\n              <Form.Group>\n                <Form.Label>Lingua principale*</Form.Label>\n                <Form.Select\n                  name=\"language\"\n                  value={formData.language}\n                  onChange={handleChange}\n                  required\n                >\n                  <option value=\"Italiano\">Italiano</option>\n                  <option value=\"English\">Inglese</option>\n                  <option value=\"Español\">Spagnolo</option>\n                  <option value=\"Français\">Francese</option>\n                  <option value=\"Deutsch\">Tedesco</option>\n                  <option value=\"中文\">Cinese</option>\n                  <option value=\"日本語\">Giapponese</option>\n                  <option value=\"العربية\">Arabo</option>\n                  <option value=\"Русский\">Russo</option>\n            

FRONTEND/client/node_modules/.cache/babel-loader/b7ee8be1be11f98ce2b801cfd4c02c7ec47b7f3f79346898e2de8ce759212c24.json:
  1: ⟪ 761 characters skipped ⟫l tipo di pasto in italiano\n  const getMealTypeText = type => {\n    switch (type) {\n      case 'breakfast':\n        return 'Colazione';\n      case 'lunch':\n        return 'Pranzo';\n      case 'dinner':\n        return 'Cena';\n      default:\n        return type;\n    }\n  };\n\n  // Restituisce un colore basato sul tipo di pasto\n  const getMealTypeColor = type => {\n    switch (type) {\n      case 'breakfast':\n        return '#ffc107';\n      // Giallo per colazione\n      case 'lunch':\n        return '#28a745';\n      // Verde per pranzo\n      case 'dinner':\n        return '#6f42c1';\n      // Viola per cena\n      default:\n        return '#007bff';\n      // Blu predefinito\n    }\n  };\n\n  // Funzione per renderizzare la card di un pasto\n  const renderMealCard = meal => {\n    return /*#__PURE__*/_jsxDEV(Link, {\n      to: `/meals/${meal._id}`,\n      className: \"meal-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"meal-type-indicator\",\n        style: {\n          backgroundColor: getMealTypeColor(meal.mealType)\n        },\n        children: getMealTypeText(meal.mealType)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"meal-title\",\n        children: meal.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"meal-info\",\n      ⟪ 5215 characters skipped ⟫n\n  // Ottieni il tipo di pasto in italiano\n  const getMealTypeText = (type) => {\n    switch(type) {\n      case 'breakfast': return 'Colazione';\n      case 'lunch': return 'Pranzo';\n      case 'dinner': return 'Cena';\n      default: return type;\n    }\n  };\n\n  // Restituisce un colore basato sul tipo di pasto\n  const getMealTypeColor = (type) => {\n    switch(type) {\n      case 'breakfast': return '#ffc107'; // Giallo per colazione\n      case 'lunch': return '#28a745'; // Verde per pranzo\n      case 'dinner': return '#6f42c1'; // Viola per cena\n      default: return '#007bff'; // Blu predefinito\n    }\n  };\n\n  // Funzione per renderizzare la card di un pasto\n  const renderMealCard = (meal) => {\n    return (\n      <Link to={`/meals/${meal._id}`} key={meal._id} className=\"meal-card\">\n        <div \n          className=\"meal-type-indicator\"\n          style={{ backgroundColor: getMealTypeColor(meal.mealType) }}\n        >\n          {getMealTypeText(meal.mealType)}\n        </div>\n        \n        <h3 className=\"meal-title\">{meal.title}</h3>\n        \n        <div className=\"meal-info\">\n          <span className=\"meal-date\">\n            <FaCalendarAlt /> {formatDate(meal.dateTime)}\n          </span>\n          <span className=\"meal-participants\">\n            <FaUsers /> {meal.participants.length}/{meal.maxParticipants}\n          </span>\n        </div>\n        \n        <p className=\"meal-description\">{meal.description}</p>\n      </Link>\n    );\n  };\n

FRONTEND/client/node_modules/.cache/babel-loader/b460f9b7c6348cbdeafc35913813f0e8f7496063a5b1cda4d74108d561fa8af2.json:
  1: {"ast":null,"code":"import axiosInstance from '../config/axiosConfig';\n\n// Mappatura dei valori in italiano\nconst MEAL_TYPES = {\n  breakfast: 'colazione',\n  lunch: 'pranzo',\n  dinner: 'cena',\n  aperitif: 'aperitivo'\n};\nconst MEAL_STATUS = {\n  upcoming: 'in arrivo',\n  ongoing: 'in corso',\n  completed: 'completato',\n  cancelled: 'cancellato'\n};\nconst LANGUAGES = {\n  it: 'italiano',\n  en: 'inglese',\n  es: 'spagnolo',\n  fr: 'francese',\n  de: 'tedesco'\n};\n\n// Funzione per convertire i valori in italiano\nconst translateToItalian = data => {\n  if (!data) return data;\n  const translated = {\n    ...data\n  };\n  if (translated.type) {\n    translated.type = MEAL_TYPES[translated.type] || translated.type;\n  }\n  if (translated.status) {\n    translated.status = MEAL_STATUS[translated.status] || translated.status;\n  }\n  if (translated.language) {\n    translated.language = LANGUAGES[translated.language] || translated.language;\n  }\n  return translated;\n};\n\n// Funzione per convertire i valori in inglese\nconst translateToEnglish = data => {\n  if (!data) return data;\n  const translated = {\n    ...data\n  };\n  if (translated.type) {\n    va⟪ 17143 characters skipped ⟫/ Esporta sia come default che come named export\nexport { mealService, MealServiceError };\nexport default mealService;","map":{"version":3,"names":["axiosInstance","MEAL_TYPES","breakfast","lunch","dinner","aperitif","MEAL_STATUS","upcoming","ongoing","completed","cancelled","LANGUAGES","it","en","es","fr","de","translateToItalian","data","translated","type","status","language","translateToEnglish","_Object$entries$find","englishType","Object","entries","find","_","value","_Object$entries$find2","englishStatus","_Object$entries$find3","englishLang","MealServiceError","Error","constructor","message","code","name","handleError","error","console","response","_error$response$data","_error$response$data2","headers","request","createMeal","mealData","_mealData$settings$al","_mealData$settings","_mealData$settings$re","_mealData$settings2","_mealData$settings$vi","_mealData$settings3","_mealData$settings$ba","_mealData$settings4","_axiosInstance$defaul","_axiosInstance$defaul2","_axiosInstance$defaul3","log","title","date","maxParticipants","description","topics","settings","token","localStorage","getItem","requiredFields","missingFields","filter","field","Array","isArray","length","tri⟪ 749 characters skipped ⟫s/mealService.js"],"sourcesContent":["import axiosInstance from '../config/axiosConfig';\n\n// Mappatura dei valori in italiano\nconst MEAL_TYPES = {\n  breakfast: 'colazione',\n  lunch: 'pranzo',\n  dinner: 'cena',\n  aperitif: 'aperitivo'\n};\n\nconst MEAL_STATUS = {\n  upcoming: 'in arrivo',\n  ongoing: 'in corso',\n  completed: 'completato',\n  cancelled: 'cancellato'\n};\n\nconst LANGUAGES = {\n  it: 'italiano',\n  en: 'inglese',\n  es: 'spagnolo',\n  fr: 'francese',\n  de: 'tedesco'\n};\n\n// Funzione per convertire i valori in italiano\nconst translateToItalian = (data) => {\n  if (!data) return data;\n  \n  const translated = { ...data };\n  \n  if (translated.type) {\n    translated.type = MEAL_TYPES[translated.type] || translated.type;\n  }\n  \n  if (translated.status) {\n    translated.status = MEAL_STATUS[translated.status] || translated.status;\n  }\n  \n  if (translated.language) {\n    translated.language = LANGUAGES[translated.language] || translated.language;\n  }\n  \n  return translated;\n};\n\n// Funzione per convertire i valori in inglese\nconst translateToEnglish = (data) => {\n  if (!data) return data;\n  \n  const translated = { ...data };\n  \n  if (transl

FRONTEND/client/node_modules/.cache/babel-loader/bdb3e9ade1ed174e2b1fcbfa47aa14c6f5291e9a7748dfc6bbe312be1deaffcc.json:
  1: ⟪ 2339 characters skipped ⟫  text: 'Colazione',\n        variant: 'info',\n        icon: 'fa-coffee'\n      },\n      lunch: {\n        text: 'Pranzo',\n        variant: 'success',\n        icon: 'fa-utensils'\n      },\n      dinner: {\n        text: 'Cena',\n        variant: 'primary',\n        icon: 'fa-moon'\n      },\n      aperitif: {\n        text: 'Aperitivo',\n        variant: 'warning',\n        icon: 'fa-glass-cheers'\n      }\n    };\n    const {\n      text,\n      variant,\n      icon\n    } = types[type] || {\n      text: type,\n      variant: 'secondary',\n      icon: 'fa-utensils'\n    };\n    return /*#__PURE__*/_jsxDEV(Badge, {\n      bg: variant,\n      className: \"d-flex align-items-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n        className: `fas ${icon} me-1`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), text]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this);\n  };\n  const getLanguageBadge = language => {\n    const languages = {\n      it: {\n        text: 'Italiano',\n        icon: 'fa-flag'\n      },\n      en: {\n     ⟪ 11588 characters skipped ⟫minute","toLocaleString","day","month","year","getMealStatus","meal","mealDate","endDate","setHours","getHours","status","text","variant","icon","getMealTypeBadge","type","types","breakfast","lunch","dinner","aperitif","bg","className","children","fileName","_jsxFileName","lineNumber","columnNumber","getLanguageBadge","language","languages","it","en","es","fr","de","animation","role","length","div","initial","opacity","y","animate","transition","duration","map","index","_meal$participants","_userMeals$hosted","_userMeals$joined","delay","to","_id","style","textDecoration","color","onClick","title","Body","Title","Text","participants","maxParticipants","hosted","includes","joined","_c","$RefreshReg$"],"sources":["/Users/ele/TableTalk Claude/FRONTEND/client/src/pages/Meals/MealsList.js"],"sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Card, Badge, Spinner, Alert } from 'react-bootstrap';\nimport { motion } from 'framer-motion';\nimport '../../styles/MealsList.css';\n\nconst MealsList = ({ meals, userMeals, onMealSelect, selectedMealId, loading, error }) => {\n  // Funzione per formattare la data\n  const formatDate = (dateString) => {⟪ 1532 characters skipped ⟫Badge = (type) => {\n    const types = {\n      breakfast: { text: 'Colazione', variant: 'info', icon: 'fa-coffee' },\n      lunch: { text: 'Pranzo', variant: 'success', icon: 'fa-utensils' },\n      dinner: { text: 'Cena', variant: 'primary', icon: 'fa-moon' },\n      aperitif: { text: 'Aperitivo', variant: 'warning', icon: 'fa-glass-cheers' }\n    };\n    const { text, variant, icon } = types[type] || { text: type, variant: 'secondary', icon: 'fa-utensils' };\n    return (\n      <Badge bg={variant} className=\"d-flex align-items-center\">\n        <i className={`fas ${icon} me-1`}></i>\n        {text}\n      </Badge>\n    );\n  };\n\n  const getLanguageBadge = (language) => {\n    const languages = {\n      it: { text: 'Italiano', icon: 'fa-flag' },\n      en: { text: 'Inglese', icon: 'fa-flag-usa' },\n      es: { text: 'Spagnolo', icon: 'fa-flag' },\n      fr: { text: 'Francese', icon: 'fa-flag' },\n      de: { text: 'Tedesco', icon: 'fa-flag' }\n    };\n    const { text, icon } = languages[language] || { text: language, icon: 'fa-language' };\n    return (\n      <Badge bg=\"light\" text=\"dark\" className=\"d-flex align-items-center\">\n        <i className={`fas ${icon} me-1

FRONTEND/client/node_modules/.cache/babel-loader/ca98371a41fcd03c76daabd59bc835816c2e1ccb004b934cd84acbe01f12e9da.json:
  1: ⟪ 6736 characters skipped ⟫     }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"dinner\",\n            children: \"Cena\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"snack\",\n            children: \"Spuntino\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), expandedFilters && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Lingua\"\n          }, void 0, false, {\n            fileName: _jsxFile⟪ 11223 characters skipped ⟫  >\n            <option value=\"\">Tutti i tipi</option>\n            <option value=\"breakfast\">Colazione</option>\n            <option value=\"lunch\">Pranzo</option>\n            <option value=\"dinner\">Cena</option>\n            <option value=\"snack\">Spuntino</option>\n          </Form.Select>\n        </Form.Group>\n        \n        {expandedFilters && (\n          <>\n            <Form.Group className=\"mb-3\">\n              <Form.Label>Lingua</Form.Label>\n              <Form.Select \n                name=\"language\" \n                value={tempFilters.language} \n                onChange={handleLanguageChange}\n              >\n                <option value=\"\">Tutte le lingue</option>\n                <option value=\"it\">Italiano</option>\n                <option value=\"en\">Inglese</option>\n                <option value=\"es\">Spagnolo</option>\n                <option value=\"fr\">Francese</option>\n                <option value=\"de\">Tedesco</option>\n              </Form.Select>\n            </Form.Group>\n            \n            <Form.Group className=\"mb-3\">\n              <Form.Label>Stato</Form.Label>\n              <Form.Select \n                n

FRONTEND/client/node_modules/.cache/babel-loader/cd037c6e273a1da1651aeeaf054694b4db7a4665578572bf2e7a9895cc2a0fdc.json:
  1: ⟪ 1739 characters skipped ⟫participants,\n    language,\n    meetingLink,\n    status,\n    location\n  } = meal;\n\n  // Traduzioni\n  const mealTypeTranslation = {\n    'breakfast': 'Colazione',\n    'lunch': 'Pranzo',\n    'dinner': 'Cena',\n    'snack': 'Spuntino'\n  };\n  const languageTranslation = {\n    'Italiano': 'Italiano',\n    'English': 'Inglese',\n    'Español': 'Spagnolo',\n    'Français': 'Francese',\n    'Deutsch': 'Tedesco',\n    '中文': 'Cinese',\n    '日本語': 'Giapponese',\n    'العربية': 'Arabo',\n    'Русский': 'Russo',\n    'Português': 'Portoghese'\n  };\n  const statusTranslation = {\n    'scheduled': 'In arrivo',\n    'ongoing': 'In corso',\n    'completed': 'Completato',\n    'cancelled': 'Cancellato'\n  };\n  const statusVariant = {\n    'scheduled': 'success',\n    'ongoing': 'warning',\n    'completed': 'secondary',\n    'cancelled': 'danger'\n  };\n\n  // Verifica se l'utente corrente è l'host\n  const isHost = (host === null || host === void 0 ? void 0 : host._id) === (currentUser === null || currentUser === void 0 ? void 0 : currentUser.id);\n\n  // Verifica se l'utente corrente è un partecipante\n  const isParticipant = participants === null || participants === void 0 ? void 0 ⟪ 17741 characters skipped ⟫ription,\n    host, participants, language, meetingLink, status, location\n  } = meal;\n\n  // Traduzioni\n  const mealTypeTranslation = {\n    'breakfast': 'Colazione',\n    'lunch': 'Pranzo',\n    'dinner': 'Cena',\n    'snack': 'Spuntino'\n  };\n\n  const languageTranslation = {\n    'Italiano': 'Italiano',\n    'English': 'Inglese',\n    'Español': 'Spagnolo',\n    'Français': 'Francese',\n    'Deutsch': 'Tedesco',\n    '中文': 'Cinese',\n    '日本語': 'Giapponese',\n    'العربية': 'Arabo',\n    'Русский': 'Russo',\n    'Português': 'Portoghese'\n  };\n\n  const statusTranslation = {\n    'scheduled': 'In arrivo',\n    'ongoing': 'In corso',\n    'completed': 'Completato',\n    'cancelled': 'Cancellato'\n  };\n\n  const statusVariant = {\n    'scheduled': 'success',\n    'ongoing': 'warning',\n    'completed': 'secondary',\n    'cancelled': 'danger'\n  };\n\n  // Verifica se l'utente corrente è l'host\n  const isHost = host?._id === currentUser?.id;\n  \n  // Verifica se l'utente corrente è un partecipante\n  const isParticipant = participants?.some(p => p._id === currentUser?.id);\n  \n  // Verifica se il pasto è pieno\n  const isFull = participants?.length >= maxParticipants;\n\n 

FRONTEND/client/node_modules/.cache/babel-loader/ce97b9f97c3120ee5c4a7c3c199b7b1da1fcef16b7697e84b5c9b2ae4d97734b.json:
  1: ⟪ 1075 characters skipped ⟫    host,\n    participants,\n    language,\n    meetingLink,\n    status\n  } = meal;\n\n  // Traduzioni\n  const mealTypeTranslation = {\n    'breakfast': 'Colazione',\n    'lunch': 'Pranzo',\n    'dinner': 'Cena'\n  };\n  const statusTranslation = {\n    'scheduled': 'Programmato',\n    'ongoing': 'In corso',\n    'completed': 'Completato',\n    'cancelled': 'Cancellato'\n  };\n\n  // Verifica se l'utente corrente è l'host\n  const isHost = host._id === (currentUser === null || currentUser === void 0 ? void 0 : currentUser.id);\n\n  // Verifica se l'utente corrente è un partecipante\n  const isParticipant = participants.some(p => p._id === (currentUser === null || currentUser === void 0 ? void 0 : currentUser.id));\n\n  // Verifica se il pasto è pieno\n  const isFull = participants.length >= maxParticipants;\n\n  // Verifica se il pasto è già passato\n  const isPast = new Date(dateTime) < new Date();\n\n  // Funzione per abbandonare il pasto\n  const handleLeaveMeal = async () => {\n    setLoading(true);\n    setError('');\n    setSuccess('');\n    try {\n      await leaveMeal(_id);\n      setSuccess('Hai abbandonato il pasto con successo');\n      if (onLeaveSuccess) onLeaveSuc⟪ 15218 characters skipped ⟫ants, description,\n    host, participants, language, meetingLink, status\n  } = meal;\n\n  // Traduzioni\n  const mealTypeTranslation = {\n    'breakfast': 'Colazione',\n    'lunch': 'Pranzo',\n    'dinner': 'Cena'\n  };\n\n  const statusTranslation = {\n    'scheduled': 'Programmato',\n    'ongoing': 'In corso',\n    'completed': 'Completato',\n    'cancelled': 'Cancellato'\n  };\n\n  // Verifica se l'utente corrente è l'host\n  const isHost = host._id === currentUser?.id;\n  \n  // Verifica se l'utente corrente è un partecipante\n  const isParticipant = participants.some(p => p._id === currentUser?.id);\n  \n  // Verifica se il pasto è pieno\n  const isFull = participants.length >= maxParticipants;\n\n  // Verifica se il pasto è già passato\n  const isPast = new Date(dateTime) < new Date();\n\n  // Funzione per abbandonare il pasto\n  const handleLeaveMeal = async () => {\n    setLoading(true);\n    setError('');\n    setSuccess('');\n    \n    try {\n      await leaveMeal(_id);\n      setSuccess('Hai abbandonato il pasto con successo');\n      if (onLeaveSuccess) onLeaveSuccess();\n    } catch (err) {\n      setError(err.response?.data?.message || 'Errore nell\\'abbandonare il 

FRONTEND/client/node_modules/.cache/babel-loader/d8cb02d8b95533c542ae3eca9b678ad1f0efe2721dc36822fba0c72bc4fb2e0a.json:
  1: {"ast":null,"code":"import axiosInstance from '../config/axiosConfig';\n\n// Mappatura dei valori in italiano\nconst MEAL_TYPES = {\n  breakfast: 'colazione',\n  lunch: 'pranzo',\n  dinner: 'cena',\n  aperitif: 'aperitivo'\n};\nconst MEAL_STATUS = {\n  upcoming: 'in arrivo',\n  ongoing: 'in corso',\n  completed: 'completato',\n  cancelled: 'cancellato'\n};\nconst LANGUAGES = {\n  it: 'italiano',\n  en: 'inglese',\n  es: 'spagnolo',\n  fr: 'francese',\n  de: 'tedesco',\n  zh: 'cinese',\n  ar: 'arabo'\n};\nconst VALID_LANGUAGES = ['Italiano', 'English', 'Español', 'Français', 'Deutsch', '中文', 'العربية'];\n\n// Funzione per convertire i valori in italiano\nconst translateToItalian = data => {\n  if (!data) return data;\n  const translated = {\n    ...data\n  };\n  if (translated.type) {\n    translated.type = MEAL_TYPES[translated.type] || translated.type;\n  }\n  if (translated.status) {\n    translated.status = MEAL_STATUS[translated.status] || translated.status;\n  }\n  if (translated.language) {\n    translated.language = LANGUAGES[translated.language] || translated.language;\n  }\n  return translated;\n};\n\n// Funzione per convertire i valori in inglese\nconst ⟪ 17721 characters skipped ⟫/ Esporta sia come default che come named export\nexport { mealService, MealServiceError };\nexport default mealService;","map":{"version":3,"names":["axiosInstance","MEAL_TYPES","breakfast","lunch","dinner","aperitif","MEAL_STATUS","upcoming","ongoing","completed","cancelled","LANGUAGES","it","en","es","fr","de","zh","ar","VALID_LANGUAGES","translateToItalian","data","translated","type","status","language","translateToEnglish","_Object$entries$find","englishType","Object","entries","find","_","value","_Object$entries$find2","englishStatus","_Object$entries$find3","englishLang","MealServiceError","Error","constructor","message","code","name","handleError","error","console","response","_error$response$data","_error$response$data2","headers","request","createMeal","mealData","_mealData$settings$al","_mealData$settings","_mealData$settings$re","_mealData$settings2","_mealData$settings$vi","_mealData$settings3","_mealData$settings$ba","_mealData$settings4","_axiosInstance$defaul","_axiosInstance$defaul2","_axiosInstance$defaul3","log","title","date","maxParticipants","description","topics","settings","token","localStorage","getItem","requiredFields","missingFields","filter","field","Ar⟪ 792 characters skipped ⟫s/mealService.js"],"sourcesContent":["import axiosInstance from '../config/axiosConfig';\n\n// Mappatura dei valori in italiano\nconst MEAL_TYPES = {\n  breakfast: 'colazione',\n  lunch: 'pranzo',\n  dinner: 'cena',\n  aperitif: 'aperitivo'\n};\n\nconst MEAL_STATUS = {\n  upcoming: 'in arrivo',\n  ongoing: 'in corso',\n  completed: 'completato',\n  cancelled: 'cancellato'\n};\n\nconst LANGUAGES = {\n  it: 'italiano',\n  en: 'inglese',\n  es: 'spagnolo',\n  fr: 'francese',\n  de: 'tedesco',\n  zh: 'cinese',\n  ar: 'arabo'\n};\n\nconst VALID_LANGUAGES = ['Italiano', 'English', 'Español', 'Français', 'Deutsch', '中文', 'العربية'];\n\n// Funzione per convertire i valori in italiano\nconst translateToItalian = (data) => {\n  if (!data) return data;\n  \n  const translated = { ...data };\n  \n  if (translated.type) {\n    translated.type = MEAL_TYPES[translated.type] || translated.type;\n  }\n  \n  if (translated.status) {\n    translated.status = MEAL_STATUS[translated.status] || translated.status;\n  }\n  \n  if (translated.language) {\n    translated.language = LANGUAGES[translated.language] || translated.language;\n  }\n  \n  return translated;\n};\n\n// Funzione per convertire i valor

FRONTEND/client/node_modules/.cache/babel-loader/d831c95e7031ec6a47557e68a60dc4197d9fcf332200c1ea8327ee0242cd4463.json:
  1: ⟪ 564 characters skipped ⟫ent as _Fragment } from \"react/jsx-dev-runtime\";\nconst CreateMealForm = ({\n  onMealCreated,\n  onCancel\n}) => {\n  _s();\n  const [formData, setFormData] = useState({\n    title: '',\n    type: 'dinner',\n    date: new Date(new Date().setHours(new Date().getHours() + 2)),\n    maxParticipants: 4,\n    description: '',\n    language: 'Italiano',\n    topics: [],\n    duration: 120,\n    // Durata predefinita di 2 ore\n    settings: {\n      allowLateJoin: true,\n      requireApproval: false,\n      recordingEnabled: false\n    }\n  });\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [isFormValid, setIsFormValid] = useState(false);\n\n  // Validazione del form\n  useEffect(() => {\n    const validateForm = () => {\n      const {\n        title,\n        type,\n        date,\n        maxParticipants,\n        description,\n        language,\n        topics\n      } = formData;\n      const validations = {\n        title: title.trim().length >= 3,\n        type: ['breakfast', 'lunch', 'dinner', 'snack'].includes(type),\n        date: date instanceof Date && date > new Date(),\n        maxParticipants: maxParticipants >= 2 && maxParticipants <= 10,\n        description: description.trim().length >= 10,\n        language: language.trim().length >= 2,\n        topics: topics.length >= 1\n      };\n\n      // Debug delle validazioni\n      if (process.env.NODE_ENV === 'development') {\n        console.log('🔍 Form validations:', validations);\n      }\n      setIsFormValid(Object.values(validations).every(v => v === true));\n    };\n    validateForm();\n  }, [formData]);\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  const handleDateChange = date => {\n    setFormData(prev => ({\n      ...prev,\n      date: date\n    }));\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!isFormValid) {\n      const errorMessage = 'Per f⟪ 8427 characters skipped ⟫_jsxFileName,\n                        lineNumber: 204,\n                        columnNumber: 25\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"dinner\",\n                        children: \"\\uD83C\\uDF77 Cena\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 205,\n                        columnNumber: 25\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"snack\",\n                        children: \"\\uD83C\\uDF6A Spuntino\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 206,\n                        columnNumber: 25\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 197,\n                      columnNumber: 23\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 195,\n                    columnNumber: 21\n              ⟪ 26141 characters skipped ⟫s/CreateMealForm.css';\nimport { toast } from 'react-hot-toast';\n\nconst CreateMealForm = ({ onMealCreated, onCancel }) => {\n  const [formData, setFormData] = useState({\n    title: '',\n    type: 'dinner',\n    date: new Date(new Date().setHours(new Date().getHours() + 2)),\n    maxParticipants: 4,\n    description: '',\n    language: 'Italiano',\n    topics: [],\n    duration: 120, // Durata predefinita di 2 ore\n    settings: {\n      allowLateJoin: true,\n      requireApproval: false,\n      recordingEnabled: false\n    }\n  });\n  \n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [isFormValid, setIsFormValid] = useState(false);\n  \n  // Validazione del form\n  useEffect(() => {\n    const validateForm = () => {\n      const { title, type, date, maxParticipants, description, language, topics } = formData;\n      \n      const validations = {\n        title: title.trim().length >= 3,\n        type: ['breakfast', 'lunch', 'dinner', 'snack'].includes(type),\n        date: date instanceof Date && date > new Date(),\n        maxParticipants: maxParticipants >= 2 && maxParticipants <= 10,\n        description: description.trim().length >= 10,\n        language: language.trim().length >= 2,\n        topics: topics.length >= 1\n      };\n\n      // Debug delle validazioni\n      if (process.env.NODE_ENV === 'development') {\n        console.log('🔍 Form validations:', validations);\n      }\n      \n      setIsFormValid(Object.values(validations).every(v => v === true));\n    };\n    \n    validateForm();\n  }, [formData]);\n  \n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n  };\n  \n  const handleDateChange = (date) => {\n    setFormData(prev => ({ ...prev, date: date }));\n  };\n  \n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!isFormValid) {\n      const errorMessage = 'Per favore, compila correttame⟪ 4885 characters skipped ⟫             >\n                        <option value=\"breakfast\">🥐 Colazione</option>\n                        <option value=\"lunch\">🍽️ Pranzo</option>\n                        <option value=\"dinner\">🍷 Cena</option>\n                        <option value=\"snack\">🍪 Spuntino</option>\n                      </Form.Select>\n                    </Form.Group>\n                  </Col>\n                  \n                  <Col md={6}>\n                    <Form.Group>\n                      <Form.Label>Lingua principale*</Form.Label>\n                      <Form.Select\n                        name=\"language\"\n                        value={formData.language}\n                        onChange={handleChange}\n                        required\n                      >\n                        <option value=\"Italiano\">🇮🇹 Italiano</option>\n                        <option value=\"English\">🇬🇧 Inglese</option>\n                        <option value=\"Español\">🇪🇸 Spagnolo</option>\n                        <option value=\"Français\">��🇷 Francese</option>\n                        <option value=\"Deutsch\">🇩🇪 Tedesco</option>\n                        <option value=\"中文\

FRONTEND/client/node_modules/.cache/babel-loader/d78615ef44806ee2cbc2ff60fc25db2c39ea3a0edc851d1a1f80ab3802055038.json:
  1: ⟪ 524 characters skipped ⟫nt as _Fragment } from \"react/jsx-dev-runtime\";\nconst CreateMealPage = () => {\n  _s();\n  const navigate = useNavigate();\n  const [formData, setFormData] = useState({\n    title: '',\n    type: 'dinner',\n    date: new Date(new Date().setHours(new Date().getHours() + 2)),\n    maxParticipants: 4,\n    description: '',\n    language: 'Italiano',\n    topics: [],\n    duration: 120,\n    settings: {\n      allowLateJoin: true,\n      requireApproval: false,\n      videoQuality: 'HD',\n      backgroundBlur: true\n    }\n  });\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [isFormValid, setIsFormValid] = useState(false);\n\n  // Validazione del form\n  useEffect(() => {\n    const validateForm = () => {\n      const {\n        title,\n        type,\n        date,\n        maxParticipants,\n        description,\n        language,\n        topics\n      } = formData;\n      const validations = {\n        title: title.trim().length >= 3,\n        type: ['breakfast', 'lunch', 'dinner', 'snack'].includes(type),\n        date: date instanceof Date && date > new Date(),\n        maxParticipants: maxParticipants >= 2 && maxParticipants <= 10,\n        description: description.trim().length >= 10,\n        language: language.trim().length >= 2,\n        topics: topics.length >= 1\n      };\n      setIsFormValid(Object.values(validations).every(v => v === true));\n    };\n    validateForm();\n  }, [formData]);\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  const handleDateChange = date => {\n    setFormData(prev => ({\n      ...prev,\n      date: date\n    }));\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!isFormValid) {\n      const errorMessage = 'Per favore, compila correttamente tutti i campi obbligatori';\n      setError(errorMessage);\n      toast.error(errorMessage);\n      return;\n    }\n    setLoadi⟪ 8134 characters skipped ⟫              fileName: _jsxFileName,\n                  lineNumber: 188,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"dinner\",\n                  children: \"\\uD83C\\uDF77 Cena\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 189,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"snack\",\n                  children: \"\\uD83C\\uDF6A Spuntino\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 190,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 180,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"l⟪ 20573 characters skipped ⟫mealService';\nimport '../../styles/CreateMealPage.css';\n\nconst CreateMealPage = () => {\n  const navigate = useNavigate();\n  const [formData, setFormData] = useState({\n    title: '',\n    type: 'dinner',\n    date: new Date(new Date().setHours(new Date().getHours() + 2)),\n    maxParticipants: 4,\n    description: '',\n    language: 'Italiano',\n    topics: [],\n    duration: 120,\n    settings: {\n      allowLateJoin: true,\n      requireApproval: false,\n      videoQuality: 'HD',\n      backgroundBlur: true\n    }\n  });\n\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [isFormValid, setIsFormValid] = useState(false);\n\n  // Validazione del form\n  useEffect(() => {\n    const validateForm = () => {\n      const { title, type, date, maxParticipants, description, language, topics } = formData;\n      \n      const validations = {\n        title: title.trim().length >= 3,\n        type: ['breakfast', 'lunch', 'dinner', 'snack'].includes(type),\n        date: date instanceof Date && date > new Date(),\n        maxParticipants: maxParticipants >= 2 && maxParticipants <= 10,\n        description: description.trim().length >= 10,\n        language: language.trim().length >= 2,\n        topics: topics.length >= 1\n      };\n      \n      setIsFormValid(Object.values(validations).every(v => v === true));\n    };\n    \n    validateForm();\n  }, [formData]);\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n  };\n\n  const handleDateChange = (date) => {\n    setFormData(prev => ({ ...prev, date: date }));\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!isFormValid) {\n      const errorMessage = 'Per favore, compila correttamente tutti i campi obbligatori';\n      setError(errorMessage);\n      toast.error(errorMessage);\n      return;\n    }\n    setLoading(true);\n    setError('');\n\⟪ 4329 characters skipped ⟫     required\n                >\n                  <option value=\"breakfast\">🥐 Colazione</option>\n                  <option value=\"lunch\">🍽️ Pranzo</option>\n                  <option value=\"dinner\">🍷 Cena</option>\n                  <option value=\"snack\">🍪 Spuntino</option>\n                </select>\n              </div>\n\n              <div className=\"form-group\">\n                <label htmlFor=\"language\">Lingua Principale*</label>\n                <select\n                  id=\"language\"\n                  name=\"language\"\n                  value={formData.language}\n                  onChange={handleChange}\n                  required\n                >\n                  <option value=\"Italiano\">🇮🇹 Italiano</option>\n                  <option value=\"English\">🇬🇧 Inglese</option>\n                  <option value=\"Español\">🇪🇸 Spagnolo</option>\n                  <option value=\"Français\">🇫🇷 Francese</option>\n                  <option value=\"Deutsch\">🇩🇪 Tedesco</option>\n                </select>\n              </div>\n            </div>\n\n            <div className=\"form-row\">\n              <div className=\"form-group\">\n         

FRONTEND/client/node_modules/.cache/babel-loader/d028176130f564b81996c6d2c80d3c35dfb38358564de8234066ed0691dba155.json:
  1: ⟪ 2339 characters skipped ⟫  text: 'Colazione',\n        variant: 'info',\n        icon: 'fa-coffee'\n      },\n      lunch: {\n        text: 'Pranzo',\n        variant: 'success',\n        icon: 'fa-utensils'\n      },\n      dinner: {\n        text: 'Cena',\n        variant: 'primary',\n        icon: 'fa-moon'\n      },\n      snack: {\n        text: 'Spuntino',\n        variant: 'warning',\n        icon: 'fa-cookie'\n      }\n    };\n    const {\n      text,\n      variant,\n      icon\n    } = types[type] || {\n      text: type,\n      variant: 'secondary',\n      icon: 'fa-utensils'\n    };\n    return /*#__PURE__*/_jsxDEV(Badge, {\n      bg: variant,\n      className: \"d-flex align-items-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n        className: `fas ${icon} me-1`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), text]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this);\n  };\n  const getLanguageBadge = language => {\n    const languages = {\n      it: {\n        text: 'Italiano',\n        icon: 'fa-flag'\n      },\n      en: {\n        text: '⟪ 11578 characters skipped ⟫minute","toLocaleString","day","month","year","getMealStatus","meal","mealDate","endDate","setHours","getHours","status","text","variant","icon","getMealTypeBadge","type","types","breakfast","lunch","dinner","snack","bg","className","children","fileName","_jsxFileName","lineNumber","columnNumber","getLanguageBadge","language","languages","it","en","es","fr","de","animation","role","length","div","initial","opacity","y","animate","transition","duration","map","index","_meal$participants","_userMeals$hosted","_userMeals$joined","delay","to","_id","style","textDecoration","color","onClick","title","Body","Title","Text","participants","maxParticipants","hosted","includes","joined","_c","$RefreshReg$"],"sources":["/Users/ele/TableTalk Claude/FRONTEND/client/src/pages/Meals/MealsList.js"],"sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Card, Badge, Spinner, Alert } from 'react-bootstrap';\nimport { motion } from 'framer-motion';\nimport '../../styles/MealsList.css';\n\nconst MealsList = ({ meals, userMeals, onMealSelect, selectedMealId, loading, error }) => {\n  // Funzione per formattare la data\n  const formatDate = (dateString) => {\n ⟪ 1529 characters skipped ⟫Badge = (type) => {\n    const types = {\n      breakfast: { text: 'Colazione', variant: 'info', icon: 'fa-coffee' },\n      lunch: { text: 'Pranzo', variant: 'success', icon: 'fa-utensils' },\n      dinner: { text: 'Cena', variant: 'primary', icon: 'fa-moon' },\n      snack: { text: 'Spuntino', variant: 'warning', icon: 'fa-cookie' }\n    };\n    const { text, variant, icon } = types[type] || { text: type, variant: 'secondary', icon: 'fa-utensils' };\n    return (\n      <Badge bg={variant} className=\"d-flex align-items-center\">\n        <i className={`fas ${icon} me-1`}></i>\n        {text}\n      </Badge>\n    );\n  };\n\n  const getLanguageBadge = (language) => {\n    const languages = {\n      it: { text: 'Italiano', icon: 'fa-flag' },\n      en: { text: 'Inglese', icon: 'fa-flag-usa' },\n      es: { text: 'Spagnolo', icon: 'fa-flag' },\n      fr: { text: 'Francese', icon: 'fa-flag' },\n      de: { text: 'Tedesco', icon: 'fa-flag' }\n    };\n    const { text, icon } = languages[language] || { text: language, icon: 'fa-language' };\n    return (\n      <Badge bg=\"light\" text=\"dark\" className=\"d-flex align-items-center\">\n        <i className={`fas ${icon} me-1`}></i>\n 

FRONTEND/client/node_modules/.cache/babel-loader/e004da08f25a48de02f0c6c8c569ad24e7f4f55cfb6159fe38f5dbbf01a88ee9.json:
  1: ⟪ 553 characters skipped ⟫ent as _Fragment } from \"react/jsx-dev-runtime\";\nconst CreateMealForm = ({\n  onMealCreated,\n  onCancel\n}) => {\n  _s();\n  const [formData, setFormData] = useState({\n    title: '',\n    type: 'dinner',\n    date: new Date(new Date().setHours(new Date().getHours() + 2)),\n    maxParticipants: 4,\n    description: '',\n    language: 'Italiano',\n    topics: [],\n    duration: 120,\n    // Durata predefinita di 2 ore\n    settings: {\n      allowLateJoin: true,\n      requireApproval: false,\n      recordingEnabled: false\n    }\n  });\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [isFormValid, setIsFormValid] = useState(false);\n\n  // Validazione del form\n  useEffect(() => {\n    const validateForm = () => {\n      const {\n        title,\n        type,\n        date,\n        maxParticipants,\n        description,\n        language,\n        topics\n      } = formData;\n      const validations = {\n        title: title.trim().length >= 3,\n        type: ['breakfast', 'lunch', 'dinner', 'snack'].includes(type),\n        date: date instanceof Date && date > new Date(),\n        maxParticipants: maxParticipants >= 2 && maxParticipants <= 10,\n        description: description.trim().length >= 10,\n        language: language.trim().length >= 2,\n        topics: topics.length >= 1\n      };\n\n      // Debug delle validazioni\n      if (process.env.NODE_ENV === 'development') {\n        console.log('🔍 Form validations:', validations);\n      }\n      setIsFormValid(Object.values(validations).every(v => v === true));\n    };\n    validateForm();\n  }, [formData]);\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  const handleDateChange = date => {\n    setFormData(prev => ({\n      ...prev,\n      date: date\n    }));\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!isFormValid) {\n      const errorMessage = 'Per f⟪ 6376 characters skipped ⟫              fileName: _jsxFileName,\n                  lineNumber: 189,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"dinner\",\n                  children: \"\\uD83C\\uDF77 Cena\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 190,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"snack\",\n                  children: \"\\uD83C\\uDF6A Spuntino\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 191,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 182,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: ⟪ 22601 characters skipped ⟫s/CreateMealForm.css';\nimport { toast } from 'react-hot-toast';\n\nconst CreateMealForm = ({ onMealCreated, onCancel }) => {\n  const [formData, setFormData] = useState({\n    title: '',\n    type: 'dinner',\n    date: new Date(new Date().setHours(new Date().getHours() + 2)),\n    maxParticipants: 4,\n    description: '',\n    language: 'Italiano',\n    topics: [],\n    duration: 120, // Durata predefinita di 2 ore\n    settings: {\n      allowLateJoin: true,\n      requireApproval: false,\n      recordingEnabled: false\n    }\n  });\n  \n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [isFormValid, setIsFormValid] = useState(false);\n  \n  // Validazione del form\n  useEffect(() => {\n    const validateForm = () => {\n      const { title, type, date, maxParticipants, description, language, topics } = formData;\n      \n      const validations = {\n        title: title.trim().length >= 3,\n        type: ['breakfast', 'lunch', 'dinner', 'snack'].includes(type),\n        date: date instanceof Date && date > new Date(),\n        maxParticipants: maxParticipants >= 2 && maxParticipants <= 10,\n        description: description.trim().length >= 10,\n        language: language.trim().length >= 2,\n        topics: topics.length >= 1\n      };\n\n      // Debug delle validazioni\n      if (process.env.NODE_ENV === 'development') {\n        console.log('🔍 Form validations:', validations);\n      }\n      \n      setIsFormValid(Object.values(validations).every(v => v === true));\n    };\n    \n    validateForm();\n  }, [formData]);\n  \n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n  };\n  \n  const handleDateChange = (date) => {\n    setFormData(prev => ({ ...prev, date: date }));\n  };\n  \n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!isFormValid) {\n      const errorMessage = 'Per favore, compila correttame⟪ 3822 characters skipped ⟫     required\n                >\n                  <option value=\"breakfast\">🥐 Colazione</option>\n                  <option value=\"lunch\">🍽️ Pranzo</option>\n                  <option value=\"dinner\">🍷 Cena</option>\n                  <option value=\"snack\">🍪 Spuntino</option>\n                </Form.Select>\n              </Form.Group>\n            </Col>\n            \n            <Col md={6}>\n              <Form.Group>\n                <Form.Label>Lingua principale*</Form.Label>\n                <Form.Select\n                  name=\"language\"\n                  value={formData.language}\n                  onChange={handleChange}\n                  required\n                >\n                  <option value=\"Italiano\">🇮🇹 Italiano</option>\n                  <option value=\"English\">🇬🇧 Inglese</option>\n                  <option value=\"Español\">🇪🇸 Spagnolo</option>\n                  <option value=\"Français\">🇫🇷 Francese</option>\n                  <option value=\"Deutsch\">🇩🇪 Tedesco</option>\n                  <option value=\"中文\">🇨🇳 Cinese</option>\n                  <option value=\"日本語\">🇯🇵 Giapponese</option>\n                  <option valu

FRONTEND/client/node_modules/.cache/babel-loader/e32f52b0dceda874543cc4a6fefc63565ebd225caca9b4b157ddac8ac0a43e0e.json:
  1: ⟪ 1732 characters skipped ⟫participants,\n    language,\n    meetingLink,\n    status,\n    location\n  } = meal;\n\n  // Traduzioni\n  const mealTypeTranslation = {\n    'breakfast': 'Colazione',\n    'lunch': 'Pranzo',\n    'dinner': 'Cena',\n    'snack': 'Spuntino'\n  };\n  const languageTranslation = {\n    'it': 'Italiano',\n    'en': 'Inglese',\n    'es': 'Spagnolo',\n    'fr': 'Francese',\n    'de': 'Tedesco'\n  };\n  const statusTranslation = {\n    'scheduled': 'In arrivo',\n    'ongoing': 'In corso',\n    'completed': 'Completato',\n    'cancelled': 'Cancellato'\n  };\n  const statusVariant = {\n    'scheduled': 'success',\n    'ongoing': 'warning',\n    'completed': 'secondary',\n    'cancelled': 'danger'\n  };\n\n  // Verifica se l'utente corrente è l'host\n  const isHost = host._id === (currentUser === null || currentUser === void 0 ? void 0 : currentUser.id);\n\n  // Verifica se l'utente corrente è un partecipante\n  const isParticipant = participants.some(p => p._id === (currentUser === null || currentUser === void 0 ? void 0 : currentUser.id));\n\n  // Verifica se il pasto è pieno\n  const isFull = participants.length >= maxParticipants;\n\n  // Verifica se il pasto è già passato\n  const isP⟪ 17230 characters skipped ⟫ription,\n    host, participants, language, meetingLink, status, location\n  } = meal;\n\n  // Traduzioni\n  const mealTypeTranslation = {\n    'breakfast': 'Colazione',\n    'lunch': 'Pranzo',\n    'dinner': 'Cena',\n    'snack': 'Spuntino'\n  };\n\n  const languageTranslation = {\n    'it': 'Italiano',\n    'en': 'Inglese',\n    'es': 'Spagnolo',\n    'fr': 'Francese',\n    'de': 'Tedesco'\n  };\n\n  const statusTranslation = {\n    'scheduled': 'In arrivo',\n    'ongoing': 'In corso',\n    'completed': 'Completato',\n    'cancelled': 'Cancellato'\n  };\n\n  const statusVariant = {\n    'scheduled': 'success',\n    'ongoing': 'warning',\n    'completed': 'secondary',\n    'cancelled': 'danger'\n  };\n\n  // Verifica se l'utente corrente è l'host\n  const isHost = host._id === currentUser?.id;\n  \n  // Verifica se l'utente corrente è un partecipante\n  const isParticipant = participants.some(p => p._id === currentUser?.id);\n  \n  // Verifica se il pasto è pieno\n  const isFull = participants.length >= maxParticipants;\n\n  // Verifica se il pasto è già passato\n  const isPast = new Date(dateTime) < new Date();\n\n  // Funzione per gestire gli errori di caricamento delle immagini

FRONTEND/client/node_modules/.cache/babel-loader/e52be2939d645bc480b2c8870b21678e955b31bcf5cca33d038f1b5b7578af23.json:
  1: ⟪ 1244 characters skipped ⟫    host,\n    participants,\n    language,\n    meetingLink,\n    status\n  } = meal;\n\n  // Traduzioni\n  const mealTypeTranslation = {\n    'breakfast': 'Colazione',\n    'lunch': 'Pranzo',\n    'dinner': 'Cena',\n    'aperitif': 'Aperitivo'\n  };\n  const languageTranslation = {\n    'Italiano': 'Italiano',\n    'English': 'Inglese',\n    'Español': 'Spagnolo',\n    'Français': 'Francese',\n    'Deutsch': 'Tedesco',\n    '中文': 'Cinese',\n    '日本語': 'Giapponese',\n    'العربية': 'Arabo',\n    'Русский': 'Russo',\n    'Português': 'Portoghese'\n  };\n  const statusTranslation = {\n    'scheduled': 'In arrivo',\n    'ongoing': 'In corso',\n    'completed': 'Completato',\n    'cancelled': 'Cancellato'\n  };\n  const statusVariant = {\n    'scheduled': 'success',\n    'ongoing': 'warning',\n    'completed': 'secondary',\n    'cancelled': 'danger'\n  };\n\n  // Verifica se l'utente corrente è l'host\n  const isHost = (host === null || host === void 0 ? void 0 : host._id) === (currentUser === null || currentUser === void 0 ? void 0 : currentUser.id);\n\n  // Verifica se l'utente corrente è un partecipante\n  const isParticipant = participants === null || participants === void 0 ? voi⟪ 12572 characters skipped ⟫ants, description,\n    host, participants, language, meetingLink, status\n  } = meal;\n\n  // Traduzioni\n  const mealTypeTranslation = {\n    'breakfast': 'Colazione',\n    'lunch': 'Pranzo',\n    'dinner': 'Cena',\n    'aperitif': 'Aperitivo'\n  };\n\n  const languageTranslation = {\n    'Italiano': 'Italiano',\n    'English': 'Inglese',\n    'Español': 'Spagnolo',\n    'Français': 'Francese',\n    'Deutsch': 'Tedesco',\n    '中文': 'Cinese',\n    '日本語': 'Giapponese',\n    'العربية': 'Arabo',\n    'Русский': 'Russo',\n    'Português': 'Portoghese'\n  };\n\n  const statusTranslation = {\n    'scheduled': 'In arrivo',\n    'ongoing': 'In corso',\n    'completed': 'Completato',\n    'cancelled': 'Cancellato'\n  };\n\n  const statusVariant = {\n    'scheduled': 'success',\n    'ongoing': 'warning',\n    'completed': 'secondary',\n    'cancelled': 'danger'\n  };\n\n  // Verifica se l'utente corrente è l'host\n  const isHost = host?._id === currentUser?.id;\n  \n  // Verifica se l'utente corrente è un partecipante\n  const isParticipant = participants?.some(p => p._id === currentUser?.id);\n  \n  // Verifica se il pasto è pieno\n  const isFull = participants?.length >= maxParticipants;\

FRONTEND/client/node_modules/.cache/babel-loader/f6b58a3ac28fdad9cc12398fe6d292ac10985e41e3655617ee2058e25bd4a8da.json:
  1: ⟪ 2732 characters skipped ⟫mealData.description.trim().length < 10) {\n      throw new MealServiceError('La descrizione deve essere di almeno 10 caratteri', 400, 'INVALID_DESCRIPTION');\n    }\n    if (!['breakfast', 'lunch', 'dinner'].includes(mealData.type)) {\n      throw new MealServiceError('Tipo di pasto non valido', 400, 'INVALID_TYPE');\n    }\n    if (!Array.isArray(mealData.topics) || mealData.topics.length === 0) {\n      throw new MealServiceError('Devi selezionare almeno un argomento', 400, 'INVALID_TOPICS');\n    }\n    if (typeof mealData.maxParticipants !== 'number' || mealData.maxParticipants < 2 || mealData.maxParticipants > 10) {\n      throw new MealServiceError('Il numero di partecipanti deve essere tra 2 e 10', 400, 'INVALID_PARTICIPANTS');\n    }\n\n    // Prepara i dati per l'invio\n    const formattedMealData = {\n      ...mealData,\n      title: mealData.title.trim(),\n      description: mealData.description.trim(),\n      date: new Date(mealData.date).toISOString(),\n      maxParticipants: parseInt(mealData.maxParticipants, 10),\n      topics: mealData.topics.map(topic => topic.trim()),\n      settings: {\n        ...mealData.settings,\n        language: mealData.language\n      }\⟪ 8177 characters skipped ⟫alData.description.trim().length < 10) {\n      throw new MealServiceError('La descrizione deve essere di almeno 10 caratteri', 400, 'INVALID_DESCRIPTION');\n    }\n\n    if (!['breakfast', 'lunch', 'dinner'].includes(mealData.type)) {\n      throw new MealServiceError('Tipo di pasto non valido', 400, 'INVALID_TYPE');\n    }\n\n    if (!Array.isArray(mealData.topics) || mealData.topics.length === 0) {\n      throw new MealServiceError('Devi selezionare almeno un argomento', 400, 'INVALID_TOPICS');\n    }\n\n    if (typeof mealData.maxParticipants !== 'number' || mealData.maxParticipants < 2 || mealData.maxParticipants > 10) {\n      throw new MealServiceError('Il numero di partecipanti deve essere tra 2 e 10', 400, 'INVALID_PARTICIPANTS');\n    }\n\n    // Prepara i dati per l'invio\n    const formattedMealData = {\n      ...mealData,\n      title: mealData.title.trim(),\n      description: mealData.description.trim(),\n      date: new Date(mealData.date).toISOString(),\n      maxParticipants: parseInt(mealData.maxParticipants, 10),\n      topics: mealData.topics.map(topic => topic.trim()),\n      settings: {\n        ...mealData.settings,\n        language: mealData.language\n    

FRONTEND/client/node_modules/.cache/babel-loader/f233f5c11ae9d1a6e5710dae8e07dcab4c40f7195b88b7dad36cf5ec3135f7e8.json:
  1: ⟪ 553 characters skipped ⟫ent as _Fragment } from \"react/jsx-dev-runtime\";\nconst CreateMealForm = ({\n  onMealCreated,\n  onCancel\n}) => {\n  _s();\n  const [formData, setFormData] = useState({\n    title: '',\n    type: 'dinner',\n    date: new Date(new Date().setHours(new Date().getHours() + 2)),\n    maxParticipants: 4,\n    description: '',\n    language: 'Italiano',\n    topics: [],\n    duration: 120,\n    // Durata predefinita di 2 ore\n    settings: {\n      allowLateJoin: true,\n      requireApproval: false,\n      recordingEnabled: false\n    }\n  });\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [isFormValid, setIsFormValid] = useState(false);\n\n  // Validazione del form\n  useEffect(() => {\n    const validateForm = () => {\n      const {\n        title,\n        type,\n        date,\n        maxParticipants,\n        description,\n        language,\n        topics\n      } = formData;\n      const validations = {\n        title: title.trim().length >= 3,\n        type: ['breakfast', 'lunch', 'dinner', 'snack'].includes(type),\n        date: date instanceof Date && date > new Date(),\n        maxParticipants: maxParticipants >= 2 && maxParticipants <= 10,\n        description: description.trim().length >= 10,\n        language: language.trim().length >= 2,\n        topics: topics.length >= 1\n      };\n\n      // Debug delle validazioni\n      if (process.env.NODE_ENV === 'development') {\n        console.log('🔍 Form validations:', validations);\n      }\n      setIsFormValid(Object.values(validations).every(v => v === true));\n    };\n    validateForm();\n  }, [formData]);\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  const handleDateChange = date => {\n    setFormData(prev => ({\n      ...prev,\n      date: date\n    }));\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!isFormValid) {\n      const errorMessage = 'Per f⟪ 6376 characters skipped ⟫              fileName: _jsxFileName,\n                  lineNumber: 189,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"dinner\",\n                  children: \"\\uD83C\\uDF77 Cena\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 190,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"snack\",\n                  children: \"\\uD83C\\uDF6A Spuntino\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 191,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 182,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: ⟪ 22212 characters skipped ⟫s/CreateMealForm.css';\nimport { toast } from 'react-hot-toast';\n\nconst CreateMealForm = ({ onMealCreated, onCancel }) => {\n  const [formData, setFormData] = useState({\n    title: '',\n    type: 'dinner',\n    date: new Date(new Date().setHours(new Date().getHours() + 2)),\n    maxParticipants: 4,\n    description: '',\n    language: 'Italiano',\n    topics: [],\n    duration: 120, // Durata predefinita di 2 ore\n    settings: {\n      allowLateJoin: true,\n      requireApproval: false,\n      recordingEnabled: false\n    }\n  });\n  \n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [isFormValid, setIsFormValid] = useState(false);\n  \n  // Validazione del form\n  useEffect(() => {\n    const validateForm = () => {\n      const { title, type, date, maxParticipants, description, language, topics } = formData;\n      \n      const validations = {\n        title: title.trim().length >= 3,\n        type: ['breakfast', 'lunch', 'dinner', 'snack'].includes(type),\n        date: date instanceof Date && date > new Date(),\n        maxParticipants: maxParticipants >= 2 && maxParticipants <= 10,\n        description: description.trim().length >= 10,\n        language: language.trim().length >= 2,\n        topics: topics.length >= 1\n      };\n\n      // Debug delle validazioni\n      if (process.env.NODE_ENV === 'development') {\n        console.log('🔍 Form validations:', validations);\n      }\n      \n      setIsFormValid(Object.values(validations).every(v => v === true));\n    };\n    \n    validateForm();\n  }, [formData]);\n  \n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n  };\n  \n  const handleDateChange = (date) => {\n    setFormData(prev => ({ ...prev, date: date }));\n  };\n  \n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!isFormValid) {\n      const errorMessage = 'Per favore, compila correttame⟪ 3822 characters skipped ⟫     required\n                >\n                  <option value=\"breakfast\">🥐 Colazione</option>\n                  <option value=\"lunch\">🍽️ Pranzo</option>\n                  <option value=\"dinner\">🍷 Cena</option>\n                  <option value=\"snack\">🍪 Spuntino</option>\n                </Form.Select>\n              </Form.Group>\n            </Col>\n            \n            <Col md={6}>\n              <Form.Group>\n                <Form.Label>Lingua principale*</Form.Label>\n                <Form.Select\n                  name=\"language\"\n                  value={formData.language}\n                  onChange={handleChange}\n                  required\n                >\n                  <option value=\"Italiano\">🇮🇹 Italiano</option>\n                  <option value=\"English\">🇬🇧 Inglese</option>\n                  <option value=\"Español\">🇪🇸 Spagnolo</option>\n                  <option value=\"Français\">🇫🇷 Francese</option>\n                  <option value=\"Deutsch\">🇩🇪 Tedesco</option>\n                  <option value=\"中文\">🇨🇳 Cinese</option>\n                  <option value=\"日本語\">🇯🇵 Giapponese</option>\n                  <option valu

FRONTEND/client/node_modules/@fortawesome/fontawesome-free/metadata/icon-families.json:
  112051          "dining",
  112052:         "dinner",
  112053          "eat",

FRONTEND/client/node_modules/@fortawesome/fontawesome-free/metadata/icon-families.yml:
  53890        - dining
  53891:       - dinner
  53892        - eat

FRONTEND/client/node_modules/@fortawesome/fontawesome-free/metadata/icons.yml:
  44480        - dining
  44481:       - dinner
  44482        - eat

FRONTEND/client/node_modules/formik/dist/formik.cjs.development.js:
  1533    var componentDisplayName = Comp.displayName || Comp.name || Comp.constructor && Comp.constructor.name || 'Component'; // Assign Comp to C.WrappedComponent so we can access the inner component in tests
  1534:   // For example, <Field.WrappedComponent /> gets us <FieldInner/>
  1535  

  1875  
  1876: var FastFieldInner = /*#__PURE__*/function (_React$Component) {
  1877:   _inheritsLoose(FastFieldInner, _React$Component);
  1878  
  1879:   function FastFieldInner(props) {
  1880      var _this;

  1895  
  1896:   var _proto = FastFieldInner.prototype;
  1897  

  2004  
  2005:   return FastFieldInner;
  2006  }(React.Component);
  2007  
  2008: var FastField = /*#__PURE__*/connect(FastFieldInner);
  2009  

FRONTEND/client/node_modules/formik/dist/formik.cjs.development.js.map:
  1: ⟪ 60488 characters skipped ⟫uctor && Comp.constructor.name) ||\n    'Component';\n\n  // Assign Comp to C.WrappedComponent so we can access the inner component in tests\n  // For example, <Field.WrappedComponent /> gets us <FieldInner/>\n  (C as React.FC<OuterProps> & {\n    WrappedComponent: typeof Comp;\n  }).WrappedComponent = Comp;\n\n  C.displayName = `FormikConnect(${componentDisplayName})`;\n\n  return hoistNonReactStatics(\n    C,\n    Comp as React.ComponentClass<\n      OuterProps & { formik: FormikContextType<Values> }\n    > // cast type to ComponentClass (even if SFC)\n  );\n}\n","import cloneDeep from 'lodash/cloneDeep';\nimport * as React from 'react';\nimport isEqual from 'react-fast-compare';\nimport { connect } from './connect';\nimport {\n  FormikContextType,\n  FormikProps,\n  FormikState,\n  SharedRenderProps,\n} from './types';\nimport {\n  getIn,\n  isEmptyArray,\n  isEmptyChildren,\n  isFunction,\n  isObject,\n  setIn,\n} from './utils';\n\nexport type FieldArrayRenderProps = ArrayHelpers & {\n  form: FormikProps<any>;\n  name: string;\n};\n\nexport type FieldArrayConfig = {\n  /** Really the path to the array field to be updated */\n  name: string;\n  /** Should field array validate t⟪ 13000 characters skipped ⟫\n    nextProps: T & GenericFieldHTMLAttributes,\n    props: {}\n  ) => boolean;\n};\n\nexport type FastFieldAttributes<T> = GenericFieldHTMLAttributes &\n  FastFieldConfig<T> &\n  T;\n\ntype FastFieldInnerProps<Values = {}, Props = {}> = FastFieldAttributes<\n  Props\n> & { formik: FormikContextType<Values> };\n\n/**\n * Custom Field component for quickly hooking into Formik\n * context and wiring up forms.\n */\nclass FastFieldInner<Values = {}, Props = {}> extends React.Component<\n  FastFieldInnerProps<Values, Props>,\n  {}\n> {\n  constructor(props: FastFieldInnerProps<Values, Props>) {\n    super(props);\n    const { render, children, component, as: is, name } = props;\n    invariant(\n      !render,\n      `<FastField render> has been deprecated. Please use a child callback function instead: <FastField name={${name}}>{props => ...}</FastField> instead.`\n    );\n    invariant(\n      !(component && render),\n      'You should not use <FastField component> and <FastField render> in the same <FastField> component; <FastField component> will be ignored'\n    );\n\n    invariant(\n      !(is && children && isFunction(children)),\n      'You should not use <FastField as> and <FastField children> as a function in the same <FastField> component; <FastField as> will be ignored.'\n    );\n\n    invariant(\n      !(component && children && isFunction(children)),\n      'You should not use <FastField component> and <FastField children> as a function in the same <FastField> component; <FastField component> will be ignored.'\n    );\n\n    invariant(\n      !(render && children && !isEmptyChildren(children)),\n      'You should not use <FastField render> and <FastField children> in the same <FastField> component; <FastField children> will be ignored'\n    );\n  }\n\n  shouldComponentUpdate(props: FastFieldInnerProps<Values, Props>) {\n    if (this.props.shouldUpdate) {\n      return this.props.shouldUpdate(props, this.props);\n    } else if (\n      props.name !== this.props.name ||\n      getIn(props.formik.values, this.props.name) !==\n        getIn(this.props.formik.values, this.props.name) ||\n      getIn(props.formik.errors, this.props.name) !==\n        getIn(this.props.formik.errors, this.props.name) ||\n      getIn(props.formik.touched, this.props.name) !==\n        getIn(this.props.formik.touched, this.props.name) ||\n      Object.keys(this.props).length !== Object.keys(props).length ||\n      props.formik.isSubmitting !== this.props.formik.isSubmitting\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  componentDidMount() {\n    // Register the Field with the parent Formik. Parent will cycle through\n    // registered Field's validate fns right prior to submit\n    this.props.formik.registerField(this.props.name, {\n      validate: this.props.val⟪ 584 characters skipped ⟫nder() {\n    const {\n      validate,\n      name,\n      render,\n      as: is,\n      children,\n      component,\n      shouldUpdate,\n      formik,\n      ...props\n    } = this.props as FastFieldInnerProps<Values, Props>;\n\n    const {\n      validate: _validate,\n      validationSchema: _validationSchema,\n      ...restOfFormik\n    } = formik;\n    const field = formik.getFieldProps({ name, ...props });\n    const meta = {\n      value: getIn(formik.values, name),\n      error: getIn(formik.errors, name),\n      touched: !!getIn(formik.touched, name),\n      initialValue: getIn(formik.initialValues, name),\n      initialTouched: !!getIn(formik.initialTouched, name),\n      initialError: getIn(formik.initialErrors, name),\n    };\n\n    const bag = { field, meta, form: restOfFormik };\n\n    if (render) {\n      return (render as any)(bag);\n    }\n\n    if (isFunction(children)) {\n      return (children as (props: FastFieldProps<any>) => React.ReactNode)(bag);\n    }\n\n    if (component) {\n      // This behavior is backwards compat with earlier Formik 0.9 to 1.x\n      if (typeof component === 'string') {\n        const { innerRef, ...rest } = props;\n        return Rea⟪ 733 characters skipped ⟫eact.createElement(\n      asElement as React.ComponentClass,\n      { ...field, ...props },\n      children\n    );\n  }\n}\n\nexport const FastField = connect<FastFieldAttributes<any>, any>(FastFieldInner);\n"],"names":["FormikContext","React","undefined","displayName","FormikProvider","Provider","FormikConsumer","Consumer","useFormikContext","formik","invariant","isEmptyArray","value","Array","isArray","length","isFunction","obj","isObject","isInteger","String","Math","floor","Number","isString","Object","prototype","toString","call","isNaN","isEmptyChildren","children","count","isPromise","then","isInputEvent","target","getActiveElement","doc","document","activeElement","body","e","getIn","key","def","p","path","toPath","setIn","res","clone","resVal","i","pathArray","currentPath","currentObj","slice","nextPath","setNestedObjectValues","object","visited","response","WeakMap","keys","k","val","get","set","formikReducer","state","msg","type","values","payload","touched","isEqual","errors","status","isSubmitting","isValidating","field","submitCount","emptyErrors","emptyTouched","useFormik","validateOnChange","validateOnBlur","validateOnMount","isInitialValid","enableReinitialize","⟪ 3342 characters skipped ⟫p","pop","bind","componentDidUpdate","prevProps","every","v","tmp","arrayHelpers","restOfFormik","defaultProps","FieldArray","ErrorMessageImpl","shouldComponentUpdate","touch","ErrorMessage","FastFieldInner","shouldUpdate","componentDidMount","componentWillUnmount","bag","FastField"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAIaA,aAAa,gBAAGC,mBAAA,CAC3BC,SAD2B;AAG7BF,aAAa,CAACG,WAAd,GAA4B,eAA5B;IAEaC,cAAc,GAAGJ,aAAa,CAACK;IAC/BC,cAAc,GAAGN,aAAa,CAACO;SAE5BC;AACd,MAAMC,MAAM,GAAGR,gBAAA,CAA4CD,aAA5C,CAAf;AAEA,GACE,CAAC,CAACS,MADJ,IAAAC,SAAS,0HAAT,CAAA;AAKA,SAAOD,MAAP;AACD;;ACfD;;AACA,IAAaE,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD;AAAA,SAC1BC,KAAK,CAACC,OAAN,CAAcF,KAAd,KAAwBA,KAAK,CAACG,MAAN,KAAiB,CADf;AAAA,CAArB;AAGP;;AACA,IAAaC,UAAU,GAAG,SAAbA,UAAa,CAACC,GAAD;AAAA,SACxB,OAAOA,GAAP,KAAe,UADS;AAAA,CAAnB;AAGP;;AACA,IAAaC,QAAQ,GAAG,SAAXA,QAAW,CAACD,GAAD;AAAA,SACtBA,GAAG,KAAK,IAAR,IAAgB,OAAOA,GAAP,KAAe,QADT;AAAA,CAAjB;AAGP;;AACA,IAAaE,SAAS,GAAG,SAAZA,SAAY,CAACF,GAAD;AAAA,SACvBG,MAAM,CAACC,IAAI,CAACC,KAAL,CAAWC,MAAM,CAACN,GAAD,CAAjB,CAAD,CAAN,KAAoCA,GADb;AAAA,CAAlB;AAGP;;AACA,IAAaO,QAAQ,GAAG,SAAXA,QAAW,CAACP,GAAD;AAAA,SACtBQ,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA

FRONTEND/client/node_modules/formik/dist/formik.cjs.production.min.js.map:
  1: ⟪ 48307 characters skipped ⟫uctor && Comp.constructor.name) ||\n    'Component';\n\n  // Assign Comp to C.WrappedComponent so we can access the inner component in tests\n  // For example, <Field.WrappedComponent /> gets us <FieldInner/>\n  (C as React.FC<OuterProps> & {\n    WrappedComponent: typeof Comp;\n  }).WrappedComponent = Comp;\n\n  C.displayName = `FormikConnect(${componentDisplayName})`;\n\n  return hoistNonReactStatics(\n    C,\n    Comp as React.ComponentClass<\n      OuterProps & { formik: FormikContextType<Values> }\n    > // cast type to ComponentClass (even if SFC)\n  );\n}\n","import cloneDeep from 'lodash/cloneDeep';\nimport * as React from 'react';\nimport isEqual from 'react-fast-compare';\nimport { connect } from './connect';\nimport {\n  FormikContextType,\n  FormikProps,\n  FormikState,\n  SharedRenderProps,\n} from './types';\nimport {\n  getIn,\n  isEmptyArray,\n  isEmptyChildren,\n  isFunction,\n  isObject,\n  setIn,\n} from './utils';\n\nexport type FieldArrayRenderProps = ArrayHelpers & {\n  form: FormikProps<any>;\n  name: string;\n};\n\nexport type FieldArrayConfig = {\n  /** Really the path to the array field to be updated */\n  name: string;\n  /** Should field array validate t⟪ 13000 characters skipped ⟫\n    nextProps: T & GenericFieldHTMLAttributes,\n    props: {}\n  ) => boolean;\n};\n\nexport type FastFieldAttributes<T> = GenericFieldHTMLAttributes &\n  FastFieldConfig<T> &\n  T;\n\ntype FastFieldInnerProps<Values = {}, Props = {}> = FastFieldAttributes<\n  Props\n> & { formik: FormikContextType<Values> };\n\n/**\n * Custom Field component for quickly hooking into Formik\n * context and wiring up forms.\n */\nclass FastFieldInner<Values = {}, Props = {}> extends React.Component<\n  FastFieldInnerProps<Values, Props>,\n  {}\n> {\n  constructor(props: FastFieldInnerProps<Values, Props>) {\n    super(props);\n    const { render, children, component, as: is, name } = props;\n    invariant(\n      !render,\n      `<FastField render> has been deprecated. Please use a child callback function instead: <FastField name={${name}}>{props => ...}</FastField> instead.`\n    );\n    invariant(\n      !(component && render),\n      'You should not use <FastField component> and <FastField render> in the same <FastField> component; <FastField component> will be ignored'\n    );\n\n    invariant(\n      !(is && children && isFunction(children)),\n      'You should not use <FastField as> and <FastField children> as a function in the same <FastField> component; <FastField as> will be ignored.'\n    );\n\n    invariant(\n      !(component && children && isFunction(children)),\n      'You should not use <FastField component> and <FastField children> as a function in the same <FastField> component; <FastField component> will be ignored.'\n    );\n\n    invariant(\n      !(render && children && !isEmptyChildren(children)),\n      'You should not use <FastField render> and <FastField children> in the same <FastField> component; <FastField children> will be ignored'\n    );\n  }\n\n  shouldComponentUpdate(props: FastFieldInnerProps<Values, Props>) {\n    if (this.props.shouldUpdate) {\n      return this.props.shouldUpdate(props, this.props);\n    } else if (\n      props.name !== this.props.name ||\n      getIn(props.formik.values, this.props.name) !==\n        getIn(this.props.formik.values, this.props.name) ||\n      getIn(props.formik.errors, this.props.name) !==\n        getIn(this.props.formik.errors, this.props.name) ||\n      getIn(props.formik.touched, this.props.name) !==\n        getIn(this.props.formik.touched, this.props.name) ||\n      Object.keys(this.props).length !== Object.keys(props).length ||\n      props.formik.isSubmitting !== this.props.formik.isSubmitting\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  componentDidMount() {\n    // Register the Field with the parent Formik. Parent will cycle through\n    // registered Field's validate fns right prior to submit\n    this.props.formik.registerField(this.props.name, {\n      validate: this.props.val⟪ 584 characters skipped ⟫nder() {\n    const {\n      validate,\n      name,\n      render,\n      as: is,\n      children,\n      component,\n      shouldUpdate,\n      formik,\n      ...props\n    } = this.props as FastFieldInnerProps<Values, Props>;\n\n    const {\n      validate: _validate,\n      validationSchema: _validationSchema,\n      ...restOfFormik\n    } = formik;\n    const field = formik.getFieldProps({ name, ...props });\n    const meta = {\n      value: getIn(formik.values, name),\n      error: getIn(formik.errors, name),\n      touched: !!getIn(formik.touched, name),\n      initialValue: getIn(formik.initialValues, name),\n      initialTouched: !!getIn(formik.initialTouched, name),\n      initialError: getIn(formik.initialErrors, name),\n    };\n\n    const bag = { field, meta, form: restOfFormik };\n\n    if (render) {\n      return (render as any)(bag);\n    }\n\n    if (isFunction(children)) {\n      return (children as (props: FastFieldProps<any>) => React.ReactNode)(bag);\n    }\n\n    if (component) {\n      // This behavior is backwards compat with earlier Formik 0.9 to 1.x\n      if (typeof component === 'string') {\n        const { innerRef, ...rest } = props;\n        return Rea⟪ 733 characters skipped ⟫eact.createElement(\n      asElement as React.ComponentClass,\n      { ...field, ...props },\n      children\n    );\n  }\n}\n\nexport const FastField = connect<FastFieldAttributes<any>, any>(FastFieldInner);\n","import * as React from 'react';\nimport {\n  FormikProps,\n  GenericFieldHTMLAttributes,\n  FieldMetaProps,\n  FieldHelperProps,\n  FieldInputProps,\n  FieldValidator,\n} from './types';\nimport { useFormikContext } from './FormikContext';\nimport { isFunction, isEmptyChildren, isObject } from './utils';\nimport invariant from 'tiny-warning';\n\nexport interface FieldProps<V = any, FormValues = any> {\n  field: FieldInputProps<V>;\n  form: FormikProps<FormValues>; // if ppl want to restrict this for a given form, let them.\n  meta: FieldMetaProps<V>;\n}\n\nexport interface FieldConfig<V = any> {\n  /**\n   * Field component to render. Can either be a string like 'select' or a component.\n   */\n  component?:\n  | string\n  | React.ComponentType<FieldProps<V>>\n  | React.ComponentType\n  | React.ForwardRefExoticComponent<any>;\n\n  /**\n   * Component to render. Can either be a string e.g. 'select', 'input', or 'textarea', or a component.\n   */\n  as?:\n  | React.Component

FRONTEND/client/node_modules/formik/dist/formik.esm.js:
  1527    var componentDisplayName = Comp.displayName || Comp.name || Comp.constructor && Comp.constructor.name || 'Component'; // Assign Comp to C.WrappedComponent so we can access the inner component in tests
  1528:   // For example, <Field.WrappedComponent /> gets us <FieldInner/>
  1529  

  1869  
  1870: var FastFieldInner = /*#__PURE__*/function (_React$Component) {
  1871:   _inheritsLoose(FastFieldInner, _React$Component);
  1872  
  1873:   function FastFieldInner(props) {
  1874      var _this;

  1889  
  1890:   var _proto = FastFieldInner.prototype;
  1891  

  1998  
  1999:   return FastFieldInner;
  2000  }(Component);
  2001  
  2002: var FastField = /*#__PURE__*/connect(FastFieldInner);
  2003  

FRONTEND/client/node_modules/formik/dist/formik.esm.js.map:
  1: ⟪ 60476 characters skipped ⟫uctor && Comp.constructor.name) ||\n    'Component';\n\n  // Assign Comp to C.WrappedComponent so we can access the inner component in tests\n  // For example, <Field.WrappedComponent /> gets us <FieldInner/>\n  (C as React.FC<OuterProps> & {\n    WrappedComponent: typeof Comp;\n  }).WrappedComponent = Comp;\n\n  C.displayName = `FormikConnect(${componentDisplayName})`;\n\n  return hoistNonReactStatics(\n    C,\n    Comp as React.ComponentClass<\n      OuterProps & { formik: FormikContextType<Values> }\n    > // cast type to ComponentClass (even if SFC)\n  );\n}\n","import cloneDeep from 'lodash/cloneDeep';\nimport * as React from 'react';\nimport isEqual from 'react-fast-compare';\nimport { connect } from './connect';\nimport {\n  FormikContextType,\n  FormikProps,\n  FormikState,\n  SharedRenderProps,\n} from './types';\nimport {\n  getIn,\n  isEmptyArray,\n  isEmptyChildren,\n  isFunction,\n  isObject,\n  setIn,\n} from './utils';\n\nexport type FieldArrayRenderProps = ArrayHelpers & {\n  form: FormikProps<any>;\n  name: string;\n};\n\nexport type FieldArrayConfig = {\n  /** Really the path to the array field to be updated */\n  name: string;\n  /** Should field array validate t⟪ 13000 characters skipped ⟫\n    nextProps: T & GenericFieldHTMLAttributes,\n    props: {}\n  ) => boolean;\n};\n\nexport type FastFieldAttributes<T> = GenericFieldHTMLAttributes &\n  FastFieldConfig<T> &\n  T;\n\ntype FastFieldInnerProps<Values = {}, Props = {}> = FastFieldAttributes<\n  Props\n> & { formik: FormikContextType<Values> };\n\n/**\n * Custom Field component for quickly hooking into Formik\n * context and wiring up forms.\n */\nclass FastFieldInner<Values = {}, Props = {}> extends React.Component<\n  FastFieldInnerProps<Values, Props>,\n  {}\n> {\n  constructor(props: FastFieldInnerProps<Values, Props>) {\n    super(props);\n    const { render, children, component, as: is, name } = props;\n    invariant(\n      !render,\n      `<FastField render> has been deprecated. Please use a child callback function instead: <FastField name={${name}}>{props => ...}</FastField> instead.`\n    );\n    invariant(\n      !(component && render),\n      'You should not use <FastField component> and <FastField render> in the same <FastField> component; <FastField component> will be ignored'\n    );\n\n    invariant(\n      !(is && children && isFunction(children)),\n      'You should not use <FastField as> and <FastField children> as a function in the same <FastField> component; <FastField as> will be ignored.'\n    );\n\n    invariant(\n      !(component && children && isFunction(children)),\n      'You should not use <FastField component> and <FastField children> as a function in the same <FastField> component; <FastField component> will be ignored.'\n    );\n\n    invariant(\n      !(render && children && !isEmptyChildren(children)),\n      'You should not use <FastField render> and <FastField children> in the same <FastField> component; <FastField children> will be ignored'\n    );\n  }\n\n  shouldComponentUpdate(props: FastFieldInnerProps<Values, Props>) {\n    if (this.props.shouldUpdate) {\n      return this.props.shouldUpdate(props, this.props);\n    } else if (\n      props.name !== this.props.name ||\n      getIn(props.formik.values, this.props.name) !==\n        getIn(this.props.formik.values, this.props.name) ||\n      getIn(props.formik.errors, this.props.name) !==\n        getIn(this.props.formik.errors, this.props.name) ||\n      getIn(props.formik.touched, this.props.name) !==\n        getIn(this.props.formik.touched, this.props.name) ||\n      Object.keys(this.props).length !== Object.keys(props).length ||\n      props.formik.isSubmitting !== this.props.formik.isSubmitting\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  componentDidMount() {\n    // Register the Field with the parent Formik. Parent will cycle through\n    // registered Field's validate fns right prior to submit\n    this.props.formik.registerField(this.props.name, {\n      validate: this.props.val⟪ 584 characters skipped ⟫nder() {\n    const {\n      validate,\n      name,\n      render,\n      as: is,\n      children,\n      component,\n      shouldUpdate,\n      formik,\n      ...props\n    } = this.props as FastFieldInnerProps<Values, Props>;\n\n    const {\n      validate: _validate,\n      validationSchema: _validationSchema,\n      ...restOfFormik\n    } = formik;\n    const field = formik.getFieldProps({ name, ...props });\n    const meta = {\n      value: getIn(formik.values, name),\n      error: getIn(formik.errors, name),\n      touched: !!getIn(formik.touched, name),\n      initialValue: getIn(formik.initialValues, name),\n      initialTouched: !!getIn(formik.initialTouched, name),\n      initialError: getIn(formik.initialErrors, name),\n    };\n\n    const bag = { field, meta, form: restOfFormik };\n\n    if (render) {\n      return (render as any)(bag);\n    }\n\n    if (isFunction(children)) {\n      return (children as (props: FastFieldProps<any>) => React.ReactNode)(bag);\n    }\n\n    if (component) {\n      // This behavior is backwards compat with earlier Formik 0.9 to 1.x\n      if (typeof component === 'string') {\n        const { innerRef, ...rest } = props;\n        return Rea⟪ 733 characters skipped ⟫eact.createElement(\n      asElement as React.ComponentClass,\n      { ...field, ...props },\n      children\n    );\n  }\n}\n\nexport const FastField = connect<FastFieldAttributes<any>, any>(FastFieldInner);\n"],"names":["FormikContext","React","undefined","displayName","FormikProvider","Provider","FormikConsumer","Consumer","useFormikContext","formik","invariant","isEmptyArray","value","Array","isArray","length","isFunction","obj","isObject","isInteger","String","Math","floor","Number","isString","Object","prototype","toString","call","isNaN","isEmptyChildren","children","count","isPromise","then","isInputEvent","target","getActiveElement","doc","document","activeElement","body","e","getIn","key","def","p","path","toPath","setIn","res","clone","resVal","i","pathArray","currentPath","currentObj","slice","nextPath","setNestedObjectValues","object","visited","response","WeakMap","keys","k","val","get","set","formikReducer","state","msg","type","values","payload","touched","isEqual","errors","status","isSubmitting","isValidating","field","submitCount","emptyErrors","emptyTouched","useFormik","validateOnChange","validateOnBlur","validateOnMount","isInitialValid","enableReinitialize","⟪ 3369 characters skipped ⟫p","pop","bind","componentDidUpdate","prevProps","every","v","tmp","arrayHelpers","restOfFormik","defaultProps","FieldArray","ErrorMessageImpl","shouldComponentUpdate","touch","ErrorMessage","FastFieldInner","shouldUpdate","componentDidMount","componentWillUnmount","bag","FastField"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAIaA,aAAa,gBAAGC,aAAA,CAC3BC,SAD2B;AAG7BF,aAAa,CAACG,WAAd,GAA4B,eAA5B;IAEaC,cAAc,GAAGJ,aAAa,CAACK;IAC/BC,cAAc,GAAGN,aAAa,CAACO;SAE5BC;AACd,MAAMC,MAAM,GAAGR,UAAA,CAA4CD,aAA5C,CAAf;AAEA,GACE,CAAC,CAACS,MADJ,2CAAAC,SAAS,0HAAT,GAAAA,SAAS,OAAT;AAKA,SAAOD,MAAP;AACD;;ACfD;;AACA,IAAaE,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD;AAAA,SAC1BC,KAAK,CAACC,OAAN,CAAcF,KAAd,KAAwBA,KAAK,CAACG,MAAN,KAAiB,CADf;AAAA,CAArB;AAGP;;AACA,IAAaC,UAAU,GAAG,SAAbA,UAAa,CAACC,GAAD;AAAA,SACxB,OAAOA,GAAP,KAAe,UADS;AAAA,CAAnB;AAGP;;AACA,IAAaC,QAAQ,GAAG,SAAXA,QAAW,CAACD,GAAD;AAAA,SACtBA,GAAG,KAAK,IAAR,IAAgB,OAAOA,GAAP,KAAe,QADT;AAAA,CAAjB;AAGP;;AACA,IAAaE,SAAS,GAAG,SAAZA,SAAY,CAACF,GAAD;AAAA,SACvBG,MAAM,CAACC,IAAI,CAACC,KAAL,CAAWC,MAAM,CAACN,GAAD,CAAjB,CAAD,CAAN,KAAoCA,GADb;AAAA,CAAlB;AAGP;;AACA,IAAaO,QAAQ,GAAG,SAAXA,QAAW,CAACP,GAAD;AAAA,SACtBQ,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC

FRONTEND/client/node_modules/react-dom/cjs/react-dom.development.js:
  2008  var didWarnInvalidChild = false;
  2009: var didWarnInvalidInnerHTML = false;
  2010  /**

  2034        } else if (props.dangerouslySetInnerHTML != null) {
  2035:         if (!didWarnInvalidInnerHTML) {
  2036:           didWarnInvalidInnerHTML = true;
  2037  

FRONTEND/client/node_modules/react-dom/umd/react-dom.development.js:
  1995    var didWarnInvalidChild = false;
  1996:   var didWarnInvalidInnerHTML = false;
  1997    /**

  2021          } else if (props.dangerouslySetInnerHTML != null) {
  2022:           if (!didWarnInvalidInnerHTML) {
  2023:             didWarnInvalidInnerHTML = true;
  2024  

FRONTEND/client/node_modules/react-icons/md/index.d.ts:
  1549  export declare const MdDiamond: IconType;
  1550: export declare const MdDinnerDining: IconType;
  1551  export declare const MdDirectionsBike: IconType;

  3725  export declare const MdOutlineDiamond: IconType;
  3726: export declare const MdOutlineDinnerDining: IconType;
  3727  export declare const MdOutlineDirectionsBike: IconType;

FRONTEND/client/node_modules/react-icons/md/index.js:
   4643  };
   4644: module.exports.MdDinnerDining = function MdDinnerDining (props) {
   4645    return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 24 24"},"child":[{"tag":"path","attr":{"fill":"none","d":"M0 0h24v24H0z"},"child":[]},{"tag":"path","attr":{"d":"M2 19h20l-2 2H4l-2-2zM5 6h1v1H5V6zm0-2h1v1H5V4zm4 0v1H7V4h2zm0 3H7V6h2v1zm-3 8.23c-.36.11-.69.28-1 .47V8h1v7.23zm-2 1.29c-.38.44-.68.93-.84 1.48h16.82c.01-.16.03-.33.03-.5a5.497 5.497 0 0 0-10.58-2.1c-.59-.25-1.24-.4-1.93-.4-.17 0-.33.02-.5.04V8h2c1.03.06 1.9-.96 2-2h10V5H11c-.1-1.05-.97-1.97-2-2H3v1h1v1H3v1h1v1H3v1h1v8.52z"},"child":[]}]})(props);

  11171  };
  11172: module.exports.MdOutlineDinnerDining = function MdOutlineDinnerDining (props) {
  11173    return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 24 24"},"child":[{"tag":"path","attr":{"fill":"none","d":"M0 0h24v24H0z"},"child":[]},{"tag":"path","attr":{"d":"m2 19 2 2h16l2-2zM3 18h16.97c.29-3.26-2.28-6-5.48-6-2.35 0-4.35 1.48-5.14 3.55-.41-.23-.87-.38-1.35-.47V9h1.75C10.99 9 12 7.99 12 6.75h9v-1.5h-9C12 4.01 10.99 3 9.75 3H3v1.5h1v.75H3v1.5h1v.75H3V9h1v7.39c-.44.46-.78 1-1 1.61zm11.5-4c.99 0 1.91.4 2.58 1.14.24.26.44.55.58.86h-6.32c.58-1.21 1.81-2 3.16-2zM8 4.5h2v.75H8V4.5zm0 2.25h2v.75H8v-.75zM5.5 4.5h1v.75h-1V4.5zm0 2.25h1v.75h-1v-.75zM5.5 9h1v6.06c-.35.06-.68.17-1 .3V9z"},"child":[]}]})(props);

FRONTEND/client/node_modules/react-icons/md/index.mjs:
   4643  };
   4644: export function MdDinnerDining (props) {
   4645    return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 24 24"},"child":[{"tag":"path","attr":{"fill":"none","d":"M0 0h24v24H0z"},"child":[]},{"tag":"path","attr":{"d":"M2 19h20l-2 2H4l-2-2zM5 6h1v1H5V6zm0-2h1v1H5V4zm4 0v1H7V4h2zm0 3H7V6h2v1zm-3 8.23c-.36.11-.69.28-1 .47V8h1v7.23zm-2 1.29c-.38.44-.68.93-.84 1.48h16.82c.01-.16.03-.33.03-.5a5.497 5.497 0 0 0-10.58-2.1c-.59-.25-1.24-.4-1.93-.4-.17 0-.33.02-.5.04V8h2c1.03.06 1.9-.96 2-2h10V5H11c-.1-1.05-.97-1.97-2-2H3v1h1v1H3v1h1v1H3v1h1v8.52z"},"child":[]}]})(props);

  11171  };
  11172: export function MdOutlineDinnerDining (props) {
  11173    return GenIcon({"tag":"svg","attr":{"viewBox":"0 0 24 24"},"child":[{"tag":"path","attr":{"fill":"none","d":"M0 0h24v24H0z"},"child":[]},{"tag":"path","attr":{"d":"m2 19 2 2h16l2-2zM3 18h16.97c.29-3.26-2.28-6-5.48-6-2.35 0-4.35 1.48-5.14 3.55-.41-.23-.87-.38-1.35-.47V9h1.75C10.99 9 12 7.99 12 6.75h9v-1.5h-9C12 4.01 10.99 3 9.75 3H3v1.5h1v.75H3v1.5h1v.75H3V9h1v7.39c-.44.46-.78 1-1 1.61zm11.5-4c.99 0 1.91.4 2.58 1.14.24.26.44.55.58.86h-6.32c.58-1.21 1.81-2 3.16-2zM8 4.5h2v.75H8V4.5zm0 2.25h2v.75H8v-.75zM5.5 4.5h1v.75h-1V4.5zm0 2.25h1v.75h-1v-.75zM5.5 9h1v6.06c-.35.06-.68.17-1 .3V9z"},"child":[]}]})(props);

FRONTEND/client/node_modules/react-refresh/cjs/react-refresh-babel.development.js:
   51  
   52:   function findInnerComponents(inferredName, path, callback) {
   53      var node = path.node;

  114                  var innerName = inferredName + '$' + calleeSource;
  115:                 var foundInside = findInnerComponents(innerName, firstArgPath, callback);
  116  

  185  
  186:           var _foundInside = findInnerComponents(inferredName, initPath, callback);
  187  

  506          var programPath = path.parentPath;
  507:         findInnerComponents(inferredName, declPath, function (persistentID, targetExpr, targetPath) {
  508            if (targetPath === null) {

  592  
  593:           findInnerComponents(innerName, path, function (persistentID, targetExpr) {
  594              var handle = createRegistration(programPath, persistentID);

  771          var innerName = modulePrefix + inferredName;
  772:         findInnerComponents(innerName, declPath, function (persistentID, targetExpr, targetPath) {
  773            if (targetPath === null) {

FRONTEND/client/node_modules/webpack/types.d.ts:
  562  	postfix?: null | BasicEvaluatedExpression;
  563: 	wrappedInnerExpressions?: BasicEvaluatedExpression[];
  564  	identifier?: string | VariableInfo;

FRONTEND/client/node_modules/webpack/lib/dependencies/ContextDependencyHelpers.js:
  236  
  237: 		if (parser && param.wrappedInnerExpressions) {
  238: 			for (const part of param.wrappedInnerExpressions) {
  239  				if (part.expression)

FRONTEND/client/node_modules/webpack/lib/javascript/BasicEvaluatedExpression.js:
   64  		/** @type {BasicEvaluatedExpression[] | undefined} */
   65: 		this.wrappedInnerExpressions = undefined;
   66  		/** @type {string | VariableInfo | undefined} */

  423  		this.postfix = postfix;
  424: 		this.wrappedInnerExpressions = innerExpressions;
  425  		this.sideEffects = true;

FRONTEND/client/node_modules/webpack/lib/javascript/JavascriptParser.js:
  1044  							right.postfix,
  1045: 							right.wrappedInnerExpressions
  1046  						);

  1049  						// => ("left" + inner + "postfix")
  1050: 						res.setWrapped(left, right.postfix, right.wrappedInnerExpressions);
  1051  					} else {

  1090  								),
  1091: 							left.wrappedInnerExpressions
  1092  						);

  1112  								),
  1113: 							left.wrappedInnerExpressions
  1114  						);

  1117  						// => ("prefix" + inner + "right")
  1118: 						res.setWrapped(left.prefix, right, left.wrappedInnerExpressions);
  1119  					} else if (right.isNumber()) {

  1126  								.setRange(/** @type {Range} */ (right.range)),
  1127: 							left.wrappedInnerExpressions
  1128  						);

  1134  							right.postfix,
  1135: 							left.wrappedInnerExpressions &&
  1136: 								right.wrappedInnerExpressions &&
  1137: 								left.wrappedInnerExpressions
  1138  									.concat(left.postfix ? [left.postfix] : [])
  1139  									.concat(right.prefix ? [right.prefix] : [])
  1140: 									.concat(right.wrappedInnerExpressions)
  1141  						);

  1147  							null,
  1148: 							left.wrappedInnerExpressions &&
  1149: 								left.wrappedInnerExpressions.concat(
  1150  									left.postfix ? [left.postfix, right] : [right]

  1163  						right.postfix,
  1164: 						right.wrappedInnerExpressions &&
  1165  							(right.prefix ? [left, right.prefix] : [left]).concat(
  1166: 								right.wrappedInnerExpressions
  1167  							)

  1700  					const inner =
  1701: 						param.isWrapped() && param.wrappedInnerExpressions
  1702: 							? param.wrappedInnerExpressions.concat(innerExpressions.reverse())
  1703  							: innerExpressions.reverse();

  1708  					const postfix = stringSuffix || param.postfix;
  1709: 					const inner = param.wrappedInnerExpressions
  1710: 						? param.wrappedInnerExpressions.concat(innerExpressions.reverse())
  1711  						: innerExpressions.reverse();

FRONTEND/client/node_modules/webpack-sources/lib/helpers/streamChunksOfCombinedSourceMap.js:
  36  	const innerSourceMapLineData = [];
  37: 	const findInnerMapping = (line, column) => {
  38  		if (line > innerSourceMapLineData.length) return -1;

  67  				// Check if there is a mapping in the inner source
  68: 				const idx = findInnerMapping(originalLine, originalColumn);
  69  				if (idx !== -1) {

FRONTEND/client/src/pages/Meals/CreateMealPage.js:
   11    lunch: 'Pranzo',
   12:   dinner: 'Cena',
   13    aperitif: 'Aperitivo'

   17    const navigate = useNavigate();
   18:   const VALID_MEAL_TYPES = ['breakfast', 'lunch', 'dinner', 'aperitif'];
   19    const VALID_LANGUAGES = ['Italiano', 'English', 'Español', 'Français', 'Deutsch', '中文', 'العربية'];

  321                         type === 'lunch' ? '🍽️ ' + MEAL_TYPE_TRANSLATIONS[type] :
  322:                        type === 'dinner' ? '🍷 ' + MEAL_TYPE_TRANSLATIONS[type] :
  323                         '🍹 ' + MEAL_TYPE_TRANSLATIONS[type]}

FRONTEND/client/src/pages/Meals/EditMealPage.js:
  177              <option value="lunch">Pranzo</option>
  178:             <option value="dinner">Cena</option>
  179              <option value="aperitif">Aperitivo</option>

FRONTEND/client/src/pages/Meals/MealDetail.js:
  28      'lunch': 'Pranzo',
  29:     'dinner': 'Cena',
  30      'aperitif': 'Aperitivo'

FRONTEND/client/src/pages/Meals/MealFilters.js:
  58                <option value="lunch">Pranzo</option>
  59:               <option value="dinner">Cena</option>
  60                <option value="aperitif">Aperitivo</option>

FRONTEND/client/src/pages/Meals/MealItem.js :
  12    'lunch': 'Pranzo',
  13:   'dinner': 'Cena',
  14    'aperitif': 'Aperitivo'

FRONTEND/client/src/pages/Meals/MealsList.js:
  57        lunch: { text: 'Pranzo', variant: 'success', icon: 'fa-utensils' },
  58:       dinner: { text: 'Cena', variant: 'primary', icon: 'fa-moon' },
  59        aperitif: { text: 'Aperitivo', variant: 'warning', icon: 'fa-glass-cheers' }

FRONTEND/client/src/pages/Profile/MealHistory.js:
  23        lunch: 'Pranzo',
  24:       dinner: 'Cena',
  25        aperitif: 'Aperitivo'

  34        lunch: '#28a745',    // Verde per pranzo
  35:       dinner: '#6f42c1',   // Viola per cena
  36        aperitif: '#fd7e14'  // Arancione per aperitivo

FRONTEND/client/src/services/mealService.js:
  6    lunch: 'pranzo',
  7:   dinner: 'cena',
  8    aperitif: 'aperitivo'

node_modules/react-dom/cjs/react-dom-client.development.js:
   1767            : null == props.dangerouslySetInnerHTML ||
   1768:             didWarnInvalidInnerHTML ||
   1769:             ((didWarnInvalidInnerHTML = !0),
   1770              console.error(

  21323        didWarnInvalidChild = !1,
  21324:       didWarnInvalidInnerHTML = !1;
  21325      var didWarnValueDefaultValue = !1;

node_modules/react-dom/cjs/react-dom-profiling.development.js:
   1775            : null == props.dangerouslySetInnerHTML ||
   1776:             didWarnInvalidInnerHTML ||
   1777:             ((didWarnInvalidInnerHTML = !0),
   1778              console.error(

  21380        didWarnInvalidChild = !1,
  21381:       didWarnInvalidInnerHTML = !1;
  21382      var didWarnValueDefaultValue = !1;

node_modules/yargs/build/lib/command.js:
  243          return isPromise(maybePromiseArgv)
  244:             ? maybePromiseArgv.then(resolvedInnerArgv => this.handleValidationAndGetResult(isDefaultCommand, commandHandler, resolvedInnerArgv, currentContext, aliases, yargs, middlewares, positionalMap))
  245              : this.handleValidationAndGetResult(isDefaultCommand, commandHandler, maybePromiseArgv, currentContext, aliases, yargs, middlewares, positionalMap);
